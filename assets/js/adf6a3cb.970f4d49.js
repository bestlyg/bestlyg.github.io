"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[37647],{16399:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>l,toc:()=>a});var o=t(86070),r=t(25710);const c={},s="909.\u86c7\u68af\u68cb",l={id:"leetcode/901-1000/\u86c7\u68af\u68cb",title:"909.\u86c7\u68af\u68cb",description:"\u94fe\u63a5\uff1a909.\u86c7\u68af\u68cb",source:"@site/docs/leetcode/901-1000/909.\u86c7\u68af\u68cb.md",sourceDirName:"leetcode/901-1000",slug:"/leetcode/901-1000/\u86c7\u68af\u68cb",permalink:"/web/site/docs/leetcode/901-1000/\u86c7\u68af\u68cb",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:909,frontMatter:{},sidebar:"journal",previous:{title:"908.\u6700\u5c0f\u5dee\u503cI",permalink:"/web/site/docs/leetcode/901-1000/\u6700\u5c0f\u5dee\u503cI"},next:{title:"911.\u5728\u7ebf\u9009\u4e3e",permalink:"/web/site/docs/leetcode/901-1000/\u5728\u7ebf\u9009\u4e3e"}},i={},a=[{value:"\u9898\u89e3 1 - typescript",id:"\u9898\u89e3-1---typescript",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"909\u86c7\u68af\u68cb",children:"909.\u86c7\u68af\u68cb"}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,o.jsx)(e.a,{href:"https://leetcode.cn/problems/snakes-and-ladders",children:"909.\u86c7\u68af\u68cb"}),(0,o.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1a\u4e2d\u7b49",(0,o.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u77e9\u9635",(0,o.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","N x N \u7684\u68cb\u76d8 board \u4e0a\uff0c\u6309\u4ece 1 \u5230 N*N \u7684\u6570\u5b57\u7ed9\u65b9\u683c\u7f16\u53f7\uff0c\u7f16\u53f7 \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\uff0c\u6bcf\u4e00\u884c\u4ea4\u66ff\u65b9\u5411\u3002\u8fd4\u56de\u8fbe\u5230\u65b9\u683c N*N \u6240\u9700\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\uff0c\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u5219\u8fd4\u56de -1\u3002"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"\u9898\u89e3-1---typescript",children:"\u9898\u89e3 1 - typescript"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-06-27"}),"\n",(0,o.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a116ms"}),"\n",(0,o.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a45.5MB"}),"\n",(0,o.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,o.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u50a8\u5b58\u540e\u8fdb\u884c\u904d\u5386\u3002"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"function snakesAndLadders(board: number[][]): number {\n  const N = board.length;\n  const toBlock = (row: number, col: number) => {\n    if ((N & 1) === 0) {\n      return N * (N - 1 - row) + ((row & 1) === 0 ? N - col : col + 1);\n    } else {\n      return N * (N - 1 - row) + ((row & 1) === 0 ? col + 1 : N - col);\n    }\n  };\n  const toBoard = (block: number): [number, number] => {\n    const row = N - 1 - ~~((block - 1) / N);\n    let col!: number;\n    if ((N & 1) === 0) {\n      col = (row & 1) === 0 ? N - 1 - ((block - 1) % N) : (block - 1) % N;\n    } else {\n      col = (row & 1) === 0 ? (block - 1) % N : N - 1 - ((block - 1) % N);\n    }\n    return [row, col];\n  };\n  const ANS_NUM = N ** 2;\n  const map = new Map<number, number>([[1, 0]]);\n  let ans = Infinity;\n  const queue: [number, number][] = [[N - 1, 0]];\n  while (queue.length !== 0) {\n    const [row, col] = queue.shift()!;\n    const block = toBlock(row, col);\n    const step = map.get(block)!;\n    if (ANS_NUM - block <= 6) {\n      ans = Math.min(ans, step + 1);\n      continue;\n    }\n    for (let i = 1; i <= 6; i++) {\n      let nextBlock = block + i;\n      let nextBoard = toBoard(nextBlock);\n      const [nextRow, nextCol] = nextBoard;\n      if (board[nextRow][nextCol] !== -1) {\n        nextBlock = board[nextRow][nextCol];\n        nextBoard = toBoard(nextBlock);\n      }\n      if (nextBlock === ANS_NUM) {\n        ans = Math.min(ans, step + 1);\n        continue;\n      }\n      if (!map.has(nextBlock)) queue.push(nextBoard);\n      map.set(nextBlock, Math.min(map.get(nextBlock) ?? Infinity, step + 1));\n    }\n  }\n  return ans === Infinity ? -1 : ans;\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},25710:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var o=t(30758);const r={},c=o.createContext(r);function s(n){const e=o.useContext(c);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),o.createElement(c.Provider,{value:e},n.children)}}}]);