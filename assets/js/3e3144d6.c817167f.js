"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[26041],{2336:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>a,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var t=i(86070),r=i(25710);const o={},s="421.\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c",l={id:"leetcode/401-500/\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c",title:"421.\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c",description:"\u94fe\u63a5\uff1a421.\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c",source:"@site/docs/leetcode/401-500/421.\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c.md",sourceDirName:"leetcode/401-500",slug:"/leetcode/401-500/\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c",permalink:"/docs/leetcode/401-500/\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:421,frontMatter:{},sidebar:"journal",previous:{title:"419.\u68cb\u76d8\u4e0a\u7684\u6218\u8230",permalink:"/docs/leetcode/401-500/\u68cb\u76d8\u4e0a\u7684\u6218\u8230"},next:{title:"423.\u4ece\u82f1\u6587\u4e2d\u91cd\u5efa\u6570\u5b57",permalink:"/docs/leetcode/401-500/\u4ece\u82f1\u6587\u4e2d\u91cd\u5efa\u6570\u5b57"}},d={},u=[{value:"\u9898\u89e3 1 - typescript",id:"\u9898\u89e3-1---typescript",level:2},{value:"\u9898\u89e3 2 - typescript",id:"\u9898\u89e3-2---typescript",level:2},{value:"\u9898\u89e3 3 - typescript",id:"\u9898\u89e3-3---typescript",level:2},{value:"\u9898\u89e3 4 - cpp",id:"\u9898\u89e3-4---cpp",level:2},{value:"\u9898\u89e3 5 - python",id:"\u9898\u89e3-5---python",level:2},{value:"\u9898\u89e3 6 - rust",id:"\u9898\u89e3-6---rust",level:2}];function c(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"421\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c",children:"421.\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/maximum-xor-of-two-numbers-in-an-array",children:"421.\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c"}),(0,t.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,t.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u4f4d\u8fd0\u7b97\u3001\u5b57\u5178\u6811\u3001\u6570\u7ec4\u3001\u54c8\u5e0c\u8868",(0,t.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de nums[i] XOR nums[j] \u7684\u6700\u5927\u8fd0\u7b97\u7ed3\u679c\uff0c\u5176\u4e2d 0 \u2264 i \u2264 j < n \u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-1---typescript",children:"\u9898\u89e3 1 - typescript"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-05-16"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a6480ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a40.4MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","O(n2)\u5faa\u73af\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"function findMaximumXOR(nums: number[]): number {\n  let ans = -Infinity;\n  nums.forEach(v1 => nums.forEach(v2 => (ans = Math.max(ans, v1 ^ v2))));\n  return ans;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-2---typescript",children:"\u9898\u89e3 2 - typescript"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-05-16"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a156ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a49.2MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5229\u7528 trie \u50a8\u5b58\u4e8c\u8fdb\u5236\uff0c\u6bcf\u6b21\u5bfb\u627e\u5c3d\u53ef\u80fd\u5927\u7684\u6570\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"class Trie {\n  /** \u5de6 0  */\n  left: Trie | null = null;\n  /** \u53f3 1  */\n  right: Trie | null = null;\n}\nfunction findMaximumXOR(nums: number[]): number {\n  const len = nums.length;\n  if (len === 1) return 0;\n  const root = new Trie();\n  let ans = -Infinity;\n  const add = (num: number) => {\n    let trie = root;\n    for (let i = 30; i >= 0; i--) {\n      const v = (num >> i) & 1;\n      if (v === 1) {\n        trie = trie.right ?? (trie.right = new Trie());\n      } else {\n        trie = trie.left ?? (trie.left = new Trie());\n      }\n    }\n  };\n  const check = (num: number): number => {\n    let trie = root;\n    let xorNum = 0;\n    for (let i = 30; i >= 0; i--) {\n      const v = (num >> i) & 1;\n      if (v === 1) {\n        if (trie.left) {\n          trie = trie.left;\n          xorNum = (xorNum << 1) + 1;\n        } else {\n          trie = trie.right!;\n          xorNum <<= 1;\n        }\n      } else {\n        if (trie.right) {\n          trie = trie.right;\n          xorNum = (xorNum << 1) + 1;\n        } else {\n          trie = trie.left!;\n          xorNum <<= 1;\n        }\n      }\n    }\n    return xorNum;\n  };\n  for (let i = 1; i < len; i++) {\n    add(nums[i - 1]);\n    ans = Math.max(ans, check(nums[i]));\n  }\n  return ans;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-3---typescript",children:"\u9898\u89e3 3 - typescript"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-10-25"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a788ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a67.5MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u4e8c\u53c9\u5b57\u5178\u6811\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const MAX = 31;\nclass BitTrieNode {\n  // 0\n  left: BitTrieNode | null = null;\n  // 1\n  right: BitTrieNode | null = null;\n  val = -1;\n}\nclass BitTrie {\n  root = new BitTrieNode();\n  add(num: number) {\n    const str = num.toString(2).padStart(MAX, '0');\n    let node = this.root;\n    for (let i = 0, l = str.length; i < l; i++) {\n      const ch = str[i];\n      if (ch === '0') node = node.left ?? (node.left = new BitTrieNode());\n      else node = node.right ?? (node.right = new BitTrieNode());\n    }\n    node.val = num;\n  }\n  find(num: number) {\n    const str = num.toString(2).padStart(MAX, '0');\n    let node = this.root;\n    for (let i = 0, l = str.length; i < l; i++) {\n      if (!node.left && !node.right) break;\n      const ch = str[i];\n      if (ch === '0') {\n        node = node.right ?? node.left!;\n      } else {\n        node = node.left ?? node.right!;\n      }\n    }\n    return node;\n  }\n}\nfunction findMaximumXOR(nums: number[]): number {\n  const trie = new BitTrie();\n  nums.forEach(num => trie.add(num));\n  let ans = -Infinity;\n  nums.forEach(num => {\n    ans = Math.max(ans, trie.find(num).val ^ num);\n  });\n  return ans;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-4---cpp",children:"\u9898\u89e3 4 - cpp"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-11-04"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a716ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a172.36MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"struct TrieNode {\n    TrieNode* left = nullptr;\n    TrieNode* right = nullptr;\n};\n\nvoid add(TrieNode* node, int num) {\n    int pos = 30;\n    while (pos >= 0) {\n        int v = (num >> pos) & 1;\n        if (v) {\n            if (!node->left) node->left = new TrieNode();\n            node = node->left;\n        } else {\n            if (!node->right) node->right = new TrieNode();\n            node = node->right;\n        }\n        pos -= 1;\n    }\n}\n\nint find(TrieNode* node, int num) {\n    int pos = 30, ans = 0;\n    while (pos >= 0 && node) {\n        int v = (num >> pos) & 1;\n        if (v) {\n            if (node->right) {\n                ans |= 1 << pos;\n                node = node->right;\n            } else node = node->left;\n        } else {\n            if (node->left) {\n                ans |= 1 << pos;\n                node = node->left;\n            } else node = node->right;\n        }\n        pos -= 1;\n    }\n    return ans;\n}\n\nclass Solution {\npublic:\n    int findMaximumXOR(vector<int>& nums) {\n        TrieNode *root = new TrieNode();\n        int ans = 0;\n        for (auto &num : nums) {\n            add(root, num);\n            ans = max(ans, find(root, num));\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-5---python",children:"\u9898\u89e3 5 - python"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-11-04"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a9296ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a444.3MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"class TrieNode:\n    def __init__(self):\n        self.left = self.right = None\n    \ndef add(node, num: int, pos: int):\n    while pos >= 0:\n        v = (num >> pos) & 1\n        if v:\n            if not node.left: node.left = TrieNode()\n            node = node.left\n        else:\n            if not node.right: node.right = TrieNode()\n            node = node.right\n        pos -= 1\n        \n\ndef find(node, num: int, pos: int):\n    ans = 0\n    while pos >= 0 and node:\n        v = (num >> pos) & 1\n        if v: \n            if node.right:\n                ans |= 1 << pos\n                node = node.right\n            else:\n                node = node.left\n        else:\n            if node.left:\n                ans |= 1 << pos\n                node = node.left\n            else:\n                node = node.right\n        pos -= 1\n    return ans\n\nclass Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        root = TrieNode()\n        ans = 0\n        for num in nums: \n            add(root, num, 30)\n            ans = max(ans, find(root, num, 30))\n        return ans\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-6---rust",children:"\u9898\u89e3 6 - rust"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-11-04"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a564ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a85MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rust",children:"struct TrieNode {\n    left: Option<Box<TrieNode>>,\n    right: Option<Box<TrieNode>>,\n}\nimpl TrieNode {\n    fn new() -> Self {\n        Self {\n            left: None,\n            right: None,\n        }\n    }\n}\n\nfn add(mut node: &mut Box<TrieNode>, num: i32) {\n    let mut pos = 30;\n    while pos >= 0 {\n        let v = (num >> pos) & 1;\n        if v != 0 {\n            if node.left.is_none() {\n                node.left = Some(Box::new(TrieNode::new()));\n            }\n            node = node.left.as_mut().unwrap()\n        } else {\n            if node.right.is_none() {\n                node.right = Some(Box::new(TrieNode::new()));\n            }\n            node = node.right.as_mut().unwrap()\n        }\n        pos -= 1;\n    }\n}\n\nfn find(mut node: &Box<TrieNode>, num: i32) -> i32 {\n    let mut pos = 30;\n    let mut ans = 0;\n    let mut node = Some(node);\n    while pos >= 0 && node.is_some() {\n        let node_ref = node.unwrap();\n        let v = (num >> pos) & 1;\n        if v != 0 {\n            if node_ref.right.is_some() {\n                ans |= 1 << pos;\n                node = Some(node_ref.right.as_ref().unwrap());\n            } else if node_ref.left.is_some() {\n                node = Some(node_ref.left.as_ref().unwrap());\n            } else {\n                node = None;\n            }\n        } else {\n            if node_ref.left.is_some() {\n                ans |= 1 << pos;\n                node = Some(node_ref.left.as_ref().unwrap());\n            } else if node_ref.right.is_some() {\n                node = Some(node_ref.right.as_ref().unwrap());\n            } else {\n                node = None;\n            }\n        }\n        pos -= 1;\n    }\n    ans\n}\n\nimpl Solution {\n    pub fn find_maximum_xor(nums: Vec<i32>) -> i32 {\n        let mut root = Box::new(TrieNode::new());\n        let mut ans = 0;\n        for num in &nums {\n            add(&mut root, *num);\n        }\n        for num in &nums {\n            ans = ans.max(find(&root, *num));\n        }\n        ans\n    }\n}\n"})})]})}function a(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},25710:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>l});var t=i(30758);const r={},o=t.createContext(r);function s(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);