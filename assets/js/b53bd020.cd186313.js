"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[55749],{83722:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>a,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=t(86070),s=t(25710);const i={},l="95.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811II",c={id:"leetcode/1-100/\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811II",title:"95.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811II",description:"\u94fe\u63a5\uff1a95.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811II",source:"@site/docs/leetcode/1-100/95.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811II.md",sourceDirName:"leetcode/1-100",slug:"/leetcode/1-100/\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811II",permalink:"/docs/leetcode/1-100/\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811II",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:95,frontMatter:{},sidebar:"journal",previous:{title:"94.\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386",permalink:"/docs/leetcode/1-100/\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386"},next:{title:"96.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811",permalink:"/docs/leetcode/1-100/\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811"}},o={},d=[{value:"\u9898\u89e3 1 - typescript",id:"\u9898\u89e3-1---typescript",level:2},{value:"\u9898\u89e3 2 - typescript",id:"\u9898\u89e3-2---typescript",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"95\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811ii",children:"95.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811II"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,r.jsx)(n.a,{href:"https://leetcode.cn/problems/unique-binary-search-trees-ii",children:"95.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811II"}),(0,r.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,r.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u6811\u3001\u4e8c\u53c9\u641c\u7d22\u6811\u3001\u52a8\u6001\u89c4\u5212\u3001\u56de\u6eaf\u3001\u4e8c\u53c9\u6811",(0,r.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n\uff0c\u751f\u6210\u6240\u6709\u7531 1 ... n \u4e3a\u8282\u70b9\u6240\u7ec4\u6210\u7684 \u4e8c\u53c9\u641c\u7d22\u6811 \u3002"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"\u9898\u89e3-1---typescript",children:"\u9898\u89e3 1 - typescript"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2020-07-21"}),"\n",(0,r.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a108ms"}),"\n",(0,r.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a45.8MB"}),"\n",(0,r.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,r.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\u904d\u5386\u3002"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\nfunction generateTrees(n: number): Array<TreeNode | null> {\n  if (n === 0) return [];\n  return _genTrees(1, n);\n  function _genTrees(start: number, end: number): Array<TreeNode | null> {\n    const trees: Array<TreeNode | null> = [];\n    if (start > end) {\n      trees.push(null);\n      return trees;\n    }\n    for (let i = start; i <= end; i++) {\n      const lefts = _genTrees(start, i - 1);\n      const rights = _genTrees(i + 1, end);\n      for (const left of lefts) {\n        for (const right of rights) {\n          const tree = new TreeNode(i);\n          tree.left = left;\n          tree.right = right;\n          trees.push(tree);\n        }\n      }\n    }\n    return trees;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u9898\u89e3-2---typescript",children:"\u9898\u89e3 2 - typescript"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-05-07"}),"\n",(0,r.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a112ms"}),"\n",(0,r.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a46MB"}),"\n",(0,r.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,r.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\u5de6\u53f3\u5b50\u6811\u3002"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function generateTrees(n: number): Array<TreeNode | null> {\n  const createTree = (startNum: number, endNum: number): (TreeNode | null)[] => {\n    const ans: TreeNode[] = [];\n    if (startNum > endNum) return [null];\n    for (let i = startNum; i <= endNum; i++) {\n      const leftList = createTree(startNum, i - 1);\n      const rightList = createTree(i + 1, endNum);\n      for (const left of leftList) {\n        for (const right of rightList) {\n          const node = new TreeNode(i, left, right);\n          ans.push(node);\n        }\n      }\n    }\n    return ans;\n  };\n  return createTree(1, n);\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},25710:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var r=t(30758);const s={},i=r.createContext(s);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);