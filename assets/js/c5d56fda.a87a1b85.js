"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[9079],{31547:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"leetcode/2501-2600/\u77e9\u9635\u67e5\u8be2\u53ef\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570","title":"2503.\u77e9\u9635\u67e5\u8be2\u53ef\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570","description":"\u94fe\u63a5\uff1a2503.\u77e9\u9635\u67e5\u8be2\u53ef\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570","source":"@site/docs/leetcode/2501-2600/2503.\u77e9\u9635\u67e5\u8be2\u53ef\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570.md","sourceDirName":"leetcode/2501-2600","slug":"/leetcode/2501-2600/\u77e9\u9635\u67e5\u8be2\u53ef\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570","permalink":"/docs/leetcode/2501-2600/\u77e9\u9635\u67e5\u8be2\u53ef\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2503,"frontMatter":{},"sidebar":"journal","previous":{"title":"2502.\u8bbe\u8ba1\u5185\u5b58\u5206\u914d\u5668","permalink":"/docs/leetcode/2501-2600/\u8bbe\u8ba1\u5185\u5b58\u5206\u914d\u5668"},"next":{"title":"2506.\u7edf\u8ba1\u76f8\u4f3c\u5b57\u7b26\u4e32\u5bf9\u7684\u6570\u76ee","permalink":"/docs/leetcode/2501-2600/\u7edf\u8ba1\u76f8\u4f3c\u5b57\u7b26\u4e32\u5bf9\u7684\u6570\u76ee"}}');var r=e(86070),s=e(31503);const o={},d="2503.\u77e9\u9635\u67e5\u8be2\u53ef\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570",c={},a=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2}];function l(n){const i={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"2503\u77e9\u9635\u67e5\u8be2\u53ef\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570",children:"2503.\u77e9\u9635\u67e5\u8be2\u53ef\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570"})}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:["\u94fe\u63a5\uff1a",(0,r.jsx)(i.a,{href:"https://leetcode.cn/problems/maximum-number-of-points-from-grid-queries",children:"2503.\u77e9\u9635\u67e5\u8be2\u53ef\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570"}),(0,r.jsx)(i.br,{}),"\n","\u96be\u5ea6\uff1aHard",(0,r.jsx)(i.br,{}),"\n","\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e76\u67e5\u96c6\u3001\u6570\u7ec4\u3001\u53cc\u6307\u9488\u3001\u77e9\u9635\u3001\u6392\u5e8f\u3001\u5806\uff08\u4f18\u5148\u961f\u5217\uff09",(0,r.jsx)(i.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u5927\u5c0f\u4e3a m x n \u7684\u6574\u6570\u77e9\u9635 grid \u548c\u4e00\u4e2a\u5927\u5c0f\u4e3a k \u7684\u6570\u7ec4 queries \u3002\u5728\u8fc7\u7a0b\u7ed3\u675f\u540e\uff0canswer[i] \u662f\u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\u3002\u6ce8\u610f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee\u540c\u4e00\u4e2a\u5355\u5143\u683c \u591a\u6b21 \u3002\u8fd4\u56de\u7ed3\u679c\u6570\u7ec4 answer \u3002"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-12-11"}),"\n",(0,r.jsx)(i.li,{children:"\u6267\u884c\u7528\u65f6\uff1a264ms"}),"\n",(0,r.jsx)(i.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a30.5MB"}),"\n",(0,r.jsx)(i.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,r.jsxs)(i.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5bf9 query \u6392\u5e8f\u540e\uff0c\u4ece\u5c0f\u5f80\u5927\u627e\uff0c \u5bf9\u4e8e\u6240\u6709\u5c0f\u4e8e q \u7684\u6570\u5b57\u8fdb\u884c\u5e76\u67e5\u96c6\u5408\u5e76\u3002"]}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-cpp",children:'class UnionFind {\npublic:\n    int n;\n    vector<int> data, cnt;\n    UnionFind(int n): n(n), data(vector<int>(n, 0)), cnt(vector<int>(n, 1)) {\n        for (int i = 0; i < n; i++) data[i] = i;\n    }\n    int size(int v) {\n        return cnt[find(v)];\n    }\n    int find(int v) {\n        if (data[v] == v) return v;\n        return data[v] = find(data[v]);\n    }\n    void uni(int v1, int v2) {\n        int p1 = find(v1), p2 = find(v2);\n        if (p1 != p2) {\n            cnt[p1] += cnt[p2];\n            data[p2] = p1;\n        }\n    }\n};\nint pos2Idx(int x, int y, int size) {\n    return x * size + y;\n}\nvoid idx2Pos(int idx, int size, int &x, int &y) {\n    x = idx / size;\n    y = idx % size;\n}\nvector<vector<int>> dirs = {\n    {0, 1}, {0, -1},\n    {1, 0}, {-1, 0}\n};\nclass Solution {\npublic:\n    int n, m, qs;\n    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {\n        n = grid.size();\n        m = grid[0].size();\n        qs = queries.size();\n        vector<int> ans(qs, 0), list(qs), data;\n        for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) data.push_back(pos2Idx(i, j, m));\n        sort(data.begin(), data.end(), [&](auto &i1, auto &i2){\n            int x1, y1, x2, y2;\n            idx2Pos(i1, m, x1, y1);\n            idx2Pos(i2, m, x2, y2);\n            return grid[x1][y1] < grid[x2][y2];\n        });\n        iota(list.begin(), list.end(), 0);\n        sort(list.begin(), list.end(), [&](auto &i1, auto &i2){ return queries[i1] < queries[i2]; });\n        /*\n        cout << "data : ";\n        for (auto &idx : data) {\n            int x, y;\n            idx2Pos(idx, m, x, y);\n            cout << "(" << x << ", " << y << ", " << grid[x][y] << "), ";\n        }\n        cout << "none" << endl;\n        cout << "list : ";\n        for (auto &idx : list) {\n            cout << "(" << idx << ", " << queries[idx] << "), ";\n        }\n        cout << "none" << endl;\n        */\n        UnionFind uf(n * m);\n        int j = 0;\n        for (auto &idx : list) {\n            int q = queries[idx];\n            if (grid[0][0] >= q) continue;\n            // cout << "q = " << q << endl;\n            for (; j < data.size(); j++) {\n                int x, y;\n                idx2Pos(data[j], m, x, y);\n                // cout << "j = " << j << ", x = " << x << ", y = " << y << endl;\n                if (grid[x][y] >= q) break;\n                for (auto &dir : dirs) {\n                    int nx = x + dir[0], ny = y + dir[1];\n                    if (nx == -1 || nx == n || ny == -1 || ny == m) continue;\n                    if (grid[nx][ny] >= q) continue;\n                    uf.uni(data[j], pos2Idx(nx, ny, m));\n                }\n            }\n            ans[idx] = uf.size(0);\n        }\n        return ans;\n    }\n};\n'})})]})}function u(n={}){const{wrapper:i}={...(0,s.R)(),...n.components};return i?(0,r.jsx)(i,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},31503:(n,i,e)=>{e.d(i,{R:()=>o,x:()=>d});var t=e(30758);const r={},s=t.createContext(r);function o(n){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function d(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),t.createElement(s.Provider,{value:i},n.children)}}}]);