"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[77983],{49182:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var r=i(86070),o=i(25710);const t={},c="2577.\u5728\u7f51\u683c\u56fe\u4e2d\u8bbf\u95ee\u4e00\u4e2a\u683c\u5b50\u7684\u6700\u5c11\u65f6\u95f4",l={id:"leetcode/2501-2600/\u5728\u7f51\u683c\u56fe\u4e2d\u8bbf\u95ee\u4e00\u4e2a\u683c\u5b50\u7684\u6700\u5c11\u65f6\u95f4",title:"2577.\u5728\u7f51\u683c\u56fe\u4e2d\u8bbf\u95ee\u4e00\u4e2a\u683c\u5b50\u7684\u6700\u5c11\u65f6\u95f4",description:"\u94fe\u63a5\uff1a2577.\u5728\u7f51\u683c\u56fe\u4e2d\u8bbf\u95ee\u4e00\u4e2a\u683c\u5b50\u7684\u6700\u5c11\u65f6\u95f4",source:"@site/docs/leetcode/2501-2600/2577.\u5728\u7f51\u683c\u56fe\u4e2d\u8bbf\u95ee\u4e00\u4e2a\u683c\u5b50\u7684\u6700\u5c11\u65f6\u95f4.md",sourceDirName:"leetcode/2501-2600",slug:"/leetcode/2501-2600/\u5728\u7f51\u683c\u56fe\u4e2d\u8bbf\u95ee\u4e00\u4e2a\u683c\u5b50\u7684\u6700\u5c11\u65f6\u95f4",permalink:"/web/site/docs/leetcode/2501-2600/\u5728\u7f51\u683c\u56fe\u4e2d\u8bbf\u95ee\u4e00\u4e2a\u683c\u5b50\u7684\u6700\u5c11\u65f6\u95f4",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2577,frontMatter:{},sidebar:"journal",previous:{title:"2576.\u6c42\u51fa\u6700\u591a\u6807\u8bb0\u4e0b\u6807",permalink:"/web/site/docs/leetcode/2501-2600/\u6c42\u51fa\u6700\u591a\u6807\u8bb0\u4e0b\u6807"},next:{title:"2578.\u6700\u5c0f\u548c\u5206\u5272",permalink:"/web/site/docs/leetcode/2501-2600/\u6700\u5c0f\u548c\u5206\u5272"}},s={},d=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - rust",id:"\u9898\u89e3-3---rust",level:2}];function u(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"2577\u5728\u7f51\u683c\u56fe\u4e2d\u8bbf\u95ee\u4e00\u4e2a\u683c\u5b50\u7684\u6700\u5c11\u65f6\u95f4",children:"2577.\u5728\u7f51\u683c\u56fe\u4e2d\u8bbf\u95ee\u4e00\u4e2a\u683c\u5b50\u7684\u6700\u5c11\u65f6\u95f4"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,r.jsx)(e.a,{href:"https://leetcode.cn/problems/minimum-time-to-visit-a-cell-in-a-grid",children:"2577.\u5728\u7f51\u683c\u56fe\u4e2d\u8bbf\u95ee\u4e00\u4e2a\u683c\u5b50\u7684\u6700\u5c11\u65f6\u95f4"}),(0,r.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1a\u56f0\u96be",(0,r.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u56fe\u3001\u6570\u7ec4\u3001\u77e9\u9635\u3001\u6700\u77ed\u8def\u3001\u5806\uff08\u4f18\u5148\u961f\u5217\uff09",(0,r.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u4f60\u4ece \u6700\u5de6\u4e0a\u89d2\xa0\u51fa\u53d1\uff0c\u51fa\u53d1\u65f6\u523b\u4e3a 0\xa0\uff0c\u4f60\u5fc5\u987b\u4e00\u76f4\u79fb\u52a8\u5230\u4e0a\u4e0b\u5de6\u53f3\u76f8\u90bb\u56db\u4e2a\u683c\u5b50\u4e2d\u7684 \u4efb\u610f\xa0\u4e00\u4e2a\u683c\u5b50\uff08\u5373\u4e0d\u80fd\u505c\u7559\u5728\u683c\u5b50\u4e0a\uff09\u3002\u6bcf\u6b21\u79fb\u52a8\u90fd\u9700\u8981\u82b1\u8d39 1 \u5355\u4f4d\u65f6\u95f4\u3002\u8bf7\u4f60\u8fd4\u56de \u6700\u65e9\xa0\u5230\u8fbe\u53f3\u4e0b\u89d2\u683c\u5b50\u7684\u65f6\u95f4\uff0c\u5982\u679c\u4f60\u65e0\u6cd5\u5230\u8fbe\u53f3\u4e0b\u89d2\u7684\u683c\u5b50\uff0c\u8bf7\u4f60\u8fd4\u56de -1\xa0\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-02-26"}),"\n",(0,r.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a384ms"}),"\n",(0,r.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a46.2MB"}),"\n",(0,r.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,r.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u4f18\u5148\u961f\u5217\uff0c\u627e\u6700\u5148\u53ef\u4ee5\u89e6\u8fbe\u7684\u65f6\u95f4\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"struct Node {\n    int row, col, time;\n    Node(int row, int col, int time): row(row), col(col), time(time) {}\n};\nvector<vector<int>> dirs = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };\nclass Solution {\npublic:\n    int minimumTime(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        if (grid[0][1] > 1 && grid[1][0] > 1) return -1;\n        auto cmp = [&](Node &x, Node &y) -> bool { return x.time > y.time; };\n        priority_queue<Node, vector<Node>, decltype(cmp)> q(cmp);\n        q.push(Node(0, 0, 0));\n        bool cache[1005][1005] = {0};\n        cache[0][0] = true;\n        while (q.size()) {\n            Node cur = q.top();\n            if (cur.row == n - 1 && cur.col == m - 1) return cur.time;\n            q.pop();\n            for (auto &dir : dirs) {\n                int nrow = cur.row + dir[0], ncol = cur.col + dir[1];\n                if (nrow < 0 || nrow >= n || ncol < 0 || ncol >= m) continue;\n                int time = cur.time + 1;\n                if (grid[nrow][ncol] > time) {\n                    int minus = (grid[nrow][ncol] - time + 1) / 2;\n                    time = cur.time + minus * 2 + 1;\n                }\n                if (cache[nrow][ncol]) continue;\n                cache[nrow][ncol] = true;\n                q.push(Node(nrow, ncol, time));\n            }\n        }\n        return -1;\n    }\n};\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-02-26"}),"\n",(0,r.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a2076ms"}),"\n",(0,r.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a37.1MB"}),"\n",(0,r.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,r.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    class Node:\n        def __init__(self, row: int, col: int, time: int):\n            self.row = row\n            self.col = col\n            self.time = time\n    \n        def __lt__(self, o: 'Node') -> bool:\n            return self.time < o.time\n    \n    class Solution:\n        def minimumTime(self, grid: List[List[int]]) -> int:\n            n, m = len(grid), len(grid[0])\n            if grid[0][1] > 1 and grid[1][0] > 1:\n                return -1\n            q = []\n            heappush(q, Node(0, 0, 0))\n            cache = [[0] * 1005 for _ in range(1005)]\n            cache[0][0] = 1\n            while True:\n                cur: Node = heappop(q)\n                if cur.row == n - 1 and cur.col == m - 1:\n                    return cur.time\n                for (i, j) in dirs:\n                    nrow = cur.row + i\n                    ncol = cur.col + j\n                    if 0 <= nrow < n and 0 <= ncol < m:\n                        time = cur.time + 1\n                        if grid[nrow][ncol] > time:\n                            minus = (grid[nrow][ncol] - time + 1) // 2\n                            time = cur.time + minus * 2 + 1\n                        if cache[nrow][ncol]:\n                            continue\n                        cache[nrow][ncol] = 1\n                        heappush(q, Node(nrow, ncol, time))\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u9898\u89e3-3---rust",children:"\u9898\u89e3 3 - rust"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-02-26"}),"\n",(0,r.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a72ms"}),"\n",(0,r.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a5.1MB"}),"\n",(0,r.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,r.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"const dirs: [[i32; 2]; 4] = [[0, 1], [0, -1], [1, 0], [-1, 0]];\nuse std::cell::RefCell;\nuse std::collections::HashMap;\nuse std::rc::Rc;\n#[derive(Clone, PartialEq, Eq, Ord)]\nstruct Node {\n    row: usize,\n    col: usize,\n    time: i32,\n}\nimpl Node {\n    fn new(row: usize, col: usize, time: i32) -> Self {\n        Node { row, col, time }\n    }\n}\nimpl PartialOrd for Node {\n    fn partial_cmp(&self, o: &Self) -> Option<std::cmp::Ordering> {\n        o.time.partial_cmp(&self.time)\n    }\n}\n\nimpl Solution {\n    pub fn minimum_time(grid: Vec<Vec<i32>>) -> i32 {\n        let n = grid.len();\n        let m = grid[0].len();\n        if grid[0][1] > 1 && grid[1][0] > 1 {\n            -1\n        } else {\n            let mut q = std::collections::BinaryHeap::<Node>::new();\n            q.push(Node::new(0, 0, 0));\n            let mut cache = [[false; 1005]; 1005];\n            cache[0][0] = true;\n            loop {\n                let cur = q.pop().unwrap();\n                if cur.row == n - 1 && cur.col == m - 1 {\n                    return cur.time;\n                }\n                for dir in dirs {\n                    let nrow = cur.row as i32 + dir[0];\n                    let ncol = cur.col as i32 + dir[1];\n                    if nrow < 0 || nrow >= n as i32 || ncol < 0 || ncol >= m as i32 {\n                        continue;\n                    }\n                    let mut time = cur.time + 1;\n                    let nrow = nrow as usize;\n                    let ncol = ncol as usize;\n                    if grid[nrow][ncol] > time {\n                        let minus = (grid[nrow][ncol] - time + 1) / 2;\n                        time = cur.time + minus * 2 + 1;\n                    }\n                    if cache[nrow][ncol] {\n                        continue;\n                    }\n                    cache[nrow][ncol] = true;\n                    q.push(Node::new(nrow, ncol, time));\n                }\n            }\n        }\n    }\n}\n"})})]})}function m(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(u,{...n})}):u(n)}},25710:(n,e,i)=>{i.d(e,{R:()=>c,x:()=>l});var r=i(30758);const o={},t=r.createContext(o);function c(n){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:c(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);