"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[82679],{28883:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var t=i(86070),s=i(25710);const r={},l="310.\u6700\u5c0f\u9ad8\u5ea6\u6811",c={id:"leetcode/301-400/\u6700\u5c0f\u9ad8\u5ea6\u6811",title:"310.\u6700\u5c0f\u9ad8\u5ea6\u6811",description:"\u94fe\u63a5\uff1a310.\u6700\u5c0f\u9ad8\u5ea6\u6811",source:"@site/docs/leetcode/301-400/310.\u6700\u5c0f\u9ad8\u5ea6\u6811.md",sourceDirName:"leetcode/301-400",slug:"/leetcode/301-400/\u6700\u5c0f\u9ad8\u5ea6\u6811",permalink:"/web/site/docs/leetcode/301-400/\u6700\u5c0f\u9ad8\u5ea6\u6811",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:310,frontMatter:{},sidebar:"journal",previous:{title:"309.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u51b7\u51bb\u671f",permalink:"/web/site/docs/leetcode/301-400/\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u51b7\u51bb\u671f"},next:{title:"312.\u6233\u6c14\u7403",permalink:"/web/site/docs/leetcode/301-400/\u6233\u6c14\u7403"}},d={},o=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - cpp",id:"\u9898\u89e3-2---cpp",level:2},{value:"\u9898\u89e3 3 - python",id:"\u9898\u89e3-3---python",level:2}];function a(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"310\u6700\u5c0f\u9ad8\u5ea6\u6811",children:"310.\u6700\u5c0f\u9ad8\u5ea6\u6811"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/minimum-height-trees",children:"310.\u6700\u5c0f\u9ad8\u5ea6\u6811"}),(0,t.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1a\u4e2d\u7b49",(0,t.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u56fe\u3001\u62d3\u6251\u6392\u5e8f",(0,t.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u8bf7\u4f60\u627e\u5230\u6240\u6709\u7684 \u6700\u5c0f\u9ad8\u5ea6\u6811 \u5e76\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u5b83\u4eec\u7684\u6839\u8282\u70b9\u6807\u7b7e\u5217\u8868\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-03-14"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a180ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a77.6MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u4ece\u6240\u6709\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u7531\u5916\u5230\u5185\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class Solution {\n   public:\n    struct node {\n        int idx, cnt;\n        unordered_set<int> chilren;\n    };\n    vector<int> findMinHeightTrees(int n, vector<vector<int>> &edges) {\n        if (n == 1) return vector(1, 0);\n        vector<node> list(n);\n        for (int i = 0; i < n; i++) {\n            list[i].idx = i;\n            list[i].cnt = 0;\n        }\n        for (auto &edge : edges) {\n            int n1 = edge[0], n2 = edge[1];\n            list[n1].cnt++;\n            list[n2].cnt++;\n            list[n1].chilren.insert(n2);\n            list[n2].chilren.insert(n1);\n        }\n        queue<int> q;\n        for (int i = 0; i < n; i++) {\n            if (list[i].cnt == 1) q.push(i);\n        }\n        vector<int> ans;\n        while (q.size()) {\n            ans.clear();\n            int size = q.size();\n            for (int i = 0; i < size; i++) {\n                int node = q.front();\n                q.pop();\n                ans.push_back(node);\n                list[node].cnt--;\n                for (auto &child : list[node].chilren) {\n                    list[child].cnt--;\n                    if (list[child].cnt == 1) q.push(child);\n                }\n            }\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-2---cpp",children:"\u9898\u89e3 2 - cpp"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-04-06"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a172ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a77.7MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u4ece\u5916\u5411\u5185\u904d\u5386\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class Solution {\n   public:\n    struct node {\n        int val, cnt;\n        unordered_set<int> children;\n    };\n    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n        if (n == 1) return {0};\n        vector<node> list(n);\n        for (int i = 0; i < n; i++) {\n            list[i].val = i;\n            list[i].cnt = 0;\n        }\n        for (auto& edge : edges) {\n            int n0 = edge[0], n1 = edge[1];\n            list[n0].children.insert(n1);\n            list[n1].children.insert(n0);\n            list[n0].cnt++;\n            list[n1].cnt++;\n        }\n        queue<int> q;\n        for (auto& node : list) {\n            if (node.cnt == 1) q.push(node.val);\n        }\n        vector<int> ans;\n        int size = q.size();\n        while (q.size()) {\n            int idx = q.front();\n            ans.push_back(idx);\n            q.pop();\n            list[idx].cnt--;\n            for (auto& child : list[idx].children) {\n                if (--list[child].cnt != 1) continue;\n                q.push(child);\n            }\n            if (--size == 0) {\n                size = q.size();\n                if (size) ans.clear();\n            }\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-3---python",children:"\u9898\u89e3 3 - python"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2024-03-17"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a295ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a67.8MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","dfs\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n        if n == 1: return [0]\n        if n == 2: return [0, 1]\n        nodes = [[] for _ in range(n)]\n        for n1, n2 in edges:\n            nodes[n1].append(n2)\n            nodes[n2].append(n1)\n        @cache\n        def dfs(node: int, parent: int) -> int:\n            return 1 + max(dfs(child, node) if child != parent else 0 for child in nodes[node])\n        ans_val = inf\n        ans_arr = []\n        for node in range(n):\n            if len(nodes[node]) == 1: continue\n            res = dfs(node, -1)\n            if res <= ans_val:\n                if res < ans_val: ans_arr.clear()\n                ans_val = res\n                ans_arr.append(node)\n        return ans_arr\n"})})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(a,{...n})}):a(n)}},25710:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>c});var t=i(30758);const s={},r=t.createContext(s);function l(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);