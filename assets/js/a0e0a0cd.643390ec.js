"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[81597],{64399:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>u,contentTitle:()=>r,default:()=>a,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var t=s(86070),l=s(25710);const i={},r="2574.\u5de6\u53f3\u5143\u7d20\u548c\u7684\u5dee\u503c",c={id:"leetcode/2501-2600/\u5de6\u53f3\u5143\u7d20\u548c\u7684\u5dee\u503c",title:"2574.\u5de6\u53f3\u5143\u7d20\u548c\u7684\u5dee\u503c",description:"\u94fe\u63a5\uff1a2574.\u5de6\u53f3\u5143\u7d20\u548c\u7684\u5dee\u503c",source:"@site/docs/leetcode/2501-2600/2574.\u5de6\u53f3\u5143\u7d20\u548c\u7684\u5dee\u503c.md",sourceDirName:"leetcode/2501-2600",slug:"/leetcode/2501-2600/\u5de6\u53f3\u5143\u7d20\u548c\u7684\u5dee\u503c",permalink:"/docs/leetcode/2501-2600/\u5de6\u53f3\u5143\u7d20\u548c\u7684\u5dee\u503c",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2574,frontMatter:{},sidebar:"journal",previous:{title:"2573.\u627e\u51fa\u5bf9\u5e94LCP\u77e9\u9635\u7684\u5b57\u7b26\u4e32",permalink:"/docs/leetcode/2501-2600/\u627e\u51fa\u5bf9\u5e94LCP\u77e9\u9635\u7684\u5b57\u7b26\u4e32"},next:{title:"2575.\u627e\u51fa\u5b57\u7b26\u4e32\u7684\u53ef\u6574\u9664\u6570\u7ec4",permalink:"/docs/leetcode/2501-2600/\u627e\u51fa\u5b57\u7b26\u4e32\u7684\u53ef\u6574\u9664\u6570\u7ec4"}},u={},o=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - rust",id:"\u9898\u89e3-3---rust",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"2574\u5de6\u53f3\u5143\u7d20\u548c\u7684\u5dee\u503c",children:"2574.\u5de6\u53f3\u5143\u7d20\u548c\u7684\u5dee\u503c"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/left-and-right-sum-differences",children:"2574.\u5de6\u53f3\u5143\u7d20\u548c\u7684\u5dee\u503c"}),(0,t.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1a\u7b80\u5355",(0,t.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u524d\u7f00\u548c",(0,t.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u8bf7\u4f60\u627e\u51fa\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 answer\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-02-26"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a4ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a10.8MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u904d\u5386\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> leftRigthDifference(vector<int>& nums) {\n        int sum = 0;\n        for (auto &num : nums) sum += num;\n        vector<int> ans;\n        int left = 0;\n        for (auto &num : nums) {\n            ans.push_back(abs(sum - num - left));\n            sum -= num;\n            left += num;\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-02-26"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a44ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a15.2MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\n        vsum = sum(nums)\n        ans = []\n        left = 0\n        for num in nums:\n            ans .append(abs(vsum - num - left))\n            vsum -= num\n            left += num\n        return ans\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-3---rust",children:"\u9898\u89e3 3 - rust"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-02-26"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a0ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rust",children:"impl Solution {\n    pub fn left_rigth_difference(nums: Vec<i32>) -> Vec<i32> {\n        let mut sum = nums.iter().fold(0, |sum, cur| sum + cur);\n        let mut ans = vec![];\n        let mut left = 0;\n        for num in nums {\n            ans.push((sum - num - left).abs());\n            sum -= num;\n            left += num;\n        }\n        ans\n    }\n}\n"})})]})}function a(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},25710:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>c});var t=s(30758);const l={},i=t.createContext(l);function r(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:r(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);