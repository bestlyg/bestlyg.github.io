"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[30388],{61336:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>d,contentTitle:()=>t,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"leetcode/1001-1100/\u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c","title":"1026.\u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c","description":"\u94fe\u63a5\uff1a1026.\u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c","source":"@site/docs/leetcode/1001-1100/1026.\u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c.md","sourceDirName":"leetcode/1001-1100","slug":"/leetcode/1001-1100/\u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c","permalink":"/docs/leetcode/1001-1100/\u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1026,"frontMatter":{},"sidebar":"journal","previous":{"title":"1025.\u9664\u6570\u535a\u5f08","permalink":"/docs/leetcode/1001-1100/\u9664\u6570\u535a\u5f08"},"next":{"title":"1027.\u6700\u957f\u7b49\u5dee\u6570\u5217","permalink":"/docs/leetcode/1001-1100/\u6700\u957f\u7b49\u5dee\u6570\u5217"}}');var l=s(86070),o=s(31503);const i={},t="1026.\u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c",d={},a=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - rust",id:"\u9898\u89e3-3---rust",level:2},{value:"\u9898\u89e3 4 - python",id:"\u9898\u89e3-4---python",level:2}];function c(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"1026\u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c",children:"1026.\u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c"})}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,l.jsx)(e.a,{href:"https://leetcode.cn/problems/maximum-difference-between-node-and-ancestor",children:"1026.\u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c"}),(0,l.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,l.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u4e8c\u53c9\u6811",(0,l.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\uff0c\u627e\u51fa\u5b58\u5728\u4e8e \u4e0d\u540c \u8282\u70b9 A \u548c B \u4e4b\u95f4\u7684\u6700\u5927\u503c V\uff0c\u5176\u4e2d V = |A.val - B.val|\uff0c\u4e14 A \u662f B \u7684\u7956\u5148\u3002"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-04-18"}),"\n",(0,l.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a8ms"}),"\n",(0,l.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a14.4MB"}),"\n",(0,l.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,l.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","dfs\u3002"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int maxAncestorDiff(TreeNode* root) {\n        function<vector<int>(TreeNode*)> dfs = [&](TreeNode *node) -> vector<int> {\n            vector<int> res{ node->val, node->val, 0};\n            if (node->left) {\n                auto v = dfs(node->left);\n                res[0] = min(res[0], v[0]);\n                res[1] = max(res[1], v[1]);\n                res[2] = max(res[2], max(v[2], max(abs(res[0] - node->val), abs(res[1] - node->val))));\n            }\n            if (node->right) {\n                auto v = dfs(node->right);\n                res[0] = min(res[0], v[0]);\n                res[1] = max(res[1], v[1]);\n                res[2] = max(res[2], max(v[2], max(abs(res[0] - node->val), abs(res[1] - node->val))));\n            }\n            return res;\n        };\n        return dfs(root)[2];\n    }\n};\n"})}),"\n",(0,l.jsx)(e.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-04-18"}),"\n",(0,l.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a40ms"}),"\n",(0,l.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a21.8MB"}),"\n",(0,l.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,l.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:\n        def dfs(node: TreeNode) -> List[int]:\n            res = [node.val, node.val, 0]\n            if node.left != None:\n                v = dfs(node.left)\n                res[0] = min(res[0], v[0])\n                res[1] = max(res[1], v[1])\n                res[2] = max(res[2], max(\n                    v[2], max(abs(res[0] - node.val), abs(res[1] - node.val))))\n            if node.right != None:\n                v = dfs(node.right)\n                res[0] = min(res[0], v[0])\n                res[1] = max(res[1], v[1])\n                res[2] = max(res[2], max(\n                    v[2], max(abs(res[0] - node.val), abs(res[1] - node.val))))\n            return res\n        return dfs(root)[2]\n"})}),"\n",(0,l.jsx)(e.h2,{id:"\u9898\u89e3-3---rust",children:"\u9898\u89e3 3 - rust"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-04-18"}),"\n",(0,l.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a4ms"}),"\n",(0,l.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a3.2MB"}),"\n",(0,l.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,l.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-rust",children:"use std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn max_ancestor_diff(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        use std::cmp::{max, min};\n        let root = root.unwrap();\n        fn dfs(node: &Rc<RefCell<TreeNode>>) -> Vec<i32> {\n            let node = node.as_ref().borrow();\n            let mut res = vec![node.val, node.val, 0];\n            if node.left.is_some() {\n                let v = dfs(&node.left.as_ref().unwrap());\n                res[0] = min(res[0], v[0]);\n                res[1] = max(res[1], v[1]);\n                res[2] = max(\n                    res[2],\n                    max(\n                        v[2],\n                        max(i32::abs(res[0] - node.val), i32::abs(res[1] - node.val)),\n                    ),\n                );\n            }\n            if node.right.is_some() {\n                let v = dfs(&node.right.as_ref().unwrap());\n                res[0] = min(res[0], v[0]);\n                res[1] = max(res[1], v[1]);\n                res[2] = max(\n                    res[2],\n                    max(\n                        v[2],\n                        max(i32::abs(res[0] - node.val), i32::abs(res[1] - node.val)),\n                    ),\n                );\n            }\n            res\n        }\n        dfs(&root)[2]\n    }\n}\n"})}),"\n",(0,l.jsx)(e.h2,{id:"\u9898\u89e3-4---python",children:"\u9898\u89e3 4 - python"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2024-04-05"}),"\n",(0,l.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a46ms"}),"\n",(0,l.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a18.54MB"}),"\n",(0,l.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,l.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","dfs\u3002"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:\n        ans = 0\n        def dfs(node: TreeNode) -> Tuple[int, int]:\n            nonlocal ans\n            nmin = nmax = node.val\n            if node.left:\n                lmin, lmax = dfs(node.left)\n                nmin = min(nmin, lmin)\n                nmax = max(nmax, lmax)\n            if node.right:\n                rmin, rmax = dfs(node.right)\n                nmin = min(nmin, rmin)\n                nmax = max(nmax, rmax)\n            ans = max(ans, abs(node.val - nmin), abs(node.val - nmax))\n            return [nmin, nmax]\n        dfs(root)\n        return ans\n"})})]})}function m(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(c,{...n})}):c(n)}},31503:(n,e,s)=>{s.d(e,{R:()=>i,x:()=>t});var r=s(30758);const l={},o=r.createContext(l);function i(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:i(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);