"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[56380],{17231:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var s=i(86070),l=i(31503);const r={},t="449.\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",d={id:"leetcode/401-500/\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",title:"449.\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",description:"\u94fe\u63a5\uff1a449.\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",source:"@site/docs/leetcode/401-500/449.\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811.md",sourceDirName:"leetcode/401-500",slug:"/leetcode/401-500/\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",permalink:"/docs/leetcode/401-500/\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:449,frontMatter:{},sidebar:"journal",previous:{title:"448.\u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57",permalink:"/docs/leetcode/401-500/\u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57"},next:{title:"450.\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9",permalink:"/docs/leetcode/401-500/\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9"}},o={},a=[{value:"\u9898\u89e3 1 - typescript",id:"\u9898\u89e3-1---typescript",level:2},{value:"\u9898\u89e3 2 - cpp",id:"\u9898\u89e3-2---cpp",level:2},{value:"\u9898\u89e3 3 - python",id:"\u9898\u89e3-3---python",level:2},{value:"\u9898\u89e3 4 - python",id:"\u9898\u89e3-4---python",level:2},{value:"\u9898\u89e3 5 - python",id:"\u9898\u89e3-5---python",level:2},{value:"\u9898\u89e3 6 - python",id:"\u9898\u89e3-6---python",level:2},{value:"\u9898\u89e3 7 - python",id:"\u9898\u89e3-7---python",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"449\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",children:"449.\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,s.jsx)(n.a,{href:"https://leetcode.cn/problems/serialize-and-deserialize-bst",children:"449.\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811"}),(0,s.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,s.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u8bbe\u8ba1\u3001\u4e8c\u53c9\u641c\u7d22\u6811\u3001\u5b57\u7b26\u4e32\u3001\u4e8c\u53c9\u6811",(0,s.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6839\u4e3a root \u3002\u8bf7\u4f60\u5220\u9664 1 \u6761\u8fb9\uff0c\u4f7f\u4e8c\u53c9\u6811\u5206\u88c2\u6210\u4e24\u68f5\u5b50\u6811\uff0c\u4e14\u5b83\u4eec\u5b50\u6811\u548c\u7684\u4e58\u79ef\u5c3d\u53ef\u80fd\u5927\u3002 \u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-1---typescript",children:"\u9898\u89e3 1 - typescript"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-08-14"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a108ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a46.1MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","JSON \u5e8f\u5217\u5316\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function serialize(root: TreeNode | null): string {\n  return JSON.stringify(root);\n}\nfunction deserialize(data: string): TreeNode | null {\n  return JSON.parse(data);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-2---cpp",children:"\u9898\u89e3 2 - cpp"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-05-11"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a64ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a45.7MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'class Codec {\n   public:\n    string serialize(TreeNode *root) {\n        if (root == nullptr) return "(-1)";\n        return "(" + to_string(root->val) + "," + serialize(root->left) + "," +\n               serialize(root->right) + ")";\n    }\n    TreeNode *deserialize(string data) {\n        if (data == "(-1)") return nullptr;\n        string l, r;\n        int val = analysis(data, l, r);\n        TreeNode *ans = new TreeNode(val);\n        ans->left = deserialize(l);\n        ans->right = deserialize(r);\n        return ans;\n    }\n    int analysis(string &data, string &l, string &r) {\n        int level = 0, n = data.size(), val;\n        int i = 0, prev = 1, cnt = 0;\n        for (; i < n; i++) {\n            int ch = data[i];\n            if (ch == \'(\') {\n                level++;\n            } else if (ch == \')\') {\n                level--;\n            } else if (ch == \',\' && level == 1) {\n                string substr = data.substr(prev, i - prev);\n                if (cnt == 0)\n                    val = stoi(substr);\n                else if (cnt == 1)\n                    l = substr;\n                cnt++;\n                prev = i + 1;\n            }\n        }\n        r = data.substr(prev, i - prev - 1);\n        return val;\n    }\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-3---python",children:"\u9898\u89e3 3 - python"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-04"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a248ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a19.74MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Codec:\n    def serialize(self, node: Optional[TreeNode]) -> str:\n        """Encodes a tree to a single string.\n        """\n        if not node:\n            return "N"\n        return f"{node.val},({self.serialize(node.left)}),({self.serialize(node.right)})"\n    def deserialize(self, s: str) -> Optional[TreeNode]:\n        """Decodes your encoded data to tree.\n        """\n        if s == "N":\n            return None\n        s1 = s2 = s3 = \'\'\n        split_idx = -1\n        level = 0\n        for i in range(len(s)):\n            if s[i] == \'(\':\n                level += 1\n            elif s[i] == \')\':\n                level -= 1\n            elif s[i] == \',\' and level == 0:\n                if split_idx == -1:\n                    s1 = s[:i]\n                    split_idx = i + 1\n                else:\n                    s2 = s[split_idx + 1:i - 1]\n                    s3 = s[i + 2:-1]\n        return TreeNode(int(s1), self.deserialize(s2), self.deserialize(s3))\n\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-4---python",children:"\u9898\u89e3 4 - python"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-04"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a248ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a19.74MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Codec:\n    def serialize(self, node: Optional[TreeNode]) -> str:\n        """Encodes a tree to a single string.\n        """\n        if not node:\n            return "N"\n        return f"{node.val},({self.serialize(node.left)}),({self.serialize(node.right)})"\n    def deserialize(self, s: str) -> Optional[TreeNode]:\n        """Decodes your encoded data to tree.\n        """\n        if s == "N":\n            return None\n        s1 = s2 = s3 = \'\'\n        split_idx = -1\n        level = 0\n        for i in range(len(s)):\n            if s[i] == \'(\':\n                level += 1\n            elif s[i] == \')\':\n                level -= 1\n            elif s[i] == \',\' and level == 0:\n                if split_idx == -1:\n                    s1 = s[:i]\n                    split_idx = i + 1\n                else:\n                    s2 = s[split_idx + 1:i - 1]\n                    s3 = s[i + 2:-1]\n        return TreeNode(int(s1), self.deserialize(s2), self.deserialize(s3))\n\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-5---python",children:"\u9898\u89e3 5 - python"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-04"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a248ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a19.74MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Codec:\n    def serialize(self, node: Optional[TreeNode]) -> str:\n        """Encodes a tree to a single string.\n        """\n        if not node:\n            return "N"\n        return f"{node.val},({self.serialize(node.left)}),({self.serialize(node.right)})"\n    def deserialize(self, s: str) -> Optional[TreeNode]:\n        """Decodes your encoded data to tree.\n        """\n        if s == "N":\n            return None\n        s1 = s2 = s3 = \'\'\n        split_idx = -1\n        level = 0\n        for i in range(len(s)):\n            if s[i] == \'(\':\n                level += 1\n            elif s[i] == \')\':\n                level -= 1\n            elif s[i] == \',\' and level == 0:\n                if split_idx == -1:\n                    s1 = s[:i]\n                    split_idx = i + 1\n                else:\n                    s2 = s[split_idx + 1:i - 1]\n                    s3 = s[i + 2:-1]\n        return TreeNode(int(s1), self.deserialize(s2), self.deserialize(s3))\n\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-6---python",children:"\u9898\u89e3 6 - python"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-04"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a248ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a19.74MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Codec:\n    def serialize(self, node: Optional[TreeNode]) -> str:\n        """Encodes a tree to a single string.\n        """\n        if not node:\n            return "N"\n        return f"{node.val},({self.serialize(node.left)}),({self.serialize(node.right)})"\n    def deserialize(self, s: str) -> Optional[TreeNode]:\n        """Decodes your encoded data to tree.\n        """\n        if s == "N":\n            return None\n        s1 = s2 = s3 = \'\'\n        split_idx = -1\n        level = 0\n        for i in range(len(s)):\n            if s[i] == \'(\':\n                level += 1\n            elif s[i] == \')\':\n                level -= 1\n            elif s[i] == \',\' and level == 0:\n                if split_idx == -1:\n                    s1 = s[:i]\n                    split_idx = i + 1\n                else:\n                    s2 = s[split_idx + 1:i - 1]\n                    s3 = s[i + 2:-1]\n        return TreeNode(int(s1), self.deserialize(s2), self.deserialize(s3))\n\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-7---python",children:"\u9898\u89e3 7 - python"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-04"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a248ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a19.74MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Codec:\n    def serialize(self, node: Optional[TreeNode]) -> str:\n        """Encodes a tree to a single string.\n        """\n        if not node:\n            return "N"\n        return f"{node.val},({self.serialize(node.left)}),({self.serialize(node.right)})"\n    def deserialize(self, s: str) -> Optional[TreeNode]:\n        """Decodes your encoded data to tree.\n        """\n        if s == "N":\n            return None\n        s1 = s2 = s3 = \'\'\n        split_idx = -1\n        level = 0\n        for i in range(len(s)):\n            if s[i] == \'(\':\n                level += 1\n            elif s[i] == \')\':\n                level -= 1\n            elif s[i] == \',\' and level == 0:\n                if split_idx == -1:\n                    s1 = s[:i]\n                    split_idx = i + 1\n                else:\n                    s2 = s[split_idx + 1:i - 1]\n                    s3 = s[i + 2:-1]\n        return TreeNode(int(s1), self.deserialize(s2), self.deserialize(s3))\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},31503:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var s=i(30758);const l={},r=s.createContext(l);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);