"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[70194],{43809:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>a,frontMatter:()=>d,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"leetcode/1001-1100/\u5b57\u7b26\u6d41","title":"1032.\u5b57\u7b26\u6d41","description":"\u94fe\u63a5\uff1a1032.\u5b57\u7b26\u6d41","source":"@site/docs/leetcode/1001-1100/1032.\u5b57\u7b26\u6d41.md","sourceDirName":"leetcode/1001-1100","slug":"/leetcode/1001-1100/\u5b57\u7b26\u6d41","permalink":"/docs/leetcode/1001-1100/\u5b57\u7b26\u6d41","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1032,"frontMatter":{},"sidebar":"journal","previous":{"title":"1031.\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c","permalink":"/docs/leetcode/1001-1100/\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},"next":{"title":"1033.\u79fb\u52a8\u77f3\u5b50\u76f4\u5230\u8fde\u7eed","permalink":"/docs/leetcode/1001-1100/\u79fb\u52a8\u77f3\u5b50\u76f4\u5230\u8fde\u7eed"}}');var i=r(25105),l=r(8556);const d={},t="1032.\u5b57\u7b26\u6d41",c={},s=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - rust",id:"\u9898\u89e3-3---rust",level:2}];function f(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"1032\u5b57\u7b26\u6d41",children:"1032.\u5b57\u7b26\u6d41"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,i.jsx)(n.a,{href:"https://leetcode.cn/problems/stream-of-characters",children:"1032.\u5b57\u7b26\u6d41"}),(0,i.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aHard",(0,i.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u5b57\u5178\u6811\u3001\u6570\u7ec4\u3001\u5b57\u7b26\u4e32\u3001\u6570\u636e\u6d41",(0,i.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff1a\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u6d41\uff0c\u5e76\u68c0\u67e5\u8fd9\u4e9b\u5b57\u7b26\u7684\u540e\u7f00\u662f\u5426\u662f\u5b57\u7b26\u4e32\u6570\u7ec4 words \u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-24"}),"\n",(0,i.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a140ms"}),"\n",(0,i.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a90.7MB"}),"\n",(0,i.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,i.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","ac\u81ea\u52a8\u673a\uff0c\u5bf9\u6bcf\u4e2atrie\u7684\u65e0\u6548\u8282\u70b9\u8d4b\u503c\u4e0b\u4e00\u8df3\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"struct TrieNode {\n    bool end;\n    TrieNode *fail, *children[26];\n    TrieNode(): end(false), fail(nullptr) {\n        memset(children, 0, sizeof(children));\n    }\n};\nclass StreamChecker {\npublic:\n    TrieNode *root, *current;\n    StreamChecker(vector<string>& words): root(new TrieNode()), current(root) {\n        for (auto &word : words) {\n            TrieNode *node = root;\n            for (auto &c : word) {\n                int idx = c - 'a';\n                if (!node->children[idx]) node->children[idx] = new TrieNode();\n                node = node->children[idx];\n            }\n            node->end = true;\n        }\n        queue<TrieNode *> q;\n        for (int i = 0; i < 26; i++) {\n            if (root->children[i]) root->children[i]->fail = root, q.push(root->children[i]);\n            else root->children[i] = root;\n        }\n        while (q.size()) {\n            TrieNode *node = q.front();\n            q.pop();\n            node->end = node->end || node->fail->end;\n            for (int i = 0; i < 26; i++) {\n                if (node->children[i]) node->children[i]->fail = node->fail->children[i], q.push(node->children[i]);\n                else node->children[i] = node->fail->children[i];\n            }\n        }\n    }\n    bool query(char letter) {\n        current = current->children[letter - 'a'];\n        return current->end;\n    }\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-24"}),"\n",(0,i.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a544ms"}),"\n",(0,i.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a50.4MB"}),"\n",(0,i.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,i.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from queue import Queue\nclass TrieNode:\n    def __init__(self) -> None:\n        self.end = False\n        self.fail = None\n        self.children: List[TrieNode] = [None] * 26\n\nclass StreamChecker:\n    def __init__(self, words: List[str]):\n        self.root = self.current = TrieNode()\n        for word in words:\n            node = self.root\n            for c in word:\n                idx = ord(c) - ord('a')\n                if not node.children[idx]:\n                    node.children[idx] = TrieNode()\n                node = node.children[idx]\n            node.end = True\n        q = Queue()\n        self.root.fail = self.root\n        for i in range(26):\n            if self.root.children[i]:\n                self.root.children[i].fail = self.root\n                q.put(self.root.children[i])\n            else:\n                self.root.children[i] = self.root\n        while q.qsize():\n            node: TrieNode = q.get()\n            node.end = node.end or node.fail.end\n            for i in range(26):\n                if node.children[i]:\n                    node.children[i].fail = node.fail.children[i]\n                    q.put(node.children[i])\n                else:\n                    node.children[i] = node.fail.children[i]\n    def query(self, letter: str) -> bool:\n        self.current = self.current.children[ord(letter) - ord('a')]\n        return self.current.end\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u9898\u89e3-3---rust",children:"\u9898\u89e3 3 - rust"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-24"}),"\n",(0,i.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a56ms"}),"\n",(0,i.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a33.4MB"}),"\n",(0,i.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,i.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"pub use std::{cell::RefCell, rc::Rc};\nstruct TrieNode {\n    end: bool,\n    fail: Option<Rc<RefCell<TrieNode>>>,\n    children: Vec<Option<Rc<RefCell<TrieNode>>>>,\n}\nimpl TrieNode {\n    fn new() -> Rc<RefCell<Self>> {\n        Rc::new(RefCell::new(Self {\n            end: false,\n            fail: None,\n            children: vec![None; 26],\n        }))\n    }\n}\nstruct StreamChecker {\n    root: Rc<RefCell<TrieNode>>,\n    current: Rc<RefCell<TrieNode>>,\n}\nimpl StreamChecker {\n    fn new(words: Vec<String>) -> Self {\n        let root = TrieNode::new();\n        let current = root.clone();\n        for word in words {\n            let mut node = root.clone();\n            for c in word.chars() {\n                let idx = c as usize - 'a' as usize;\n                let node_ref = node.as_ref();\n                {\n                    let mut node = node_ref.borrow_mut();\n                    if node.children[idx].is_none() {\n                        node.children[idx] = Some(TrieNode::new());\n                    }\n                }\n                let next_node = node_ref.borrow().children[idx].clone().unwrap();\n                node = next_node;\n            }\n            node.as_ref().borrow_mut().end = true;\n        }\n        let mut q = std::collections::VecDeque::<Rc<RefCell<TrieNode>>>::new();\n        {\n            let mut root_ref = root.as_ref().borrow_mut();\n            for i in 0..26 {\n                if root_ref.children[i].is_some() {\n                    q.push_back(root_ref.children[i].clone().unwrap());\n                    root_ref.children[i]\n                        .clone()\n                        .unwrap()\n                        .as_ref()\n                        .borrow_mut()\n                        .fail = Some(root.clone());\n                } else {\n                    root_ref.children[i] = Some(root.clone());\n                }\n            }\n        }\n        while !q.is_empty() {\n            let node = q.pop_front().unwrap();\n            {\n                let node = node.as_ref();\n                let end = node.borrow().end;\n                node.borrow_mut().end =\n                    end || node.borrow().fail.as_ref().unwrap().as_ref().borrow().end;\n            }\n            for i in 0..26 {\n                let node = node.as_ref();\n                let fail_node = node\n                    .borrow()\n                    .fail\n                    .as_ref()\n                    .unwrap()\n                    .as_ref()\n                    .borrow()\n                    .children[i]\n                    .clone();\n                if node.borrow().children[i].is_some() {\n                    q.push_back(node.borrow().children[i].clone().unwrap());\n                    let child = node.borrow().children[i].clone().unwrap();\n                    child.as_ref().borrow_mut().fail = fail_node.clone();\n                } else {\n                    node.borrow_mut().children[i] = fail_node.clone();\n                }\n            }\n        }\n        Self { root, current }\n    }\n    fn query(&mut self, letter: char) -> bool {\n        let current = self.current.as_ref();\n        let next = current.borrow().children[letter as usize - 'a' as usize]\n            .as_ref()\n            .unwrap()\n            .clone();\n        self.current = next;\n        self.current.as_ref().borrow().end\n    }\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},8556:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>t});var o=r(58101);const i={},l=o.createContext(i);function d(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);