"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[41486],{78627:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>s,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"leetcode/201-300/\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570","title":"295.\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570","description":"\u94fe\u63a5\uff1a295.\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570","source":"@site/docs/leetcode/201-300/295.\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570.md","sourceDirName":"leetcode/201-300","slug":"/leetcode/201-300/\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570","permalink":"/docs/leetcode/201-300/\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":295,"frontMatter":{},"sidebar":"journal","previous":{"title":"292.Nim\u6e38\u620f","permalink":"/docs/leetcode/201-300/Nim\u6e38\u620f"},"next":{"title":"297.\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316","permalink":"/docs/leetcode/201-300/\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316"}}');var r=i(25105),h=i(8556);const s={},a="295.\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",d={},p=[{value:"\u9898\u89e3 1 - c",id:"\u9898\u89e3-1---c",level:2},{value:"\u9898\u89e3 2 - typescript",id:"\u9898\u89e3-2---typescript",level:2},{value:"\u9898\u89e3 3 - typescript",id:"\u9898\u89e3-3---typescript",level:2}];function l(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,h.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"295\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",children:"295.\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,r.jsx)(e.a,{href:"https://leetcode.cn/problems/find-median-from-data-stream",children:"295.\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570"}),(0,r.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1aHard",(0,r.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u53cc\u6307\u9488\u3001\u6570\u636e\u6d41\u3001\u6392\u5e8f\u3001\u5806\uff08\u4f18\u5148\u961f\u5217\uff09",(0,r.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u4e2d\u4f4d\u6570\u662f\u6709\u5e8f\u5217\u8868\u4e2d\u95f4\u7684\u6570\u3002\u5982\u679c\u5217\u8868\u957f\u5ea6\u662f\u5076\u6570\uff0c\u4e2d\u4f4d\u6570\u5219\u662f\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"\u9898\u89e3-1---c",children:"\u9898\u89e3 1 - c"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-11-28"}),"\n",(0,r.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a376ms"}),"\n",(0,r.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a83MB"}),"\n",(0,r.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1ac"}),"\n",(0,r.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5806\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#define swap(a, b)              \\\n    {                           \\\n        __typeof(a) __temp = a; \\\n        a = b;                  \\\n        b = __temp;             \\\n    }\ntypedef struct\n{\n    int size, len, *data;\n    int(*comp)(int, int);\n} Heap;\nHeap *heap_create(int len, int (*comp)(int, int))\n{\n    Heap *h = (Heap *)malloc(sizeof(Heap));\n    h->comp = comp;\n    h->len = len;\n    h->size = 0;\n    h->data = (int *)malloc(sizeof(int) * len);\n    return h;\n}\nvoid heap_free(Heap *h)\n{\n    if (!h)\n        return;\n    free(h->data);\n    free(h);\n}\nvoid heap_shift_up(Heap *h, int idx)\n{\n    while (idx)\n    {\n        int p = (idx - 1) / 2;\n        if (h->comp(h->data[idx], h->data[p]) > 0)\n        {\n            swap(h->data[p], h->data[idx]);\n            idx = p;\n        }\n        else\n            break;\n    }\n}\nvoid heap_shift_down(Heap *h, int idx)\n{\n    while (idx * 2 + 1 < h->size)\n    {\n        int child = idx;\n        if (h->comp(h->data[child], h->data[idx * 2 + 1]) < 0)\n        {\n            child = idx * 2 + 1;\n        }\n        if (\n            idx * 2 + 2 < h->len && h->comp(h->data[child], h->data[idx * 2 + 2]) < 0)\n        {\n            child = idx * 2 + 2;\n        }\n        if (child == idx)\n            break;\n        swap(h->data[idx], h->data[child]);\n        idx = child;\n    }\n}\nint heap_remove(Heap *h)\n{\n    if (!h || h->size == 0)\n        return -1;\n    int val = h->data[0];\n    h->data[0] = h->data[--h->size];\n    heap_shift_down(h, 0);\n    return val;\n}\nint heap_add(Heap *h, int val)\n{\n    if (!h || h->len == h->size)\n        return 0;\n    h->data[h->size] = val;\n    heap_shift_up(h, h->size++);\n    return val;\n}\nint heap_top(Heap *h)\n{\n    if (!h || h->size == 0)\n        return -1;\n    return h->data[0];\n}\nvoid heap_show(Heap *h)\n{\n#ifdef DEBUG\n    printf("Heap : [");\n    for (int i = 0; i < h->len; i++)\n    {\n        if (!h->data[i])\n            continue;\n        i != 0 && printf(",");\n        printf("%d", h->data[i]);\n    }\n    printf("]\\n");\n#endif\n}\nint comp1(int a, int b)\n{\n    return a - b;\n}\nint comp2(int a, int b)\n{\n    return b- a;\n}\ntypedef struct {\n    Heap *h1, *h2;\n} MedianFinder;\n#define MAX 200000\nMedianFinder* medianFinderCreate() {\n    MedianFinder *o = (MedianFinder *)malloc(sizeof(MedianFinder));\n    o->h1 = heap_create(MAX, comp1);\n    o->h2 = heap_create(MAX, comp2);\n    return o;\n}\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n    if(obj->h1->size == 0 || num <= heap_top(obj->h1)) {\n        heap_add(obj->h1, num);\n        if (obj->h1->size > obj->h2->size + 1) heap_add(obj->h2, heap_remove(obj->h1));\n    }\n    else {\n        heap_add(obj->h2, num);\n        if (obj->h2->size > obj->h1->size) heap_add(obj->h1, heap_remove(obj->h2));\n    }\n}\ndouble medianFinderFindMedian(MedianFinder* obj) {\n    if((obj->h1->size + obj->h2->size) & 1) return heap_top(obj->h1);\n    else return (heap_top(obj->h1) + heap_top(obj->h2)) / 2.0;\n}\nvoid medianFinderFree(MedianFinder* obj) {\n    heap_free(obj->h1);\n    heap_free(obj->h2);\n    free(obj);\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u9898\u89e3-2---typescript",children:"\u9898\u89e3 2 - typescript"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-04-10"}),"\n",(0,r.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a272ms"}),"\n",(0,r.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a58.5MB"}),"\n",(0,r.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,r.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u6784\u5efa\u5de6\u4fa7\u5927\u9876\u5806\u548c\u53f3\u4fa7\u5c0f\u9876\u5806\uff0c\u4e2d\u95f4\u503c\u4e3a\u5de6\u4fa7\u5806\u6700\u5927\u503c\u548c\u53f3\u4fa7\u5806\u6700\u5c0f\u503c\u7684\u6bd4\u8f83\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"class Heap<T> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: T, t2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n}\nclass MedianFinder {\n  private leftHeap = new Heap<number>((num1: number, num2: number) => num1 - num2);\n  private rightHeap = new Heap<number>((num1: number, num2: number) => num2 - num1);\n  get size() {\n    return this.leftHeap.size + this.rightHeap.size;\n  }\n  addNum(num: number): void {\n    if (!this.leftHeap.size || this.leftHeap.top >= num) {\n      this.leftHeap.add(num);\n    } else {\n      this.rightHeap.add(num);\n    }\n    if (this.leftHeap.size === this.rightHeap.size + 2) {\n      this.rightHeap.add(this.leftHeap.remove());\n    } else if (this.leftHeap.size === this.rightHeap.size - 1) {\n      this.leftHeap.add(this.rightHeap.remove());\n    }\n  }\n  findMedian(): number {\n    if (this.size % 2 === 0) {\n      return (this.leftHeap.top + this.rightHeap.top) / 2;\n    } else {\n      return this.leftHeap.top;\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u9898\u89e3-3---typescript",children:"\u9898\u89e3 3 - typescript"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-08-27"}),"\n",(0,r.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a1648ms"}),"\n",(0,r.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a68.1MB"}),"\n",(0,r.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,r.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u6784\u5efa\u5de6\u4fa7\u5927\u9876\u5806\uff0c\u53f3\u4fa7\u5c0f\u9876\u5806\uff0c\u5feb\u901f\u53d6\u4e2d\u503c\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"class Heap<T> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: T, t2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n}\nclass MedianFinder {\n  left = new Heap<number>((t1, t2) => t1 - t2);\n  right = new Heap<number>((t1, t2) => t2 - t1);\n  get cnt() {\n    return this.left.size + this.right.size;\n  }\n  addNum(num: number): void {\n    if (this.left.size === 0 && this.right.size === 0) {\n      this.left.add(num);\n    } else if (this.left.top < num) {\n      this.right.add(num);\n    } else {\n      this.left.add(num);\n    }\n    if (this.right.size + 1 > this.left.size) this.left.add(this.right.remove());\n    if (this.left.size - 1 > this.right.size) this.right.add(this.left.remove());\n  }\n  findMedian(): number {\n    return this.cnt % 2 === 0 ? (this.left.top + this.right.top) / 2 : this.left.top;\n  }\n}\n"})})]})}function o(n={}){const{wrapper:e}={...(0,h.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},8556:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>a});var t=i(58101);const r={},h=t.createContext(r);function s(n){const e=t.useContext(h);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),t.createElement(h.Provider,{value:e},n.children)}}}]);