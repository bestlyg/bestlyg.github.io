"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[6776],{84460:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"leetcode/1201-1300/\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e","title":"1222.\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e","description":"\u94fe\u63a5\uff1a1222.\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e","source":"@site/docs/leetcode/1201-1300/1222.\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e.md","sourceDirName":"leetcode/1201-1300","slug":"/leetcode/1201-1300/\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e","permalink":"/docs/leetcode/1201-1300/\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1222,"frontMatter":{},"sidebar":"journal","previous":{"title":"1220.\u7edf\u8ba1\u5143\u97f3\u5b57\u6bcd\u5e8f\u5217\u7684\u6570\u76ee","permalink":"/docs/leetcode/1201-1300/\u7edf\u8ba1\u5143\u97f3\u5b57\u6bcd\u5e8f\u5217\u7684\u6570\u76ee"},"next":{"title":"1223.\u63b7\u9ab0\u5b50\u6a21\u62df","permalink":"/docs/leetcode/1201-1300/\u63b7\u9ab0\u5b50\u6a21\u62df"}}');var r=s(25105),t=s(8556);const o={},c="1222.\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e",l={},d=[{value:"\u9898\u89e3 1 - python",id:"\u9898\u89e3-1---python",level:2},{value:"\u9898\u89e3 2 - cpp",id:"\u9898\u89e3-2---cpp",level:2},{value:"\u9898\u89e3 3 - python",id:"\u9898\u89e3-3---python",level:2},{value:"\u9898\u89e3 4 - rust",id:"\u9898\u89e3-4---rust",level:2}];function a(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"1222\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e",children:"1222.\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,r.jsx)(e.a,{href:"https://leetcode.cn/problems/queens-that-can-attack-the-king",children:"1222.\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e"}),(0,r.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,r.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u77e9\u9635\u3001\u6a21\u62df",(0,r.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u5728\u4e00\u4e2a 8x8 \u7684\u68cb\u76d8\u4e0a\uff0c\u653e\u7f6e\u7740\u82e5\u5e72\u300c\u9ed1\u7687\u540e\u300d\u548c\u4e00\u4e2a\u300c\u767d\u56fd\u738b\u300d\u3002\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u5750\u6807\u7ec4\u6210\u7684\u6570\u7ec4 queens \uff0c\u8868\u793a\u9ed1\u7687\u540e\u7684\u4f4d\u7f6e\uff1b\u4ee5\u53ca\u4e00\u5bf9\u5750\u6807 king \uff0c\u8868\u793a\u767d\u56fd\u738b\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de\u6240\u6709\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e\u7684\u5750\u6807(\u4efb\u610f\u987a\u5e8f)\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"\u9898\u89e3-1---python",children:"\u9898\u89e3 1 - python"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-14"}),"\n",(0,r.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a40ms"}),"\n",(0,r.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a16MB"}),"\n",(0,r.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,r.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def queensAttacktheKing(self, queens: List[List[int]], king: List[int]) -> List[List[int]]:\n        dirs2 = [(0, 1), (0, -1), (1, 0), (-1, 0),\n                    (1, 1), (1, -1), (-1, 1), (-1, -1)]\n        board = [[False for j in range(8)] for i in range(8)]\n        for [x, y] in queens:\n            board[x][y] = True\n        res = []\n        for i in range(1, 8):\n            if not dirs2: break\n            for j in range(len(dirs2) - 1, -1, -1):\n                x = king[0] + dirs2[j][0] * i\n                y = king[1] + dirs2[j][1] * i\n                if 0 <= x < 8 and 0 <= y < 8:\n                    if board[x][y]:\n                        res.append([x, y])\n                        dirs2.remove(dirs2[j])\n                else:\n                    dirs2.remove(dirs2[j])\n        return res\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u9898\u89e3-2---cpp",children:"\u9898\u89e3 2 - cpp"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-14"}),"\n",(0,r.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a8ms"}),"\n",(0,r.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a10.97MB"}),"\n",(0,r.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,r.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u65b9\u5411\u6570\u7ec4\u904d\u5386\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"vector<vector<int>> dirs2 = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};\nclass Solution {\npublic:\n    vector<vector<int>> queensAttacktheKing(vector<vector<int>>& queens, vector<int>& king) {\n        vector<vector<bool>> board(8, vector<bool>(8, false));\n        for (auto &q : queens) board[q[0]][q[1]] = true;\n        vector<vector<int>> res;\n        auto check = [&](vector<int> pos, vector<int> &dir) {\n            for (int i = 1; i < 8; i++) {\n                pos[0] += dir[0];\n                pos[1] += dir[1];\n                if (0 <= pos[0] && pos[0] < 8 && 0 <= pos[1] && pos[1] < 8) {\n                    if (board[pos[0]][pos[1]]) {\n                        res.push_back(pos);\n                        return;\n                    }\n                } else return;\n            }\n        };\n        for (auto &d : dirs2) check(king, d);\n        return res;\n    }\n};\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u9898\u89e3-3---python",children:"\u9898\u89e3 3 - python"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-14"}),"\n",(0,r.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a48ms"}),"\n",(0,r.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a15.65MB"}),"\n",(0,r.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,r.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"dirs = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n    class Solution:\n        def queensAttacktheKing(self, queens: List[List[int]], king: List[int]) -> List[List[int]]:\n            board = [[False for j in range(8)] for i in range(8)]\n            for [x, y] in queens:\n                board[x][y] = True\n            res = []\n            def check(pos: List[int], dir: List[int]) -> bool:\n                for _ in range(1, 8):\n                    pos[0] += dir[0]\n                    pos[1] += dir[1]\n    \n                    if 0 <= pos[0] < 8 and 0 <= pos[1] < 8:\n                        if board[pos[0]][pos[1]]:\n                            res.append([pos[0], pos[1]])\n                            return \n                    else:\n                        return\n            for d in dirs:\n                check(list(king), d)\n            return res\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u9898\u89e3-4---rust",children:"\u9898\u89e3 4 - rust"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-14"}),"\n",(0,r.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2.1MB"}),"\n",(0,r.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,r.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"pub const DIRS2: [[i32; 2]; 8] = [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0],\n    [1, 1],\n    [1, -1],\n    [-1, 1],\n    [-1, -1],\n];\nimpl Solution {\n    pub fn queens_attackthe_king(queens: Vec<Vec<i32>>, king: Vec<i32>) -> Vec<Vec<i32>> {\n        let mut board = vec![vec![false; 8]; 8];\n        for queen in queens {\n            board[queen[0] as usize][queen[1] as usize] = true;\n        }\n        let mut res = vec![];\n        let mut check = |mut pos: Vec<usize>, dir: &[i32]| {\n            for i in 1..8 {\n                let x = pos[0] as i32 + dir[0] * i;\n                let y = pos[1] as i32 + dir[1] * i;\n                if 0 <= x && x < 8 && 0 <= y && y < 8 {\n                    if board[x as usize][y as usize] {\n                        res.push(vec![x, y]);\n                        return;\n                    }\n                } else {\n                    return;\n                }\n            }\n        };\n        for d in &DIRS2 {\n            check(king.iter().map(|v| *v as usize).collect(), d);\n        }\n        res\n    }\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(a,{...n})}):a(n)}},8556:(n,e,s)=>{s.d(e,{R:()=>o,x:()=>c});var i=s(58101);const r={},t=i.createContext(r);function o(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);