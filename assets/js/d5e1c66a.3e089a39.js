"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[73876],{67782:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=r(86070),t=r(25710);const o={},d="676.\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178",c={id:"leetcode/601-700/\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178",title:"676.\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178",description:"\u94fe\u63a5\uff1a676.\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178",source:"@site/docs/leetcode/601-700/676.\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178.md",sourceDirName:"leetcode/601-700",slug:"/leetcode/601-700/\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178",permalink:"/docs/leetcode/601-700/\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:676,frontMatter:{},sidebar:"journal",previous:{title:"675.\u4e3a\u9ad8\u5c14\u592b\u6bd4\u8d5b\u780d\u6811",permalink:"/docs/leetcode/601-700/\u4e3a\u9ad8\u5c14\u592b\u6bd4\u8d5b\u780d\u6811"},next:{title:"678.\u6709\u6548\u7684\u62ec\u53f7\u5b57\u7b26\u4e32",permalink:"/docs/leetcode/601-700/\u6709\u6548\u7684\u62ec\u53f7\u5b57\u7b26\u4e32"}},s={},l=[{value:"\u9898\u89e3 1 - typescript",id:"\u9898\u89e3-1---typescript",level:2},{value:"\u9898\u89e3 2 - cpp",id:"\u9898\u89e3-2---cpp",level:2}];function a(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"676\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178",children:"676.\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/implement-magic-dictionary",children:"676.\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178"}),(0,i.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1a\u4e2d\u7b49",(0,i.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u8bbe\u8ba1\u3001\u5b57\u5178\u6811\u3001\u54c8\u5e0c\u8868\u3001\u5b57\u7b26\u4e32",(0,i.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u8bbe\u8ba1\u4e00\u4e2a\u4f7f\u7528\u5355\u8bcd\u5217\u8868\u8fdb\u884c\u521d\u59cb\u5316\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u5355\u8bcd \u4e92\u4e0d\u76f8\u540c \u3002 \u5982\u679c\u7ed9\u51fa\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u5224\u5b9a\u80fd\u5426\u53ea\u5c06\u8fd9\u4e2a\u5355\u8bcd\u4e2d\u4e00\u4e2a\u5b57\u6bcd\u6362\u6210\u53e6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4f7f\u5f97\u6240\u5f62\u6210\u7684\u65b0\u5355\u8bcd\u5b58\u5728\u4e8e\u4f60\u6784\u5efa\u7684\u5b57\u5178\u4e2d\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-1---typescript",children:"\u9898\u89e3 1 - typescript"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-11-05"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a132ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a45.9MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","trie\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"const getIdx = (ch: string) => ch.codePointAt(0)! - 'a'.codePointAt(0)!;\nclass TrieNode {\n  end = false;\n  children: TrieNode[] = [];\n  constructor(public val: string) {}\n}\nclass Trie {\n  root = new TrieNode('');\n  insert(word: string): void {\n    let node = this.root;\n    for (const ch of word) {\n      const idx = getIdx(ch);\n      if (!node.children[idx]) node.children[idx] = new TrieNode(ch);\n      node = node.children[idx];\n    }\n    node.end = true;\n  }\n  search(word: string): boolean {\n    return this._search(word);\n  }\n  _search(word: string, node = this.root, idx = 0, err = 1): boolean {\n    if (idx === word.length) return node.end && err === 0;\n    const ch = word[idx];\n    const chIdx = getIdx(ch);\n    if (node.children[chIdx] && this._search(word, node.children[chIdx], idx + 1, err)) return true;\n    if (err === 0) return false;\n    for (const child of node.children) {\n      if (child === node.children[chIdx]) continue;\n      if (this._search(word, child, idx + 1, err - 1)) return true;\n    }\n    return false;\n  }\n}\n\nclass MagicDictionary {\n  trie = new Trie();\n  buildDict(dictionary: string[]): void {\n    dictionary.forEach(word => this.trie.insert(word));\n  }\n  search(searchWord: string): boolean {\n    return this.trie.search(searchWord);\n  }\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-2---cpp",children:"\u9898\u89e3 2 - cpp"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-07-11"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a712ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a101.6MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","trie, \u5bf9\u4e8e\u6bcf\u79cd\u53ef\u80fd\u51fa\u73b0 1 \u4e2a\u66ff\u6362\uff0c\u8fdb\u884c\u9012\u5f52\u8003\u8651\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"#define CHILD_SIZE 26\nclass TrieNode {\n   public:\n    int key;\n    bool end;\n    TrieNode **children;\n    TrieNode(int key) {\n        this->key = key;\n        this->end = false;\n        this->children = (TrieNode **)malloc(sizeof(TrieNode *) * CHILD_SIZE);\n        for (int i = 0; i < CHILD_SIZE; i++) children[i] = nullptr;\n    }\n};\nclass Trie {\n   public:\n    TrieNode *root;\n    Trie() { this->root = new TrieNode(0); }\n    void insert(string words) {\n        TrieNode *node = root;\n        for (auto &w : words) {\n            if (node->children[w - 'a'] == nullptr)\n                node->children[w - 'a'] = new TrieNode(w);\n            node = node->children[w - 'a'];\n        }\n        node->end = true;\n    }\n    bool search(string words) { return _search(words, 0, root, 0); }\n    bool _search(string &words, int idx, TrieNode *node, int replaceCnt) {\n        int w = words[idx];\n        if (idx == words.size() - 1) {\n            if (replaceCnt > 1)\n                return false;\n            else if (replaceCnt == 1)\n                return node->children[w - 'a'] != nullptr &&\n                       node->children[w - 'a']->end;\n            else {\n                for (int i = 0; i < CHILD_SIZE; i++) {\n                    if (node->children[i] == nullptr || w - 'a' == i) continue;\n                    if (node->children[i]->end) return true;\n                }\n            }\n            return false;\n        }\n        int nextw = words[idx + 1];\n        for (int i = 0; i < CHILD_SIZE; i++) {\n            if (node->children[i] == nullptr) continue;\n            if (w - 'a' == i &&\n                _search(words, idx + 1, node->children[i], replaceCnt))\n                return true;\n            if (w - 'a' != i &&\n                _search(words, idx + 1, node->children[i], replaceCnt + 1))\n                return true;\n        }\n        return false;\n    }\n};\n\nclass MagicDictionary {\n   public:\n    Trie *trie;\n    MagicDictionary() { trie = new Trie(); }\n    void buildDict(vector<string> dictionary) {\n        for (auto &words : dictionary) trie->insert(words);\n    }\n    bool search(string searchWord) { return trie->search(searchWord); }\n};\n"})})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(a,{...n})}):a(n)}},25710:(n,e,r)=>{r.d(e,{R:()=>d,x:()=>c});var i=r(30758);const t={},o=i.createContext(t);function d(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:d(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);