"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[28461],{20140:(n,e,l)=>{l.r(e),l.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>v,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"leetcode/1301-1400/\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c","title":"1373.\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c","description":"\u94fe\u63a5\uff1a1373.\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c","source":"@site/docs/leetcode/1301-1400/1373.\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c.md","sourceDirName":"leetcode/1301-1400","slug":"/leetcode/1301-1400/\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c","permalink":"/docs/leetcode/1301-1400/\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1373,"frontMatter":{},"sidebar":"journal","previous":{"title":"1371.\u6bcf\u4e2a\u5143\u97f3\u5305\u542b\u5076\u6570\u6b21\u7684\u6700\u957f\u5b50\u5b57\u7b26\u4e32","permalink":"/docs/leetcode/1301-1400/\u6bcf\u4e2a\u5143\u97f3\u5305\u542b\u5076\u6570\u6b21\u7684\u6700\u957f\u5b50\u5b57\u7b26\u4e32"},"next":{"title":"1374.\u751f\u6210\u6bcf\u79cd\u5b57\u7b26\u90fd\u662f\u5947\u6570\u4e2a\u7684\u5b57\u7b26\u4e32","permalink":"/docs/leetcode/1301-1400/\u751f\u6210\u6bcf\u79cd\u5b57\u7b26\u90fd\u662f\u5947\u6570\u4e2a\u7684\u5b57\u7b26\u4e32"}}');var s=l(86070),o=l(31503);const t={},i="1373.\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c",d={},a=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - rust",id:"\u9898\u89e3-3---rust",level:2}];function u(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"1373\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c",children:"1373.\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,s.jsx)(e.a,{href:"https://leetcode.cn/problems/maximum-sum-bst-in-binary-tree",children:"1373.\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c"}),(0,s.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1aHard",(0,s.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u4e8c\u53c9\u641c\u7d22\u6811\u3001\u52a8\u6001\u89c4\u5212\u3001\u4e8c\u53c9\u6811",(0,s.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u68f5\u4ee5 root \u4e3a\u6839\u7684 \u4e8c\u53c9\u6811 \uff0c\u8bf7\u4f60\u8fd4\u56de \u4efb\u610f \u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-05-20"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a128ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a110.6MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u904d\u5386\u5de6\u53f3\u5b50\u6811\u7684\u540c\u65f6\u8bb0\u5f55\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u548c\u603b\u548c\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"struct Node {\n    int l, r, sum;\n    Node(int l, int r, int sum): l(l), r(r), sum(sum) {}\n};\nclass Solution {\npublic:\n    int maxSumBST(TreeNode* root) {\n        int res = 0;\n        Node no(INT_MIN, -1, -1);\n        function<Node(TreeNode*)> dfs = [&](TreeNode *node) -> Node {\n            if (!node) return no;\n            int val = node->val;\n            auto lv = dfs(node->left), rv = dfs(node->right);\n            if (node->left == nullptr && node->right == nullptr) {\n                res = max(res, val);\n                return Node(val, val, val);\n            } else if (node->left == nullptr) {\n                if (rv.l == no.l) return no;\n                if (val >= rv.l) return no;\n                rv.l = val;\n                rv.sum += val;\n                res = max(res, rv.sum);\n                return rv;\n            } else if (node->right == nullptr) {\n                if (lv.l == no.l) return no;\n                if (lv.r >= val) return no;\n                lv.r = val;\n                lv.sum += val;\n                res = max(res, lv.sum);\n                return lv;\n            } else {\n                if (lv.l == no.l || rv.l == no.l) return no;\n                if (lv.r >= val) return no;\n                if (val >= rv.l) return no;\n                Node next(lv.l, rv.r, lv.sum + rv.sum + val);\n                res = max(res, next.sum);\n                return next;\n            }\n        };\n        dfs(root);\n        return res;\n    }\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-05-20"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a304ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a65.5MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"class Node:\n    def __init__(self, l: int, r: int, sum: int):\n        self.l = l\n        self.r = r\n        self.sum = sum\n\nclass Solution:\n    def maxSumBST(self, root: Optional[TreeNode]) -> int:\n        res = 0\n        no = Node(-inf, -1, -1)\n        def dfs(node: Optional[TreeNode]) -> Node:\n            nonlocal res\n            if not node:\n                return no\n            val = node.val\n            lv, rv = dfs(node.left), dfs(node.right)\n            if node.left == None and node.right == None:\n                res = max(res, val)\n                return Node(val, val, val)\n            elif node.left == None:\n                if rv.l == no.l:\n                    return no\n                if val >= rv.l:\n                    return no\n                rv.l = val\n                rv.sum += val\n                res = max(res, rv.sum)\n                return rv\n            elif node.right == None:\n                if lv.l == no.l:\n                    return no\n                if lv.r >= val:\n                    return no\n                lv.r = val\n                lv.sum += val\n                res = max(res, lv.sum)\n                return lv\n            else:\n                if lv.l == no.l or rv.l == no.l:\n                    return no\n                if lv.r >= val:\n                    return no\n                if val >= rv.l:\n                    return no\n                next = Node(lv.l, rv.r, lv.sum + rv.sum + val)\n                res = max(res, next.sum)\n                return next\n        dfs(root)\n        return res\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-3---rust",children:"\u9898\u89e3 3 - rust"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-05-20"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a24ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a9.8MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:"static NoVal: i32 = i32::MIN;\n#[derive(Debug, Clone)]\nstruct Node {\n    l: i32,\n    r: i32,\n    sum: i32,\n}\nimpl Node {\n    fn new(l: i32, r: i32, sum: i32) -> Node {\n        Node { l, r, sum }\n    }\n    fn no() -> Node {\n        Node {\n            l: NoVal,\n            r: 0,\n            sum: 0,\n        }\n    }\n}\nuse std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn max_sum_bst(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        let mut res = 0;\n        dfs(&mut res, &root);\n        res\n    }\n}\nfn dfs(res: &mut i32, node: &Option<Rc<RefCell<TreeNode>>>) -> Node {\n    match node {\n        Some(node) => {\n            let nodeRef = node.as_ref().borrow();\n            let val = nodeRef.val;\n            let (mut lv, mut rv) = (dfs(res, &nodeRef.left), dfs(res, &nodeRef.right));\n            if nodeRef.left.is_none() && nodeRef.right.is_none() {\n                *res = (*res).max(val);\n                Node::new(val, val, val)\n            } else if nodeRef.left.is_none() {\n                if rv.l == NoVal {\n                    Node::no()\n                } else if val >= rv.l {\n                    Node::no()\n                } else {\n                    rv.l = val;\n                    rv.sum += val;\n                    *res = (*res).max(rv.sum);\n                    rv\n                }\n            } else if nodeRef.right.is_none() {\n                if lv.l == NoVal {\n                    Node::no()\n                } else if lv.r >= val {\n                    Node::no()\n                } else {\n                    lv.r = val;\n                    lv.sum += val;\n                    *res = (*res).max(lv.sum);\n                    lv\n                }\n            } else {\n                if lv.l == NoVal || rv.l == NoVal {\n                    Node::no()\n                } else if lv.r >= val {\n                    Node::no()\n                } else if val >= rv.l {\n                    Node::no()\n                } else {\n                    let next = Node::new(lv.l, rv.r, lv.sum + rv.sum + val);\n                    *res = (*res).max(next.sum);\n                    next\n                }\n            }\n        }\n        None => Node::no(),\n    }\n}\n"})})]})}function v(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},31503:(n,e,l)=>{l.d(e,{R:()=>t,x:()=>i});var r=l(30758);const s={},o=r.createContext(s);function t(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);