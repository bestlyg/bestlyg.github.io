"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[80263],{25851:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>c,toc:()=>o});var i=s(86070),r=s(25710);const t={},l="1590.\u4f7f\u6570\u7ec4\u548c\u80fd\u88abP\u6574\u9664",c={id:"leetcode/1501-1600/\u4f7f\u6570\u7ec4\u548c\u80fd\u88abP\u6574\u9664",title:"1590.\u4f7f\u6570\u7ec4\u548c\u80fd\u88abP\u6574\u9664",description:"\u94fe\u63a5\uff1a1590.\u4f7f\u6570\u7ec4\u548c\u80fd\u88abP\u6574\u9664",source:"@site/docs/leetcode/1501-1600/1590.\u4f7f\u6570\u7ec4\u548c\u80fd\u88abP\u6574\u9664.md",sourceDirName:"leetcode/1501-1600",slug:"/leetcode/1501-1600/\u4f7f\u6570\u7ec4\u548c\u80fd\u88abP\u6574\u9664",permalink:"/docs/leetcode/1501-1600/\u4f7f\u6570\u7ec4\u548c\u80fd\u88abP\u6574\u9664",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1590,frontMatter:{},sidebar:"journal",previous:{title:"1588.\u6240\u6709\u5947\u6570\u957f\u5ea6\u5b50\u6570\u7ec4\u7684\u548c",permalink:"/docs/leetcode/1501-1600/\u6240\u6709\u5947\u6570\u957f\u5ea6\u5b50\u6570\u7ec4\u7684\u548c"},next:{title:"1592.\u91cd\u65b0\u6392\u5217\u5355\u8bcd\u95f4\u7684\u7a7a\u683c",permalink:"/docs/leetcode/1501-1600/\u91cd\u65b0\u6392\u5217\u5355\u8bcd\u95f4\u7684\u7a7a\u683c"}},u={},o=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - rust",id:"\u9898\u89e3-3---rust",level:2}];function m(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"1590\u4f7f\u6570\u7ec4\u548c\u80fd\u88abp\u6574\u9664",children:"1590.\u4f7f\u6570\u7ec4\u548c\u80fd\u88abP\u6574\u9664"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/make-sum-divisible-by-p",children:"1590.\u4f7f\u6570\u7ec4\u548c\u80fd\u88abP\u6574\u9664"}),(0,i.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,i.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u54c8\u5e0c\u8868\u3001\u524d\u7f00\u548c",(0,i.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\xa0nums\uff0c\u8bf7\u4f60\u79fb\u9664 \u6700\u77ed\xa0\u5b50\u6570\u7ec4\uff08\u53ef\u4ee5\u4e3a \u7a7a\uff09\uff0c\u4f7f\u5f97\u5269\u4f59\u5143\u7d20\u7684 \u548c\xa0\u80fd\u88ab p\xa0\u6574\u9664\u3002 \u4e0d\u5141\u8bb8\xa0\u5c06\u6574\u4e2a\u6570\u7ec4\u90fd\u79fb\u9664\u3002\u8bf7\u4f60\u8fd4\u56de\u4f60\u9700\u8981\u79fb\u9664\u7684\u6700\u77ed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5982\u679c\u65e0\u6cd5\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\uff0c\u8fd4\u56de -1\xa0\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-10"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a152ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a65MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u524d\u7f00\u548c\uff0c\u5982\u679csum%p=x, \u90a3\u4e48(f[i+1]-f[j])%p=x\u624d\u53ef\u4ee5\u6c42\u5f97\u503c\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int minSubarray(vector<int>& nums, int p) {\n        unordered_map<int, int> m;\n        m[0] = -1;\n        int n = nums.size(), cur = 0, res = n, sum = 0;\n        for (auto &num : nums) sum = (sum + num) % p;\n        if (sum == 0) return 0;\n        for (int i = 0; i < n; i++) {\n            cur = (cur + nums[i]) % p;\n            if (m.count((cur - sum + p) % p)) res = min(res, i - m[(cur - sum + p) % p]);\n            m[cur] = i;\n        }\n        return res == n ? -1 : res;\n    }\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-10"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a128ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a35.5MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def minSubarray(self, nums: List[int], p: int) -> int:\n        m = dict()\n        m[0] = -1\n        n, cur, res, sums = len(nums), 0, 0x3f3f3f3f, sum(nums) % p\n        if sums == 0:\n            return 0\n        for i in range(n):\n            cur = (cur + nums[i]) % p\n            if (cur - sums + p) % p in m:\n                res = min(res, i - m[(cur - sums + p) % p])\n            m[cur] = i\n        return res if res != n else -1\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-3---rust",children:"\u9898\u89e3 3 - rust"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-10"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a28ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a4.7MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"impl Solution {\n    pub fn min_subarray(nums: Vec<i32>, p: i32) -> i32 {\n        let mut m = std::collections::HashMap::<i32, i32>::new();\n        m.insert(0, -1);\n        let (n, mut cur, mut sums) = (nums.len(), 0, 0);\n        let mut res = n as i32;\n        for num in nums.iter() {\n            sums = (sums + num) % p;\n        }\n        if sums == 0 {\n            0\n        } else {\n            for i in 0..n {\n                cur = (cur + nums[i]) % p;\n                let target = (cur - sums + p) % p;\n                if m.contains_key(&target) {\n                    res = res.min(i as i32 - m.get(&target).unwrap());\n                }\n                m.insert(cur, i as i32);\n            }\n            if res == n as i32 {\n                -1\n            } else {\n                res\n            }\n        }\n    }\n}\n"})})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(m,{...n})}):m(n)}},25710:(n,e,s)=>{s.d(e,{R:()=>l,x:()=>c});var i=s(30758);const r={},t=i.createContext(r);function l(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);