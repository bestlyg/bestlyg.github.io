"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[95802],{19465:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>o});var s=t(86070),i=t(25710);const l={},d="24.\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",r={id:"leetcode/1-100/\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",title:"24.\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",description:"\u94fe\u63a5\uff1a24.\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",source:"@site/docs/leetcode/1-100/24.\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9.md",sourceDirName:"leetcode/1-100",slug:"/leetcode/1-100/\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",permalink:"/web/site/docs/leetcode/1-100/\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:24,frontMatter:{},sidebar:"journal",previous:{title:"23.\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",permalink:"/web/site/docs/leetcode/1-100/\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868"},next:{title:"25.K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",permalink:"/web/site/docs/leetcode/1-100/K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868"}},c={},o=[{value:"\u9898\u89e3 1 - typescript",id:"\u9898\u89e3-1---typescript",level:2},{value:"\u9898\u89e3 2 - typescript",id:"\u9898\u89e3-2---typescript",level:2},{value:"\u9898\u89e3 3 - typescript",id:"\u9898\u89e3-3---typescript",level:2},{value:"\u9898\u89e3 4 - typescript",id:"\u9898\u89e3-4---typescript",level:2},{value:"\u9898\u89e3 5 - c",id:"\u9898\u89e3-5---c",level:2},{value:"\u9898\u89e3 6 - cpp",id:"\u9898\u89e3-6---cpp",level:2},{value:"\u9898\u89e3 7 - python",id:"\u9898\u89e3-7---python",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"24\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",children:"24.\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,s.jsx)(n.a,{href:"https://leetcode.cn/problems/swap-nodes-in-pairs",children:"24.\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"}),(0,s.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1a\u4e2d\u7b49",(0,s.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u9012\u5f52\u3001\u94fe\u8868",(0,s.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-1---typescript",children:"\u9898\u89e3 1 - typescript"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2020-10-13"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a96ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a39.5MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5165\u961f\u540e\u4e24\u4e24\u4ea4\u6362\u987a\u5e8f\u540e\u91cd\u65b0\u7ec4\u5408\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function swapPairs(head: ListNode | null): ListNode | null {\n  if (head === null) return null;\n  const queue: ListNode[] = [];\n  let temp: ListNode | null = head;\n  while (temp !== null) {\n    queue.push(temp);\n    temp = temp.next;\n    queue[queue.length - 1].next = null;\n  }\n  for (let i = 0, l = queue.length; i < l; i++) {\n    if (i & 1) {\n      let tempNode = queue[i];\n      queue[i] = queue[i - 1];\n      queue[i - 1] = tempNode;\n    }\n  }\n  queue.forEach((v, i, arr) => {\n    if (i !== 0) {\n      arr[i - 1].next = v;\n    }\n  });\n  return queue[0];\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-2---typescript",children:"\u9898\u89e3 2 - typescript"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2020-10-13"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a84ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a39.6MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function swapPairs(head: ListNode | null): ListNode | null {\n  if (head === null || head.next === null) return head;\n  const nextHead = head.next;\n  head.next = swapPairs(nextHead.next);\n  nextHead.next = head;\n  return nextHead;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-3---typescript",children:"\u9898\u89e3 3 - typescript"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2020-10-13"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a124ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a39.3MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u8fed\u4ee3\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function swapPairs(head: ListNode | null): ListNode | null {\n  let tempNode = new ListNode(0, head);\n  const headNode = tempNode;\n  while (tempNode.next?.next) {\n    const node1 = tempNode.next;\n    const node2 = tempNode.next.next;\n    tempNode.next = node2;\n    node1.next = node2.next;\n    node2.next = node1;\n    tempNode = node1;\n  }\n  return headNode.next;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-4---typescript",children:"\u9898\u89e3 4 - typescript"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-03-06"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a88ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a39.4MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u8fdb\u884c\u6bcf 2 \u4e2a\u4ea4\u6362,25 \u9898\u7684\u7279\u6b8a\u60c5\u51b5\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function _reverseList(head: ListNode, count: number): ListNode | null {\n  if (count === 1 || head.next === null) return head;\n  const tail = head.next;\n  const nextList = _reverseList(tail, count - 1);\n  head.next = tail.next;\n  tail.next = head;\n  return nextList;\n}\nfunction reverseList(head: ListNode, count: number): ListNode | null {\n  let temp: ListNode | null = head;\n  let c = count;\n  while (--c && temp) temp = temp.next;\n  return temp ? _reverseList(head, count) : head;\n}\nfunction swapPairs(head: ListNode | null): ListNode | null {\n  const dummyHead = new ListNode(0, head);\n  let temp: ListNode = dummyHead;\n  while (temp !== null && temp.next !== null) {\n    temp!.next = reverseList(temp.next!, 2);\n    let count = 2;\n    while (count-- && temp !== null) temp = temp.next!;\n  }\n  return dummyHead.next;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-5---c",children:"\u9898\u89e3 5 - c"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-11-19"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a0ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a5.8MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1ac"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","dfs\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"struct ListNode* swapPairs(struct ListNode* head){\n    if (!head) return NULL;\n    if (head->next == NULL) return head;\n    struct ListNode *next_node = head->next;\n    if (next_node->next != NULL) head->next = swapPairs(next_node->next);\n    else head->next = NULL;\n    next_node->next = head;\n    return next_node;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-6---cpp",children:"\u9898\u89e3 6 - cpp"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-08-06"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a4ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a7.26MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","dfs\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    typedef pair<ListNode*, ListNode*> pll;\n    ListNode* swapPairs(ListNode* head) {\n        return swap(head, 1, 2).first;\n    }\n    pll swap(ListNode* node, int cnt, int max_cnt) {\n        if (!node) {\n            return make_pair(nullptr, nullptr);\n        } else if (cnt == max_cnt) {\n            node->next = swap(node->next, 1, max_cnt).first;\n            return make_pair(node, node);\n        } else if (!node->next) {\n            return make_pair(node, node);\n        } else {\n            auto res = swap(node->next, cnt + 1, max_cnt);\n            node->next = res.second->next;\n            res.second->next = node;\n            return res;\n        }\n    }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-7---python",children:"\u9898\u89e3 7 - python"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-08-06"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a40ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a15.62MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def swap(node: Optional[ListNode], cnt: int, max_cnt: int) -> (Optional[ListNode], Optional[ListNode]):\n    if not node:\n        return (None, None)\n    elif cnt == max_cnt:\n        node.next = swap(node.next, 1, max_cnt)[0]\n        return (node, node)\n    elif not node.next:\n        return (node, node)\n    else:\n        res = swap(node.next, cnt + 1, max_cnt)\n        node.next = res[1].next\n        res[1].next = node\n        return res\n\n    class Solution:\n        def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n            return swap(head, 1, 2)[0]\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},25710:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var s=t(30758);const i={},l=s.createContext(i);function d(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);