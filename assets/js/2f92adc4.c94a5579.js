"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[94740],{12445:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>a,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var s=t(86070),l=t(31503);const i={},d="23.\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",r={id:"leetcode/1-100/\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",title:"23.\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",description:"\u94fe\u63a5\uff1a23.\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",source:"@site/docs/leetcode/1-100/23.\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868.md",sourceDirName:"leetcode/1-100",slug:"/leetcode/1-100/\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",permalink:"/docs/leetcode/1-100/\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:23,frontMatter:{},sidebar:"journal",previous:{title:"22.\u62ec\u53f7\u751f\u6210",permalink:"/docs/leetcode/1-100/\u62ec\u53f7\u751f\u6210"},next:{title:"24.\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",permalink:"/docs/leetcode/1-100/\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"}},o={},p=[{value:"\u9898\u89e3 1 - javascript",id:"\u9898\u89e3-1---javascript",level:2},{value:"\u9898\u89e3 2 - typescript",id:"\u9898\u89e3-2---typescript",level:2},{value:"\u9898\u89e3 3 - cpp",id:"\u9898\u89e3-3---cpp",level:2},{value:"\u9898\u89e3 4 - python",id:"\u9898\u89e3-4---python",level:2},{value:"\u9898\u89e3 5 - rust",id:"\u9898\u89e3-5---rust",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"23\u5408\u5e76k\u4e2a\u5347\u5e8f\u94fe\u8868",children:"23.\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,s.jsx)(n.a,{href:"https://leetcode.cn/problems/merge-k-sorted-lists",children:"23.\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868"}),(0,s.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aHard",(0,s.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u94fe\u8868\u3001\u5206\u6cbb\u3001\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\u3001\u5f52\u5e76\u6392\u5e8f",(0,s.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u6570\u7ec4\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u5df2\u7ecf\u6309\u5347\u5e8f\u6392\u5217\u3002\u8bf7\u4f60\u5c06\u6240\u6709\u94fe\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868\u4e2d\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u94fe\u8868\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-1---javascript",children:"\u9898\u89e3 1 - javascript"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2020-04-26"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a384ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a44.78MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1ajavascript"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5f52\u5e76\u6392\u5e8f\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var mergeKLists = function (lists) {\n    if (lists.length === 0) return null;\n    if (lists.length === 1) return lists[0];\n    let resNode;\n    for (const node of lists) {\n        if (node === null) continue;\n        if (resNode === undefined) resNode = node;\n        else resNode = add(resNode, node);\n    }\n    return resNode===undefined?null:resNode;\n};\nfunction add(node1, node2) {\n    let tempNode1 = node1;\n    let tempNode2 = node2;\n    let resNode;\n    let tempNode3;\n    while (tempNode1 !== null || tempNode2 !== null) {\n        let minNode;\n        if (tempNode1 === null) {\n            minNode = tempNode2;\n            tempNode2 = tempNode2.next;\n        } else if (tempNode2 === null) {\n            minNode = tempNode1;\n            tempNode1 = tempNode1.next;\n        } else if (tempNode1.val < tempNode2.val) {\n            minNode = tempNode1;\n            tempNode1 = tempNode1.next;\n        } else {\n            minNode = tempNode2;\n            tempNode2 = tempNode2.next;\n        }\n        if (resNode === undefined) {\n            tempNode3 = resNode = minNode;\n        } else {\n            tempNode3.next = minNode;\n            tempNode3 = tempNode3.next;\n        }\n    }\n    return resNode;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-2---typescript",children:"\u9898\u89e3 2 - typescript"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-05-13"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a220ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a48.3MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5f52\u5e76\u6392\u5e8f\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n  lists = lists.filter(list => list !== null);\n  const len = lists.length;\n  if (len === 0) return null;\n  const merge = (start: number, end: number): ListNode | null => {\n    console.log(start, end);\n    if (start > end) return null;\n    if (start === end) return lists[start];\n    const mid = (start + end) >> 1;\n    const list1 = merge(start, mid);\n    const list2 = merge(mid + 1, end);\n    if (list1 === null) return list2;\n    if (list2 === null) return list1;\n    const first = new ListNode(0);\n    let temp = first;\n    let p1: ListNode | null = list1;\n    let p2: ListNode | null = list2;\n    while (p1 && p2) {\n      if (p1.val <= p2.val) {\n        temp.next = p1;\n        temp = temp.next;\n        p1 = p1.next;\n      } else {\n        temp.next = p2;\n        temp = temp.next;\n        p2 = p2.next;\n      }\n    }\n    if (p1) temp.next = p1;\n    if (p2) temp.next = p2;\n    return first.next;\n  };\n  return merge(0, len - 1);\n}}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-3---cpp",children:"\u9898\u89e3 3 - cpp"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-08-12"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a16ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a12.67MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5806\u5b58\u50a8\u6bcf\u4e2a\u5934\u8282\u70b9\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        ListNode *head = new ListNode(), *p = head;\n        auto cmp = [&](ListNode* n1, ListNode* n2) {\n            return n2->val < n1->val;\n        };\n        priority_queue<ListNode*, vector<ListNode*>, decltype(cmp)> q(cmp);\n        for (auto &node : lists) {\n            if (node) q.push(node);\n        }\n        while (q.size()) {\n            auto node = q.top();\n            q.pop();\n            p->next = node;\n            p = p->next;\n            if (node->next) q.push(node->next);\n        }\n        return head->next;\n    }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-4---python",children:"\u9898\u89e3 4 - python"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-08-12"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a136ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a19.82MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"ListNode.__lt__ = lambda a, b: a.val < b.val\n    class Solution:\n        def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n            head = ListNode()\n            p = head\n            q = []\n            for node in lists:\n                if node:\n                    print(node)\n                    heappush(q, node)\n    \n            while len(q):\n                node = heappop(q)\n                p.next = node\n                p = p.next\n                if node.next:\n                    heappush(q, node.next)\n            return head.next\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-5---rust",children:"\u9898\u89e3 5 - rust"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-08-12"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a4ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a3.25MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use std::cmp::{Ord, Ordering, PartialOrd};\nimpl Ord for ListNode {\n    fn cmp(&self, other: &Self) -> Ordering {\n        other.val.cmp(&self.val)\n    }\n}\nimpl PartialOrd for ListNode {\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n        other.val.partial_cmp(&self.val)\n    }\n}\nimpl Solution {\n    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {\n        let mut head = Some(Box::new(ListNode::new(0)));\n        let mut p = head.as_mut().unwrap();\n        let mut q = std::collections::BinaryHeap::new();\n        for node in lists {\n            if let Some(node) = node {\n                q.push(node);\n            }\n        }\n        while let Some(mut node) = q.pop() {\n            let next = node.next.take();\n            p.next = Some(node);\n            p = p.next.as_mut().unwrap();\n            if let Some(next) = next {\n                q.push(next);\n            }\n        }\n        head.unwrap().next\n    }\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},31503:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var s=t(30758);const l={},i=s.createContext(l);function d(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);