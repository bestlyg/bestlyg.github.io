"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[64304],{28932:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var i=t(86070),l=t(25710);const r={},s="102.\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",o={id:"leetcode/101-200/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",title:"102.\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",description:"\u94fe\u63a5\uff1a102.\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",source:"@site/docs/leetcode/101-200/102.\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386.md",sourceDirName:"leetcode/101-200",slug:"/leetcode/101-200/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",permalink:"/docs/leetcode/101-200/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:102,frontMatter:{},sidebar:"journal",previous:{title:"101.\u5bf9\u79f0\u4e8c\u53c9\u6811",permalink:"/docs/leetcode/101-200/\u5bf9\u79f0\u4e8c\u53c9\u6811"},next:{title:"103.\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386",permalink:"/docs/leetcode/101-200/\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386"}},d={},a=[{value:"\u9898\u89e3 1 - java",id:"\u9898\u89e3-1---java",level:2},{value:"\u9898\u89e3 2 - java",id:"\u9898\u89e3-2---java",level:2},{value:"\u9898\u89e3 3 - javascript",id:"\u9898\u89e3-3---javascript",level:2},{value:"\u9898\u89e3 4 - c",id:"\u9898\u89e3-4---c",level:2},{value:"\u9898\u89e3 5 - python",id:"\u9898\u89e3-5---python",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"102\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",children:"102.\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,i.jsx)(n.a,{href:"https://leetcode.cn/problems/binary-tree-level-order-traversal",children:"102.\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"}),(0,i.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,i.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u6811\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u4e8c\u53c9\u6811",(0,i.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u6309\u5c42\u6b21\u904d\u5386\u7684\u8282\u70b9\u503c\u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\u9898\u89e3-1---java",children:"\u9898\u89e3 1 - java"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2020-02-21"}),"\n",(0,i.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a2ms"}),"\n",(0,i.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a39.6MB"}),"\n",(0,i.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"}),"\n",(0,i.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u8fed\u4ee3\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Solution {\n   \tpublic List<List<Integer>> levelOrder(TreeNode root) {\n\t\tList<List<Integer>> list = new LinkedList<List<Integer>>();\n\t\tif (root == null)\n\t\t\treturn list;\n\t\tList<Integer> tmplist = new LinkedList<Integer>();\n\t\tint size=1;\n\t\tQueue<TreeNode> queue = new LinkedList<>();\n\t\tqueue.offer(root);\n\t\twhile (!queue.isEmpty()) {\n\t\t\tTreeNode node = queue.poll();\n\t\t\ttmplist.add(node.val);\n\t\t\tif(node.left!=null)queue.offer(node.left);\n\t\t\tif(node.right!=null)queue.offer(node.right);\n\t\t\tsize--;\n\t\t\tif(size==0) {\n\t\t\t\tsize=queue.size();\n\t\t\t\tlist.add(tmplist);\n\t\t\t\ttmplist=new LinkedList<Integer>();\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u9898\u89e3-2---java",children:"\u9898\u89e3 2 - java"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2020-02-21"}),"\n",(0,i.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a1ms"}),"\n",(0,i.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a39.3MB"}),"\n",(0,i.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"}),"\n",(0,i.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Solution {\n   \tLinkedList<List<Integer>> list = new LinkedList<List<Integer>>();\n\tpublic List<List<Integer>> levelOrder(TreeNode root) {\n\t\tif (root == null)\n\t\t\treturn list;\n\t\tinLevelOrder(root,0);\n\t\treturn list;\n\t}\n\tpublic void inLevelOrder(TreeNode node,int level){\n\t\tif(list.size()==level) {\n\t\t\tlist.add(new ArrayList<Integer>());\n\t\t}\n\t\tlist.get(level).add(node.val);\n\t\tif(node.left!=null)\n\t\tinLevelOrder(node.left, 1+level);\n\t\tif(node.right!=null)\n\t\tinLevelOrder(node.right, 1+level);\n\t}\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u9898\u89e3-3---javascript",children:"\u9898\u89e3 3 - javascript"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2020-02-21"}),"\n",(0,i.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a72ms"}),"\n",(0,i.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a34.8MB"}),"\n",(0,i.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1ajavascript"}),"\n",(0,i.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u8fed\u4ee3\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n  if (root === null) return [];\n  const queue = [root];\n  const res = [[root.val]];\n  let size = 1;\n  while (queue.length !== 0) {\n    const node = queue.shift();\n    if (node.left !== null) queue.push(node.left);\n    if (node.right !== null) queue.push(node.right);\n    if (--size === 0) {\n      if (queue.length !== 0) res.push(queue.map(node => node.val));\n      size = queue.length;\n    }\n  }\n  return res;\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u9898\u89e3-4---c",children:"\u9898\u89e3 4 - c"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2021-11-27"}),"\n",(0,i.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a8ms"}),"\n",(0,i.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a7.3MB"}),"\n",(0,i.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1ac"}),"\n",(0,i.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"#define MAX 2000\nint** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\n    int **arr = (int **)malloc(sizeof(int) * MAX);\n    *returnSize = 0;\n    *returnColumnSizes = (int *)malloc(sizeof(int) * MAX);\n    if (!root) return arr;\n    // \u7ef4\u62a4\u961f\u5217\u50a8\u5b58\u8282\u70b9\u4fe1\u606f\n    struct TreeNode *q[2000];\n    q[0] = root;\n    // \u7ef4\u62a4\u961f\u5217\u5934\u5c3e\u6307\u9488\n    int head = 0, tail = 1;\n    // \u7ef4\u62a4\u5f53\u524d\u5c42\u7684\u5143\u7d20\u6570\u91cf\uff0c\u5f53\u524d\u904d\u5386\u7684\u5c42\u7ea7\n    int size = 1, height = 1;\n    arr[0] = (int *)malloc(sizeof(int));\n    arr[0][0] = root->val;\n    (*returnColumnSizes)[0] = 1;\n    while (head != tail) {\n        // \u6bcf\u6b21\u51fa\u961f\u4e00\u4e2a\u8282\u70b9\n        struct TreeNode *node = q[head++];\n        // \u82e5\u5de6\u8282\u70b9\u4e0d\u4e3a\u7a7a\u5219\u5165\u961f\n        if (node->left) q[tail++] = node->left;\n        // \u82e5\u53f3\u8282\u70b9\u4e0d\u4e3a\u7a7a\u5219\u5165\u961f\n        if (node->right) q[tail++] = node->right;\n        // \u82e5\u5f53\u524d\u5c42\u65e0\u5143\u7d20\uff0c\u8bf4\u660e\u961f\u5217\u91cc\u90fd\u662f\u4e0b\u4e00\u5c42\u7684\u5143\u7d20\n        if (--size == 0) {\n            size = tail - head;\n            *returnSize += 1;\n            (*returnColumnSizes)[height] = size;\n            arr[height] = (int *)malloc(sizeof(int) * size);\n            for(int i = head; i < tail; i++) arr[height][i - head] = q[i]->val;\n            height++;\n        }\n    }\n    return arr;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u9898\u89e3-5---python",children:"\u9898\u89e3 5 - python"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2024-02-14"}),"\n",(0,i.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a44ms"}),"\n",(0,i.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a17.13MB"}),"\n",(0,i.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,i.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","bfs\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if not root: return []\n        q = deque() \n        q.append(root)\n        size = 1\n        ans = [[root.val]]\n        while q:\n            node = q.popleft()\n            if node.left: q.append(node.left)\n            if node.right: q.append(node.right)\n            size -= 1\n            if size == 0:\n                size = len(q)\n                if q: ans.append([node.val for node in q])\n        return ans\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},25710:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(30758);const l={},r=i.createContext(l);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);