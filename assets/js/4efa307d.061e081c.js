"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[31461],{13725:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>a,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"leetcode/901-1000/\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668","title":"919.\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668","description":"\u94fe\u63a5\uff1a919.\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668","source":"@site/docs/leetcode/901-1000/919.\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668.md","sourceDirName":"leetcode/901-1000","slug":"/leetcode/901-1000/\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668","permalink":"/docs/leetcode/901-1000/\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":919,"frontMatter":{},"sidebar":"journal","previous":{"title":"918.\u73af\u5f62\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c","permalink":"/docs/leetcode/901-1000/\u73af\u5f62\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},"next":{"title":"921.\u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0","permalink":"/docs/leetcode/901-1000/\u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0"}}');var l=t(86070),o=t(31503);const s={},i="919.\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668",c={},d=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - rust",id:"\u9898\u89e3-2---rust",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"919\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668",children:"919.\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,l.jsx)(n.a,{href:"https://leetcode.cn/problems/complete-binary-tree-inserter",children:"919.\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668"}),(0,l.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,l.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u6811\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u8bbe\u8ba1\u3001\u4e8c\u53c9\u6811",(0,l.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u8bbe\u8ba1\u4e00\u79cd\u7b97\u6cd5\uff0c\u5c06\u4e00\u4e2a\u65b0\u8282\u70b9\u63d2\u5165\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u4e8c\u53c9\u6811\u4e2d\uff0c\u5e76\u5728\u63d2\u5165\u540e\u4fdd\u6301\u5176\u5b8c\u6574\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-07-25"}),"\n",(0,l.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2.1MB"}),"\n",(0,l.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,l.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5229\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u7279\u6027\uff0c\u5217\u8868\u5feb\u901f\u67e5\u627e\u7236\u4eb2\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"class CBTInserter {\n   public:\n    TreeNode* root;\n    vector<TreeNode*> list;\n    CBTInserter(TreeNode* _root) {\n        this->root = _root;\n        queue<TreeNode*> q;\n        q.push(root);\n        list.push_back(root);\n        while (q.size()) {\n            TreeNode* node = q.front();\n            q.pop();\n            if (node->left) {\n                q.push(node->left);\n                list.push_back(node->left);\n            }\n            if (node->right) {\n                q.push(node->right);\n                list.push_back(node->right);\n            }\n        }\n    }\n    int insert(int val) {\n        int idx = list.size(), pidx = idx / 2 - (idx & 1 ? 0 : 1);\n        list.push_back(new TreeNode(val));\n        if (idx & 1)\n            list[pidx]->left = list[idx];\n        else\n            list[pidx]->right = list[idx];\n        return list[pidx]->val;\n    }\n    TreeNode* get_root() { return root; }\n};\n"})}),"\n",(0,l.jsx)(n.h2,{id:"\u9898\u89e3-2---rust",children:"\u9898\u89e3 2 - rust"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-07-25"}),"\n",(0,l.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2.5MB"}),"\n",(0,l.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,l.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5229\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u7279\u6027\uff0c\u5217\u8868\u5feb\u901f\u67e5\u627e\u7236\u4eb2\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:"use std::cell::RefCell;\nuse std::collections::VecDeque;\nuse std::rc::Rc;\nstruct CBTInserter {\n    root: Rc<RefCell<TreeNode>>,\n    list: RefCell<Vec<Rc<RefCell<TreeNode>>>>,\n}\nimpl CBTInserter {\n    fn new(root: Option<Rc<RefCell<TreeNode>>>) -> Self {\n        let root = root.unwrap();\n        let list: RefCell<Vec<Rc<RefCell<TreeNode>>>> = RefCell::new(Vec::new());\n        {\n            let mut list = list.borrow_mut();\n            let mut q: VecDeque<Rc<RefCell<TreeNode>>> = VecDeque::new();\n            q.push_back(root.clone());\n            list.push(root.clone());\n            while q.len() > 0 {\n                let node = q.pop_front().unwrap();\n                if node.as_ref().borrow().left.is_some() {\n                    q.push_back(node.as_ref().borrow().left.as_ref().unwrap().clone());\n                    list\n                        .push(node.as_ref().borrow().left.as_ref().unwrap().clone());\n                }\n                if node.as_ref().borrow().right.is_some() {\n                    q.push_back(node.as_ref().borrow().right.as_ref().unwrap().clone());\n                    list\n                        .push(node.as_ref().borrow().right.as_ref().unwrap().clone());\n                }\n            }\n        }\n        Self { root, list }\n    }\n    fn insert(&self, val: i32) -> i32 {\n        let mut list = self.list.borrow_mut();\n        let idx = list.len();\n        let pidx = if idx & 1 == 1 { idx / 2 } else { idx / 2 - 1 };\n        let node = Rc::new(RefCell::new(TreeNode::new(val)));\n        list.push(node.clone());\n        let mut parent = list.get(pidx).unwrap().as_ref().borrow_mut();\n        if idx & 1 == 1 {\n            parent.left = Some(node.clone());\n        } else {\n            parent.right = Some(node.clone());\n        }\n        parent.val\n    }\n    fn get_root(&self) -> Option<Rc<RefCell<TreeNode>>> {\n        Some(self.root.clone())\n    }\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},31503:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(30758);const l={},o=r.createContext(l);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);