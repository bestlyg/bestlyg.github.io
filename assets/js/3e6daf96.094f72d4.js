"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[90033],{42754:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>a,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var s=t(86070),l=t(25710);const r={},i="2673.\u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7",o={id:"leetcode/2601-2700/\u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7",title:"2673.\u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7",description:"\u94fe\u63a5\uff1a2673.\u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7",source:"@site/docs/leetcode/2601-2700/2673.\u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7.md",sourceDirName:"leetcode/2601-2700",slug:"/leetcode/2601-2700/\u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7",permalink:"/web/site/docs/leetcode/2601-2700/\u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2673,frontMatter:{},sidebar:"journal",previous:{title:"2672.\u6709\u76f8\u540c\u989c\u8272\u7684\u76f8\u90bb\u5143\u7d20\u6570\u76ee",permalink:"/web/site/docs/leetcode/2601-2700/\u6709\u76f8\u540c\u989c\u8272\u7684\u76f8\u90bb\u5143\u7d20\u6570\u76ee"},next:{title:"2675.\u5c06\u5bf9\u8c61\u6570\u7ec4\u8f6c\u6362\u4e3a\u77e9\u9635",permalink:"/web/site/docs/leetcode/2601-2700/\u5c06\u5bf9\u8c61\u6570\u7ec4\u8f6c\u6362\u4e3a\u77e9\u9635"}},c={},d=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - rust",id:"\u9898\u89e3-3---rust",level:2},{value:"\u9898\u89e3 4 - python",id:"\u9898\u89e3-4---python",level:2}];function h(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"2673\u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7",children:"2673.\u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,s.jsx)(e.a,{href:"https://leetcode.cn/problems/make-costs-of-paths-equal-in-a-binary-tree",children:"2673.\u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7"}),(0,s.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1a\u4e2d\u7b49",(0,s.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u8d2a\u5fc3\u3001\u6811\u3001\u6570\u7ec4\u3001\u52a8\u6001\u89c4\u5212\u3001\u4e8c\u53c9\u6811",(0,s.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u4f60\u7684\u76ee\u6807\u662f\u8ba9\u6839\u5230\u6bcf\u4e00\u4e2a \u53f6\u5b50\u7ed3\u70b9 \u7684\u8def\u5f84\u503c\u76f8\u7b49\u3002\u8bf7\u4f60\u8fd4\u56de \u6700\u5c11 \u9700\u8981\u6267\u884c\u589e\u52a0\u64cd\u4f5c\u591a\u5c11\u6b21\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-05-07"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a168ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a132MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","dfs\u6bcf\u6b21\u7edf\u8ba1\u5de6\u53f3\u5b50\u6811\u7684\u5dee\u503c\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int minIncrements(int n, vector<int>& cost) {\n        int level = log2(n + 1), res = 0;\n        function<int(int, int)> dfs = [&](int root, int l) -> int {\n            if (l == level) return cost[root];\n            int left = dfs(root * 2 + 1, l + 1), right = dfs(root * 2 + 2, l + 1);\n            if (left == right) return left + cost[root];\n            res += abs(right - left);\n            return max(left, right) + cost[root];\n        };\n        dfs(0, 1);\n        return res;\n    }\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-05-07"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a324ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a48.6MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def minIncrements(self, n: int, cost: List[int]) -> int:\n        level = log2(n+1)\n        res = 0\n\n        def dfs(root: int, l: int) -> int:\n            nonlocal res\n            if l == level : return cost[root]\n            left = dfs(root * 2 + 1, l + 1)\n            right = dfs(root * 2 + 2, l + 1)\n            if left == right :return left + cost[root]\n            res += abs(left -right)\n            return max(left, right ) + cost[root]\n        dfs(0, 1)\n        return res\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-3---rust",children:"\u9898\u89e3 3 - rust"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-05-07"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a24ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a3.4MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:"impl Solution {\n    pub fn min_increments(n: i32, cost: Vec<i32>) -> i32 {        \n        let level = ((n + 1) as f64).log2() as u32;\n        let mut res = 0;\n        fn dfs(cost: &Vec<i32>, level: u32, res: &mut i32, root: usize, l: u32) -> i32 {\n            if l == level {\n                cost[root]\n            } else {\n                let left = dfs(cost, level, res, root * 2 + 1, l + 1);\n                let right = dfs(cost, level, res, root * 2 + 2, l + 1);\n                if left == right {\n                    left + cost[root]\n                } else {\n                    *res += (right - left).abs();\n                    left.max(right) + cost[root]\n                }\n            }\n        }\n        dfs(&cost, level, &mut res, 0, 1);\n        res\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-4---python",children:"\u9898\u89e3 4 - python"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2024-02-28"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a233ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a45.47MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","dfs\u65f6\u8bb0\u5f55\u5de6\u53f3\u7684\u8282\u70b9\u7684\u503c\uff0c\u8fdb\u884c\u904d\u5386\u548c\u5e73\u8861\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def minIncrements(self, n: int, cost: List[int]) -> int:\n        ans = 0\n        def dfs(node: int) -> int:\n            nonlocal ans\n            if node * 2 > n: return cost[node - 1]\n            l, r = dfs(node * 2), dfs(node * 2 + 1)\n            maxn = max(l, r)\n            ans += 2 * maxn - l - r\n            return maxn + cost[node - 1]\n        dfs(1)\n        return ans\n"})})]})}function a(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}},25710:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var s=t(30758);const l={},r=s.createContext(l);function i(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:i(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);