"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[99440],{98568:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"leetcode/501-600/\u56db\u53c9\u6811\u4ea4\u96c6","title":"558.\u56db\u53c9\u6811\u4ea4\u96c6","description":"\u94fe\u63a5\uff1a558.\u56db\u53c9\u6811\u4ea4\u96c6","source":"@site/docs/leetcode/501-600/558.\u56db\u53c9\u6811\u4ea4\u96c6.md","sourceDirName":"leetcode/501-600","slug":"/leetcode/501-600/\u56db\u53c9\u6811\u4ea4\u96c6","permalink":"/docs/leetcode/501-600/\u56db\u53c9\u6811\u4ea4\u96c6","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":558,"frontMatter":{},"sidebar":"journal","previous":{"title":"557.\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcdIII","permalink":"/docs/leetcode/501-600/\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcdIII"},"next":{"title":"559.N\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6","permalink":"/docs/leetcode/501-600/N\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"}}');var o=n(25105),s=n(8556);const l={},a="558.\u56db\u53c9\u6811\u4ea4\u96c6",d={},i=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"558\u56db\u53c9\u6811\u4ea4\u96c6",children:"558.\u56db\u53c9\u6811\u4ea4\u96c6"})}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["\u94fe\u63a5\uff1a",(0,o.jsx)(t.a,{href:"https://leetcode.cn/problems/logical-or-of-two-binary-grids-represented-as-quad-trees",children:"558.\u56db\u53c9\u6811\u4ea4\u96c6"}),(0,o.jsx)(t.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,o.jsx)(t.br,{}),"\n","\u6807\u7b7e\uff1a\u6811\u3001\u5206\u6cbb",(0,o.jsx)(t.br,{}),"\n","\u7b80\u4ecb\uff1a","\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u8868\u793a n * n \u4e8c\u8fdb\u5236\u77e9\u9635\u7684\u56db\u53c9\u6811\uff0c\u5b83\u662f quadTree1 \u548c quadTree2 \u6240\u8868\u793a\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u77e9\u9635\u8fdb\u884c \u6309\u4f4d\u903b\u8f91\u6216\u8fd0\u7b97 \u7684\u7ed3\u679c\u3002"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-07-15"}),"\n",(0,o.jsx)(t.li,{children:"\u6267\u884c\u7528\u65f6\uff1a24ms"}),"\n",(0,o.jsx)(t.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a16.2MB"}),"\n",(0,o.jsx)(t.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,o.jsxs)(t.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5206\u6cbb,\u5982\u679c\u4e00\u4e2a\u53f6\u5b50\u4e14 true,\u5219\u4e0e\u8be5\u8282\u70b9\u76f8\u540c,\u5982\u679c false,\u5219\u4e0e\u53e6\u4e00\u4e2a\u8282\u70b9\u76f8\u540c,\u5426\u5219\u9012\u5f52\u3002"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"class Solution {\n   public:\n    Node *intersect(Node *quadTree1, Node *quadTree2) {\n        if (quadTree1->isLeaf) {\n            if (quadTree1->val)\n                return new Node(true, true);\n            else\n                return new Node(quadTree2->val, quadTree2->isLeaf,\n                                quadTree2->topLeft, quadTree2->topRight,\n                                quadTree2->bottomLeft, quadTree2->bottomRight);\n        }\n        if (quadTree2->isLeaf) {\n            if (quadTree2->val)\n                return new Node(true, true);\n            else\n                return new Node(true, false, quadTree1->topLeft,\n                                quadTree1->topRight, quadTree1->bottomLeft,\n                                quadTree1->bottomRight);\n        }\n        Node *tl = intersect(quadTree1->topLeft, quadTree2->topLeft),\n             *tr = intersect(quadTree1->topRight, quadTree2->topRight),\n             *bl = intersect(quadTree1->bottomLeft, quadTree2->bottomLeft),\n             *br = intersect(quadTree1->bottomRight, quadTree2->bottomRight);\n        if (tl->isLeaf && tr->isLeaf && bl->isLeaf && br->isLeaf &&\n            tl->val == tr->val && tl->val == bl->val && tl->val == br->val)\n            return new Node(tl->val, true);\n        else\n            return new Node(false, false, tl, tr, bl, br);\n    }\n};\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8556:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var r=n(58101);const o={},s=r.createContext(o);function l(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);