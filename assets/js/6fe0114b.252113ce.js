"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[1580],{62166:(n,s,e)=>{e.r(s),e.d(s,{assets:()=>u,contentTitle:()=>t,default:()=>d,frontMatter:()=>l,metadata:()=>m,toc:()=>c});var i=e(86070),r=e(25710);const l={},t="1031.\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c",m={id:"leetcode/1001-1100/\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c",title:"1031.\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c",description:"\u94fe\u63a5\uff1a1031.\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c",source:"@site/docs/leetcode/1001-1100/1031.\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c.md",sourceDirName:"leetcode/1001-1100",slug:"/leetcode/1001-1100/\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c",permalink:"/docs/leetcode/1001-1100/\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1031,frontMatter:{},sidebar:"journal",previous:{title:"1030.\u8ddd\u79bb\u987a\u5e8f\u6392\u5217\u77e9\u9635\u5355\u5143\u683c",permalink:"/docs/leetcode/1001-1100/\u8ddd\u79bb\u987a\u5e8f\u6392\u5217\u77e9\u9635\u5355\u5143\u683c"},next:{title:"1032.\u5b57\u7b26\u6d41",permalink:"/docs/leetcode/1001-1100/\u5b57\u7b26\u6d41"}},u={},c=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - cpp",id:"\u9898\u89e3-2---cpp",level:2},{value:"\u9898\u89e3 3 - python",id:"\u9898\u89e3-3---python",level:2},{value:"\u9898\u89e3 4 - rust",id:"\u9898\u89e3-4---rust",level:2}];function o(n){const s={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"1031\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c",children:"1031.\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"})}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:["\u94fe\u63a5\uff1a",(0,i.jsx)(s.a,{href:"https://leetcode.cn/problems/maximum-sum-of-two-non-overlapping-subarrays",children:"1031.\u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"}),(0,i.jsx)(s.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,i.jsx)(s.br,{}),"\n","\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u52a8\u6001\u89c4\u5212\u3001\u6ed1\u52a8\u7a97\u53e3",(0,i.jsx)(s.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e24\u4e2a\u6574\u6570 firstLen \u548c secondLen\uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u4e24\u4e2a\u975e\u91cd\u53e0 \u5b50\u6570\u7ec4 \u4e2d\u5143\u7d20\u7684\u6700\u5927\u548c\uff0c\u957f\u5ea6\u5206\u522b\u4e3a firstLen \u548c secondLen \u3002"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-01-14"}),"\n",(0,i.jsx)(s.li,{children:"\u6267\u884c\u7528\u65f6\uff1a4ms"}),"\n",(0,i.jsx)(s.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a8.1MB"}),"\n",(0,i.jsx)(s.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,i.jsxs)(s.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5206\u522b\u8ba1\u7b97\u5de6\u53f3\u3002"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int maxSumTwoNoOverlap(vector<int>& nums, int firstLen, int secondLen) {\n        int n = nums.size(), lmax[n + 1], mmax[n + 1];\n        memset(lmax, 0, sizeof(lmax));\n        memset(mmax, 0, sizeof(mmax));\n        for (int i = n - 1, lsum = 0, msum = 0; i >= 0; i--) {\n            lsum += nums[i];\n            msum += nums[i];\n            if (i + firstLen < n) lsum -= nums[i + firstLen];\n            if (i + secondLen < n) msum -= nums[i + secondLen];\n            if (i + firstLen <= n) lmax[i] = max(lmax[i + 1], lsum); \n            if (i + secondLen <= n) mmax[i] = max(mmax[i + 1], msum); \n        }\n        int ans = 0;\n        for (int i = 0, lsum = 0, msum = 0; i < n; i++) {\n            lsum += nums[i];\n            msum += nums[i];\n            if (i >= firstLen) lsum -= nums[i - firstLen];\n            if (i >= secondLen) msum -= nums[i - secondLen];\n            ans = max(ans, lsum + mmax[i + 1]);\n            ans = max(ans, msum + lmax[i + 1]);\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,i.jsx)(s.h2,{id:"\u9898\u89e3-2---cpp",children:"\u9898\u89e3 2 - cpp"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-04-26"}),"\n",(0,i.jsx)(s.li,{children:"\u6267\u884c\u7528\u65f6\uff1a12ms"}),"\n",(0,i.jsx)(s.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a8.4MB"}),"\n",(0,i.jsx)(s.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,i.jsxs)(s.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u904d\u5386\u3002"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-cpp",children:"vector<int> get_sums(vector<int> &arr) {\n    vector<int> sums(1, 0);\n    for (auto &num : arr) sums.push_back(sums.back() + num);\n    return sums;\n}\nclass Solution {\npublic:\n    int maxSumTwoNoOverlap(vector<int>& nums, int firstLen, int secondLen) {\n        int n = nums.size(), res = 0;\n        auto sums = get_sums(nums);\n        for (int i = 0; i + firstLen <= n; i++) {\n            int num = sums[i + firstLen] - sums[i];\n            for (int j = 0; j + secondLen < i; j++) res = max(res, sums[j + secondLen] - sums[j] + num);\n            for (int j = i + firstLen; j + secondLen <= n; j++) res = max(res, sums[j + secondLen] - sums[j] + num);\n        }\n        return res;\n    }\n};\n"})}),"\n",(0,i.jsx)(s.h2,{id:"\u9898\u89e3-3---python",children:"\u9898\u89e3 3 - python"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-04-26"}),"\n",(0,i.jsx)(s.li,{children:"\u6267\u884c\u7528\u65f6\uff1a260ms"}),"\n",(0,i.jsx)(s.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a15MB"}),"\n",(0,i.jsx)(s.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,i.jsxs)(s.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"class Solution:\n    def maxSumTwoNoOverlap(self, nums: List[int], firstLen: int, secondLen: int) -> int:\n        sums = [0]\n        for num in nums:\n            sums.append(sums[-1] + num)\n        n = len(nums)\n        res = i = 0\n        while i + firstLen <= n:\n            num = sums[i+firstLen] - sums[i]\n            j = 0\n            while j + secondLen < i:\n                res = max(res, sums[j + secondLen] - sums[j] + num)\n                j += 1\n            j = i + firstLen\n            while j + secondLen <= n:\n                res = max(res, sums[j + secondLen] - sums[j] + num)\n                j += 1\n            i += 1\n        return res\n"})}),"\n",(0,i.jsx)(s.h2,{id:"\u9898\u89e3-4---rust",children:"\u9898\u89e3 4 - rust"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-04-26"}),"\n",(0,i.jsx)(s.li,{children:"\u6267\u884c\u7528\u65f6\uff1a4ms"}),"\n",(0,i.jsx)(s.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2.2MB"}),"\n",(0,i.jsx)(s.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,i.jsxs)(s.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-rust",children:"fn get_sums(arr: &Vec<i32>) -> Vec<i32> {\n    let mut sums = vec![0];\n    for num in arr {\n        sums.push(sums.last().unwrap() + *num);\n    }\n    sums\n}\n\nimpl Solution {\n    pub fn max_sum_two_no_overlap(nums: Vec<i32>, first_len: i32, second_len: i32) -> i32 {\n        use std::cmp::max;\n        let sums = get_sums(&nums);\n        let (first_len, second_len) = (first_len as usize, second_len as usize);\n        let n = nums.len();\n        let mut res = 0;\n        let mut i = 0;\n        while i + first_len <= n {\n            let num = sums[i + first_len] - sums[i];\n            let mut j = 0;\n            while j + second_len < i {\n                res = max(res, sums[j + second_len] - sums[j] + num);\n                j += 1;\n            }\n            j = i + first_len;\n            while j + second_len <= n {\n                res = max(res, sums[j + second_len] - sums[j] + num);\n                j += 1;\n            }\n            i += 1\n        }\n        res\n    }\n}\n"})})]})}function d(n={}){const{wrapper:s}={...(0,r.R)(),...n.components};return s?(0,i.jsx)(s,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}},25710:(n,s,e)=>{e.d(s,{R:()=>t,x:()=>m});var i=e(30758);const r={},l=i.createContext(r);function t(n){const s=i.useContext(l);return i.useMemo((function(){return"function"==typeof n?n(s):{...s,...n}}),[s,n])}function m(n){let s;return s=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),i.createElement(l.Provider,{value:s},n.children)}}}]);