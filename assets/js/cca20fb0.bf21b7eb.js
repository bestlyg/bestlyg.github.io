"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[7532],{72001:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"leetcode/1701-1800/\u8bbe\u8ba1\u4e00\u4e2a\u9a8c\u8bc1\u7cfb\u7edf","title":"1797.\u8bbe\u8ba1\u4e00\u4e2a\u9a8c\u8bc1\u7cfb\u7edf","description":"\u94fe\u63a5\uff1a1797.\u8bbe\u8ba1\u4e00\u4e2a\u9a8c\u8bc1\u7cfb\u7edf","source":"@site/docs/leetcode/1701-1800/1797.\u8bbe\u8ba1\u4e00\u4e2a\u9a8c\u8bc1\u7cfb\u7edf.md","sourceDirName":"leetcode/1701-1800","slug":"/leetcode/1701-1800/\u8bbe\u8ba1\u4e00\u4e2a\u9a8c\u8bc1\u7cfb\u7edf","permalink":"/docs/leetcode/1701-1800/\u8bbe\u8ba1\u4e00\u4e2a\u9a8c\u8bc1\u7cfb\u7edf","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1797,"frontMatter":{},"sidebar":"journal","previous":{"title":"1796.\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e8c\u5927\u7684\u6570\u5b57","permalink":"/docs/leetcode/1701-1800/\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e8c\u5927\u7684\u6570\u5b57"},"next":{"title":"1799.N\u6b21\u64cd\u4f5c\u540e\u7684\u6700\u5927\u5206\u6570\u548c","permalink":"/docs/leetcode/1701-1800/N\u6b21\u64cd\u4f5c\u540e\u7684\u6700\u5927\u5206\u6570\u548c"}}');var r=t(86070),s=t(31503);const l={},o="1797.\u8bbe\u8ba1\u4e00\u4e2a\u9a8c\u8bc1\u7cfb\u7edf",c={},d=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - rust",id:"\u9898\u89e3-3---rust",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"1797\u8bbe\u8ba1\u4e00\u4e2a\u9a8c\u8bc1\u7cfb\u7edf",children:"1797.\u8bbe\u8ba1\u4e00\u4e2a\u9a8c\u8bc1\u7cfb\u7edf"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,r.jsx)(n.a,{href:"https://leetcode.cn/problems/design-authentication-manager",children:"1797.\u8bbe\u8ba1\u4e00\u4e2a\u9a8c\u8bc1\u7cfb\u7edf"}),(0,r.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,r.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u54c8\u5e0c\u8868\u3001\u94fe\u8868\u3001\u53cc\u5411\u94fe\u8868",(0,r.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u4f60\u662f\u4e00\u4f4d\u7cfb\u7edf\u7ba1\u7406\u5458\uff0c\u624b\u91cc\u6709\u4e00\u4efd\u6587\u4ef6\u5939\u5217\u8868 folder\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8981\u5220\u9664\u8be5\u5217\u8868\u4e2d\u7684\u6240\u6709 \u5b50\u6587\u4ef6\u5939\uff0c\u5e76\u4ee5 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u5269\u4e0b\u7684\u6587\u4ef6\u5939\u3002"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-02-09"}),"\n",(0,r.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a80ms"}),"\n",(0,r.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a29.4MB"}),"\n",(0,r.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,r.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u54c8\u5e0c\u5b58\u50a8\u3002"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class AuthenticationManager {\npublic:\n    int timeToLive;\n    unordered_map<string, int> m;\n    AuthenticationManager(int timeToLive): timeToLive(timeToLive) {}\n    \n    void generate(string tokenId, int currentTime) {\n        m[tokenId] = currentTime;\n    }\n    \n    void renew(string tokenId, int currentTime) {\n        if (!m.count(tokenId)) return;\n        if (currentTime - m[tokenId] >= timeToLive) m.erase(tokenId);\n        else m[tokenId] = currentTime;\n    }\n    \n    int countUnexpiredTokens(int currentTime) {\n        int ans = 0;\n        for (auto &item : m) {\n            if (currentTime - item.second < timeToLive) ans++;\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-02-09"}),"\n",(0,r.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a220ms"}),"\n",(0,r.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a16.5MB"}),"\n",(0,r.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,r.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class AuthenticationManager:\n    def __init__(self, timeToLive: int):\n        self.timeToLive = timeToLive\n        self.m = defaultdict()\n    def generate(self, tokenId: str, currentTime: int) -> None:\n        self.m[tokenId] = currentTime\n    def renew(self, tokenId: str, currentTime: int) -> None:\n        if not tokenId in self.m:\n            return\n        if currentTime - self.m[tokenId] >= self.timeToLive:\n            self.m.pop(tokenId)\n        else:\n            self.m[tokenId] = currentTime\n    def countUnexpiredTokens(self, currentTime: int) -> int:\n        ans = 0\n        for v in self.m.values():\n            if currentTime - v < self.timeToLive:\n                ans += 1\n        return ans\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u9898\u89e3-3---rust",children:"\u9898\u89e3 3 - rust"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-02-09"}),"\n",(0,r.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a20ms"}),"\n",(0,r.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a3.6MB"}),"\n",(0,r.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,r.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use std::collections::HashMap;\nstruct AuthenticationManager {\n    timeToLive: i32,\n    m: HashMap<String, i32>,\n}\nimpl AuthenticationManager {\n    fn new(timeToLive: i32) -> Self {\n        Self {\n            timeToLive,\n            m: HashMap::new(),\n        }\n    }\n    fn generate(&mut self, token_id: String, current_time: i32) {\n        if !self.m.contains_key(&token_id) {\n            self.m.insert(token_id, current_time);\n        } else {\n            *self.m.get_mut(&token_id).unwrap() = current_time;\n        }\n    }\n    fn renew(&mut self, token_id: String, current_time: i32) {\n        if self.m.contains_key(&token_id) {\n            let item = self.m.get_mut(&token_id).unwrap();\n            if current_time - *item >= self.timeToLive {\n                self.m.remove(&token_id);\n            } else {\n                *item = current_time;\n            }\n        }\n    }\n    fn count_unexpired_tokens(&self, current_time: i32) -> i32 {\n        let mut ans = 0;\n        self.m\n            .iter()\n            .map(|(_, v)| v)\n            .filter(|v| current_time - *v < self.timeToLive)\n            .collect::<Vec<&i32>>()\n            .len() as i32\n    }\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},31503:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(30758);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);