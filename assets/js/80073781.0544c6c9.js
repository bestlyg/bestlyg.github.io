"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[18135],{57908:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>u,contentTitle:()=>t,default:()=>o,frontMatter:()=>d,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"leetcode/801-900/\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c","title":"834.\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c","description":"\u94fe\u63a5\uff1a834.\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c","source":"@site/docs/leetcode/801-900/834.\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c.md","sourceDirName":"leetcode/801-900","slug":"/leetcode/801-900/\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c","permalink":"/docs/leetcode/801-900/\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":834,"frontMatter":{},"sidebar":"journal","previous":{"title":"833.\u5b57\u7b26\u4e32\u4e2d\u7684\u67e5\u627e\u4e0e\u66ff\u6362","permalink":"/docs/leetcode/801-900/\u5b57\u7b26\u4e32\u4e2d\u7684\u67e5\u627e\u4e0e\u66ff\u6362"},"next":{"title":"836.\u77e9\u5f62\u91cd\u53e0","permalink":"/docs/leetcode/801-900/\u77e9\u5f62\u91cd\u53e0"}}');var i=s(86070),r=s(31503);const d={},t="834.\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c",u={},l=[{value:"\u9898\u89e3 1 - javascript",id:"\u9898\u89e3-1---javascript",level:2},{value:"\u9898\u89e3 2 - cpp",id:"\u9898\u89e3-2---cpp",level:2},{value:"\u9898\u89e3 3 - python",id:"\u9898\u89e3-3---python",level:2},{value:"\u9898\u89e3 4 - rust",id:"\u9898\u89e3-4---rust",level:2}];function a(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"834\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c",children:"834.\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/sum-of-distances-in-tree",children:"834.\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c"}),(0,i.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1aHard",(0,i.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u56fe\u3001\u52a8\u6001\u89c4\u5212",(0,i.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u3001\u8fde\u901a\u7684\u6811\u3002\u6811\u4e2d\u6709 n \u4e2a\u6807\u8bb0\u4e3a 0...n-1 \u7684\u8282\u70b9\u4ee5\u53ca n-1\xa0\u6761\u8fb9\xa0\u3002\u7ed9\u5b9a\u6574\u6570 n \u548c\u6570\u7ec4\xa0edges\xa0\uff0c\xa0edges[i] = [ai, bi]\u8868\u793a\u6811\u4e2d\u7684\u8282\u70b9\xa0ai\xa0\u548c\xa0bi\xa0\u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002\u8fd4\u56de\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\xa0answer\xa0\uff0c\u5176\u4e2d\xa0answer[i]\xa0\u662f\u6811\u4e2d\u7b2c i \u4e2a\u8282\u70b9\u4e0e\u6240\u6709\u5176\u4ed6\u8282\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e4b\u548c\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-1---javascript",children:"\u9898\u89e3 1 - javascript"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2020-10-06"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a224ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a54.2MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1ajavascript"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","dfs\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"/**\n* @param {number} N\n* @param {number[][]} edges\n* @return {number[]}\n*/\nlet ans, sz, dp, graph;\nconst dfs = (u, f) => {\n    sz[u] = 1;\n    dp[u] = 0;\n    for (const v of graph[u]) {\n        if (v === f) {\n            continue;\n        }\n        dfs(v, u);\n        dp[u] += dp[v] + sz[v];\n        sz[u] += sz[v];\n    }\n}\nconst dfs2 = (u, f) => {\n    ans[u] = dp[u];\n    for (const v of graph[u]) {\n        if (v === f) {\n            continue;\n        }\n        const pu = dp[u], pv = dp[v];\n        const su = sz[u], sv = sz[v];\n        dp[u] -= dp[v] + sz[v];\n        sz[u] -= sz[v];\n        dp[v] += dp[u] + sz[u];\n        sz[v] += sz[u];\n        dfs2(v, u);\n        dp[u] = pu, dp[v] = pv;\n        sz[u] = su, sz[v] = sv;\n    }\n}\nvar sumOfDistancesInTree = function(N, edges) {\n    ans = new Array(N).fill(0);\n    sz = new Array(N).fill(0);\n    dp = new Array(N).fill(0);\n    graph = new Array(N).fill(0).map(v => []);\n    for (const [u, v] of edges) {\n        graph[u].push(v);\n        graph[v].push(u);\n    }\n    dfs(0, -1);\n    dfs2(0, -1);\n    return ans;\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-2---cpp",children:"\u9898\u89e3 2 - cpp"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-07-16"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a232ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a106.4MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","dfs\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"#define X first\n#define Y second\n#define pii pair<int, int>\nclass Solution {\npublic:\n    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {\n        vector<int> res(n, 0);\n        vector<vector<int>> nodes(n);\n        for (auto &edge : edges) {\n            nodes[edge[0]].push_back(edge[1]);\n            nodes[edge[1]].push_back(edge[0]);\n        }\n        // X \u603b\u5171\u6709\u51e0\u4e2a\uff0c Y \u603b\u8def\u5f84\u548c\n        vector<pii> cache(n);\n        function<pii(int, int)> find = [&](int cur, int p) -> pii {\n            if (nodes[cur].size() == 1 && nodes[cur][0] == p) return cache[cur] = make_pair(1, 1);\n            pii ans = make_pair(1, 1);\n            for (auto &child : nodes[cur]) {\n                if (child != p) {\n                    auto res = find(child, cur);\n                    ans.X += res.X;\n                    ans.Y += res.X + res.Y;\n                }\n            }\n            cache[cur] = ans;\n            return ans;\n        };\n        find(0, -1);\n        function<void(int, int, int)> dfs = [&](int cur, int p, int sum) {\n            res[cur] = sum + cache[cur].Y - cache[cur].X;\n            for (auto &child : nodes[cur]) {\n                if (child != p) dfs(child, cur, res[cur] - cache[child].Y + n - cache[child].X);\n            }\n        };\n        dfs(0, -1, 0);\n        return res;\n    }\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-3---python",children:"\u9898\u89e3 3 - python"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-07-16"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a404ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a69.3MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def sumOfDistancesInTree(self, n: int, edges: List[List[int]]) -> List[int]:\n        res = [0 for _ in range(n)]\n        nodes = [[] for _ in range(n)]\n        for edge in edges:\n            nodes[edge[0]].append(edge[1])\n            nodes[edge[1]].append(edge[0])\n        cache = [[] for _ in range(n)]\n        def find(cur: int, p: int) -> List[int]:\n            ans = [1, 1]\n            if len(nodes[cur]) == 1 and nodes[cur][0] == p:\n                cache[cur] = ans\n            else:\n                for child in nodes[cur]:\n                    if child != p:\n                        res = find(child, cur)\n                        ans[0] += res[0]\n                        ans[1] += res[0] + res[1]\n                cache[cur] = ans\n            return ans\n        find(0, -1)\n        \n        def dfs(cur: int, p: int, sum: int):\n            res[cur] = sum + cache[cur][1] - cache[cur][0]\n            for child in nodes[cur]:\n                if child != p:\n                    dfs(child, cur, res[cur] - cache[child]\n                        [1] + n - cache[child][0])\n        dfs(0, -1, 0)\n        return res\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-4---rust",children:"\u9898\u89e3 4 - rust"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-07-16"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a48ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a8.8MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"fn find(nodes: &Vec<Vec<usize>>, cache: &mut Vec<(i32, i32)>, cur: usize, p: usize) -> (i32, i32) {\n    let mut ans: (i32, i32) = (1, 1);\n    if !(nodes[cur].len() == 1 && nodes[cur][0] == p) {\n        for child in &nodes[cur] {\n            if *child != p {\n                let res = find(nodes, cache, *child, cur);\n                ans.0 += res.0;\n                ans.1 += res.0 + res.1;\n            }\n        }\n    }\n    cache[cur] = ans;\n    ans\n}\nfn dfs(\n    res: &mut Vec<i32>,\n    nodes: &Vec<Vec<usize>>,\n    cache: &Vec<(i32, i32)>,\n    n: usize,\n    cur: usize,\n    p: usize,\n    sum: i32,\n) {\n    res[cur] = sum + cache[cur].1 - cache[cur].0;\n    for child in &nodes[cur] {\n        if *child != p {\n            dfs(\n                res,\n                nodes,\n                cache,\n                n,\n                *child,\n                cur,\n                res[cur] - cache[*child].1 + (n as i32) - cache[*child].0,\n            );\n        }\n    }\n}\nimpl Solution {\n    pub fn sum_of_distances_in_tree(n: i32, edges: Vec<Vec<i32>>) -> Vec<i32> {\n        let n = n as usize;\n        let mut res = vec![0; n];\n        let mut nodes = vec![vec![]; n];\n        for edge in edges {\n            nodes[edge[0] as usize].push(edge[1] as usize);\n            nodes[edge[1] as usize].push(edge[0] as usize);\n        }\n        let mut cache = vec![(0, 0); n];\n        find(&nodes, &mut cache, 0, usize::MAX);\n        dfs(&mut res, &nodes, &cache, n, 0, usize::MAX, 0);\n        res\n    }\n}\n"})})]})}function o(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(a,{...n})}):a(n)}},31503:(n,e,s)=>{s.d(e,{R:()=>d,x:()=>t});var c=s(30758);const i={},r=c.createContext(i);function d(n){const e=c.useContext(r);return c.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:d(n.components),c.createElement(r.Provider,{value:e},n.children)}}}]);