"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[94089],{25349:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var t=r(86070),o=r(25710);const l={},i="617.\u5408\u5e76\u4e8c\u53c9\u6811",s={id:"leetcode/601-700/\u5408\u5e76\u4e8c\u53c9\u6811",title:"617.\u5408\u5e76\u4e8c\u53c9\u6811",description:"\u94fe\u63a5\uff1a617.\u5408\u5e76\u4e8c\u53c9\u6811",source:"@site/docs/leetcode/601-700/617.\u5408\u5e76\u4e8c\u53c9\u6811.md",sourceDirName:"leetcode/601-700",slug:"/leetcode/601-700/\u5408\u5e76\u4e8c\u53c9\u6811",permalink:"/web/site/docs/leetcode/601-700/\u5408\u5e76\u4e8c\u53c9\u6811",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:617,frontMatter:{},sidebar:"journal",previous:{title:"611.\u6709\u6548\u4e09\u89d2\u5f62\u7684\u4e2a\u6570",permalink:"/web/site/docs/leetcode/601-700/\u6709\u6548\u4e09\u89d2\u5f62\u7684\u4e2a\u6570"},next:{title:"621.\u4efb\u52a1\u8c03\u5ea6\u5668",permalink:"/web/site/docs/leetcode/601-700/\u4efb\u52a1\u8c03\u5ea6\u5668"}},c={},d=[{value:"\u9898\u89e3 1 - typescript",id:"\u9898\u89e3-1---typescript",level:2},{value:"\u9898\u89e3 2 - cpp",id:"\u9898\u89e3-2---cpp",level:2},{value:"\u9898\u89e3 3 - python",id:"\u9898\u89e3-3---python",level:2},{value:"\u9898\u89e3 4 - rust",id:"\u9898\u89e3-4---rust",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"617\u5408\u5e76\u4e8c\u53c9\u6811",children:"617.\u5408\u5e76\u4e8c\u53c9\u6811"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/merge-two-binary-trees",children:"617.\u5408\u5e76\u4e8c\u53c9\u6811"}),(0,t.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1a\u7b80\u5355",(0,t.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u4e8c\u53c9\u6811",(0,t.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u60f3\u8c61\u5f53\u4f60\u5c06\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u8986\u76d6\u5230\u53e6\u4e00\u4e2a\u4e0a\u65f6\uff0c\u4e24\u4e2a\u4e8c\u53c9\u6811\u7684\u4e00\u4e9b\u8282\u70b9\u4fbf\u4f1a\u91cd\u53e0\u3002\u4f60\u9700\u8981\u5c06\u4ed6\u4eec\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u4e8c\u53c9\u6811\u3002\u5408\u5e76\u7684\u89c4\u5219\u662f\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u91cd\u53e0\uff0c\u90a3\u4e48\u5c06\u4ed6\u4eec\u7684\u503c\u76f8\u52a0\u4f5c\u4e3a\u8282\u70b9\u5408\u5e76\u540e\u7684\u65b0\u503c\uff0c\u5426\u5219\u4e0d\u4e3a \xa0NULL \u7684\u8282\u70b9\u5c06\u76f4\u63a5\u4f5c\u4e3a\u65b0\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\u9898\u89e3-1---typescript",children:"\u9898\u89e3 1 - typescript"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2020-09-23"}),"\n",(0,t.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a168ms"}),"\n",(0,t.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a45.5MB"}),"\n",(0,t.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"}),"\n",(0,t.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function mergeTrees(t1: TreeNode | null, t2: TreeNode | null): TreeNode | null {\n  return merge(t1, t2);\n  function merge(t1: TreeNode | null, t2: TreeNode | null): TreeNode | null {\n    if (t1 === null && t2 === null) return null;\n    if (t1 === null) return t2;\n    if (t2 === null) return t1;\n    const node = new TreeNode(t1.val + t2.val);\n    node.left = merge(t1.left, t2.left);\n    node.right = merge(t1.right, t2.right);\n    return node;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u9898\u89e3-2---cpp",children:"\u9898\u89e3 2 - cpp"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-08-14"}),"\n",(0,t.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a36ms"}),"\n",(0,t.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a30.85MB"}),"\n",(0,t.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,t.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\u5408\u5e76\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\n        if (!root1 && !root2) return nullptr;\n        else if (root1 && !root2) return root1;\n        else if (!root1 && root2) return root2;\n        else {\n            root1->val += root2->val;\n            root1->left = mergeTrees(root1->left, root2->left);\n            root1->right = mergeTrees(root1->right, root2->right);\n            return root1;\n        }\n    }\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u9898\u89e3-3---python",children:"\u9898\u89e3 3 - python"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-08-14"}),"\n",(0,t.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a64ms"}),"\n",(0,t.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a16.15MB"}),"\n",(0,t.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,t.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not root1 and not root2:\n            return None\n        elif root1 and not root2:\n            return root1\n        elif not root1 and root2:\n            return root2\n        else:\n            root1.val += root2.val\n            root1.left = self.mergeTrees(root1.left, root2.left)\n            root1.right = self.mergeTrees(root1.right, root2.right)\n            return root1\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u9898\u89e3-4---rust",children:"\u9898\u89e3 4 - rust"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-08-14"}),"\n",(0,t.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a4ms"}),"\n",(0,t.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2.3MB"}),"\n",(0,t.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,t.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"use std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn merge_trees(\n        root1: Option<Rc<RefCell<TreeNode>>>,\n        root2: Option<Rc<RefCell<TreeNode>>>,\n    ) -> Option<Rc<RefCell<TreeNode>>> {\n        match root1 {\n            None => root2,\n            Some(mut root1) => match root2 {\n                None => Some(root1),\n                Some(root2) => {\n                    {\n                        let mut root1_ref = root1.as_ref().borrow_mut();\n                        let mut root2_ref = root2.as_ref().borrow_mut();\n                        root1_ref.val += root2_ref.val;\n                        {\n                            let child1 = root1_ref.left.take();\n                            let child2 = root2_ref.left.take();\n                            root1_ref.left = Self::merge_trees(child1, child2);\n                        }\n                        {\n                            let child1 = root1_ref.right.take();\n                            let child2 = root2_ref.right.take();\n                            root1_ref.right = Self::merge_trees(child1, child2);\n                        }\n                    }\n                    Some(root1)\n                }\n            },\n        }\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},25710:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(30758);const o={},l=t.createContext(o);function i(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);