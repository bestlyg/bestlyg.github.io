"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[25386],{12783:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>u,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"leetcode/1401-1500/\u8bfe\u7a0b\u8868IV","title":"1462.\u8bfe\u7a0b\u8868IV","description":"\u94fe\u63a5\uff1a1462.\u8bfe\u7a0b\u8868IV","source":"@site/docs/leetcode/1401-1500/1462.\u8bfe\u7a0b\u8868IV.md","sourceDirName":"leetcode/1401-1500","slug":"/leetcode/1401-1500/\u8bfe\u7a0b\u8868IV","permalink":"/docs/leetcode/1401-1500/\u8bfe\u7a0b\u8868IV","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1462,"frontMatter":{},"sidebar":"journal","previous":{"title":"1460.\u901a\u8fc7\u7ffb\u8f6c\u5b50\u6570\u7ec4\u4f7f\u4e24\u4e2a\u6570\u7ec4\u76f8\u7b49","permalink":"/docs/leetcode/1401-1500/\u901a\u8fc7\u7ffb\u8f6c\u5b50\u6570\u7ec4\u4f7f\u4e24\u4e2a\u6570\u7ec4\u76f8\u7b49"},"next":{"title":"1463.\u6458\u6a31\u6843II","permalink":"/docs/leetcode/1401-1500/\u6458\u6a31\u6843II"}}');var s=r(25105),t=r(8556);const u={},o="1462.\u8bfe\u7a0b\u8868IV",c={},d=[{value:"\u9898\u89e3 1 - rust",id:"\u9898\u89e3-1---rust",level:2},{value:"\u9898\u89e3 2 - cpp",id:"\u9898\u89e3-2---cpp",level:2},{value:"\u9898\u89e3 3 - python",id:"\u9898\u89e3-3---python",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"1462\u8bfe\u7a0b\u8868iv",children:"1462.\u8bfe\u7a0b\u8868IV"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,s.jsx)(n.a,{href:"https://leetcode.cn/problems/course-schedule-iv",children:"1462.\u8bfe\u7a0b\u8868IV"}),(0,s.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,s.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u56fe\u3001\u62d3\u6251\u6392\u5e8f",(0,s.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u4f60\u4e5f\u5f97\u5230\u4e00\u4e2a\u6570\u7ec4 queries \uff0c\u5176\u4e2d queries[j] = [uj, vj]\u3002\u5bf9\u4e8e\u7b2c j \u4e2a\u67e5\u8be2\uff0c\u60a8\u5e94\u8be5\u56de\u7b54\u8bfe\u7a0b uj \u662f\u5426\u662f\u8bfe\u7a0b vj \u7684\u5148\u51b3\u6761\u4ef6\u3002\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4 answer \uff0c\u5176\u4e2d answer[j] \u662f\u7b2c j \u4e2a\u67e5\u8be2\u7684\u7b54\u6848\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-1---rust",children:"\u9898\u89e3 1 - rust"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-12"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a60ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a3.11MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"impl Solution {\n    pub fn check_if_prerequisite(\n        num_courses: i32,\n        prerequisites: Vec<Vec<i32>>,\n        queries: Vec<Vec<i32>>,\n    ) -> Vec<bool> {\n        use std::collections::{HashMap, HashSet};\n        let num_courses = num_courses as usize;\n        let mut parr = vec![HashSet::<usize>::new(); num_courses];\n        for item in prerequisites {\n            let (item1, item2) = (item[0] as usize, item[1] as usize);\n            parr[item2].insert(item1);\n        }\n        let mut m = HashMap::new();\n        fn dfs(m: &mut HashMap<usize, HashSet<usize>>, parr: &Vec<HashSet<usize>>, idx: usize) {\n            if m.contains_key(&idx) {\n                return;\n            }\n            let mut item = HashSet::new();\n            for p in &parr[idx] {\n                item.insert(*p);\n                dfs(m, parr, *p);\n                for p in m.get(p).unwrap() {\n                    item.insert(*p);\n                }\n            }\n            m.insert(idx, item);\n        }\n        for idx in 0..num_courses {\n            dfs(&mut m, &parr, idx);\n        }\n        queries\n            .into_iter()\n            .map(|query| {\n                m.get(&(query[1] as usize))\n                    .unwrap()\n                    .contains(&(query[0] as usize))\n            })\n            .collect()\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-2---cpp",children:"\u9898\u89e3 2 - cpp"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-12"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a816ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a164.73MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u63d0\u524d\u9884\u5904\u7406\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {\n        vector<unordered_set<int>> parr(numCourses);\n        for (auto &item : prerequisites) {\n            parr[item[1]].insert(item[0]);\n        }\n        unordered_map<int, unordered_set<int>> m;\n        function<unordered_set<int>(int)> find_parent = [&](int idx) {\n            if (m.count(idx)) return m[idx];\n            unordered_set<int> res(parr[idx].begin(), parr[idx].end());\n            if (parr[idx].size()) {\n                for (auto &p : parr[idx]) {\n                    for (auto &item : find_parent(p)) {\n                        res.insert(item);\n                    }\n                }\n            }\n            return m[idx] = res;\n        };\n        for (int idx = 0; idx < numCourses; idx++) {\n            parr[idx] = find_parent(idx);\n        }\n        vector<bool> res;\n        for (auto &query : queries) {\n            res.push_back(parr[query[1]].count(query[0]));\n        }\n        return res;\n    }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-3---python",children:"\u9898\u89e3 3 - python"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-09-12"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a80ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a19.1MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def checkIfPrerequisite(self, numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        parr = [set() for _ in range(numCourses)]\n        for [item1, item2] in prerequisites:\n            parr[item2].add(item1)\n        @cache\n        def find_parent(idx: int) -> set:\n            res = set(parr[idx])\n            if len(parr[idx]):\n                for p in parr[idx]:\n                    res |= find_parent(p)\n            return res\n        for idx in range(numCourses):\n            parr[idx] = find_parent(idx)\n        return [query[0] in parr[query[1]] for query in queries]\n"})})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8556:(e,n,r)=>{r.d(n,{R:()=>u,x:()=>o});var i=r(58101);const s={},t=i.createContext(s);function u(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:u(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);