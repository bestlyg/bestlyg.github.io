"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[8436],{12016:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>a,frontMatter:()=>l,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"leetcode/2501-2600/\u6570\u7ec4\u4e58\u79ef\u4e2d\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u6570\u76ee","title":"2521.\u6570\u7ec4\u4e58\u79ef\u4e2d\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u6570\u76ee","description":"\u94fe\u63a5\uff1a2521.\u6570\u7ec4\u4e58\u79ef\u4e2d\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u6570\u76ee","source":"@site/docs/leetcode/2501-2600/2521.\u6570\u7ec4\u4e58\u79ef\u4e2d\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u6570\u76ee.md","sourceDirName":"leetcode/2501-2600","slug":"/leetcode/2501-2600/\u6570\u7ec4\u4e58\u79ef\u4e2d\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u6570\u76ee","permalink":"/docs/leetcode/2501-2600/\u6570\u7ec4\u4e58\u79ef\u4e2d\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u6570\u76ee","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2521,"frontMatter":{},"sidebar":"journal","previous":{"title":"2520.\u7edf\u8ba1\u80fd\u6574\u9664\u6570\u5b57\u7684\u4f4d\u6570","permalink":"/docs/leetcode/2501-2600/\u7edf\u8ba1\u80fd\u6574\u9664\u6570\u5b57\u7684\u4f4d\u6570"},"next":{"title":"2522.\u5c06\u5b57\u7b26\u4e32\u5206\u5272\u6210\u503c\u4e0d\u8d85\u8fc7K\u7684\u5b50\u5b57\u7b26\u4e32","permalink":"/docs/leetcode/2501-2600/\u5c06\u5b57\u7b26\u4e32\u5206\u5272\u6210\u503c\u4e0d\u8d85\u8fc7K\u7684\u5b50\u5b57\u7b26\u4e32"}}');var i=t(86070),r=t(31503);const l={},c="2521.\u6570\u7ec4\u4e58\u79ef\u4e2d\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u6570\u76ee",o={},u=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - rust",id:"\u9898\u89e3-2---rust",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"2521\u6570\u7ec4\u4e58\u79ef\u4e2d\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u6570\u76ee",children:"2521.\u6570\u7ec4\u4e58\u79ef\u4e2d\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u6570\u76ee"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/distinct-prime-factors-of-product-of-array",children:"2521.\u6570\u7ec4\u4e58\u79ef\u4e2d\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u6570\u76ee"}),(0,i.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,i.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u54c8\u5e0c\u8868\u3001\u6570\u5b66\u3001\u6570\u8bba",(0,i.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4 nums \uff0c\u5bf9 nums \u6240\u6709\u5143\u7d20\u6c42\u79ef\u4e4b\u540e\uff0c\u627e\u51fa\u5e76\u8fd4\u56de\u4e58\u79ef\u4e2d \u4e0d\u540c\u8d28\u56e0\u6570 \u7684\u6570\u76ee\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-01"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a80ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a18.3MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u904d\u5386\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int distinctPrimeFactors(vector<int>& nums) {\n        unordered_set<int> s;\n        for (auto &num : nums) {\n            load(s, num);\n        }\n        return s.size();\n    }\n    void load(unordered_set<int> &s, int num) {\n        for (int i = 2; i <= num; i++) {\n            if (num % i == 0) {\n                s.insert(i);\n                while (num % i == 0) num /= i;\n            }\n        }\n    }\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-2---rust",children:"\u9898\u89e3 2 - rust"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-01"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a84ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2.2MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u904d\u5386\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"use std::collections::HashSet;\nimpl Solution {\n    pub fn distinct_prime_factors(nums: Vec<i32>) -> i32 {\n        let mut set = HashSet::<i32>::new();\n        for num in nums {\n            Solution::load(&mut set, num);\n        }\n        set.len() as i32\n    }\n    fn load(set: &mut HashSet<i32>, num: i32) {\n        let mut num = num;\n        let mut i = 2;\n        while i <= num {\n            if i > num {\n                break;\n            }\n            if num % i == 0 {\n                set.insert(i);\n            }\n            while num % i == 0 {\n                num /= i;\n            }\n            i += 1;\n        }\n    }\n}\n"})})]})}function a(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},31503:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>c});var s=t(30758);const i={},r=s.createContext(i);function l(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);