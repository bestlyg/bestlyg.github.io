"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[99399],{55450:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>a,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var t=s(86070),r=s(25710);const i={},o="1617.\u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb",d={id:"leetcode/1601-1700/\u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb",title:"1617.\u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb",description:"\u94fe\u63a5\uff1a1617.\u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb",source:"@site/docs/leetcode/1601-1700/1617.\u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb.md",sourceDirName:"leetcode/1601-1700",slug:"/leetcode/1601-1700/\u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb",permalink:"/docs/leetcode/1601-1700/\u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1617,frontMatter:{},sidebar:"journal",previous:{title:"1616.\u5206\u5272\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f97\u5230\u56de\u6587\u4e32",permalink:"/docs/leetcode/1601-1700/\u5206\u5272\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f97\u5230\u56de\u6587\u4e32"},next:{title:"1619.\u5220\u9664\u67d0\u4e9b\u5143\u7d20\u540e\u7684\u6570\u7ec4\u5747\u503c",permalink:"/docs/leetcode/1601-1700/\u5220\u9664\u67d0\u4e9b\u5143\u7d20\u540e\u7684\u6570\u7ec4\u5747\u503c"}},l={},c=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - rust",id:"\u9898\u89e3-3---rust",level:2}];function u(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"1617\u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb",children:"1617.\u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/count-subtrees-with-max-distance-between-cities",children:"1617.\u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb"}),(0,t.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1a\u56f0\u96be",(0,t.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u4f4d\u8fd0\u7b97\u3001\u6811\u3001\u52a8\u6001\u89c4\u5212\u3001\u72b6\u6001\u538b\u7f29\u3001\u679a\u4e3e",(0,t.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u5927\u5c0f\u4e3a n-1 \u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c d \u4e2a\u5143\u7d20\uff08\u4e0b\u6807\u4ece 1 \u5f00\u59cb\uff09\u662f\u57ce\u5e02\u95f4 \u6700\u5927\u8ddd\u79bb \u6070\u597d\u7b49\u4e8e d \u7684\u5b50\u6811\u6570\u76ee\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-12"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a156ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a251.6MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u4e8c\u8fdb\u5236\u679a\u4e3e\u6240\u6709\u5b50\u6811\uff0c\u5bf9\u6bcf\u4e2a\u5b50\u6811\u6c42\u6811\u7684\u76f4\u5f84\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> countSubgraphsForEachDiameter(int n, vector<vector<int>>& edges) {\n        vector<vector<int>> nodes(n);\n        for (auto &edge : edges) {\n            nodes[edge[0] - 1].push_back(edge[1] - 1);\n            nodes[edge[1] - 1].push_back(edge[0] - 1);\n        }\n        vector<int> res(n - 1, 0);\n        for (int i = 1; i < (1 << n); i++) {\n            int root = 0, mask = i, last = 0;\n            while (((1 << root) & i) == 0) root++;\n            queue<int> q;\n            q.push(root);\n            mask &= ~(1 << root);\n            while (q.size()) {\n                int cur = q.front();\n                last = cur;\n                q.pop();\n                for (auto &next : nodes[cur]) {\n                    if (mask & (1 << next)) {\n                        mask &= ~(1 << next);\n                        q.push(next);\n                    }\n                }\n            }\n            if (mask == 0) {\n                int d = dfs(nodes, last, i & ~(1 << last));\n                if (d >= 1) res[d - 1]++;\n            }\n        }\n        return res;\n    }\n    int dfs(vector<vector<int>> &nodes, int root, int mask) {\n        if (mask == 0) return 0;\n        int res = 0;\n        for (auto &next : nodes[root]) {\n            if (mask & (1 << next)) {\n                res = max(res, dfs(nodes, next, mask & ~(1 << next)) + 1);\n            }\n        }\n        return res;\n    }\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-12"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a4088ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a14.9MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from queue import Queue\nclass Solution:\n    def countSubgraphsForEachDiameter(self, n: int, edges: List[List[int]]) -> List[int]:\n        nodes = [[] for _ in range(n)]\n        for n1, n2 in edges:\n            nodes[n1-1].append(n2-1)\n            nodes[n2-1].append(n1-1)\n        def dfs(root: int, mask: int):\n            if mask == 0:\n                return 0\n            res = 0\n            for nextNode in nodes[root]:\n                if mask & (1 << nextNode):\n                    resd = dfs(nextNode, mask & ~(1 << nextNode))\n                    if resd != -1:\n                        res = max(res, resd+1)\n            return res\n\n        res = [0] * (n-1)\n        for i in range(1, 1 << n):\n            root, mask, last = 0, i, 0\n            while ((1 << root) & i) == 0:\n                root += 1\n            q = Queue()\n            q.put(root)\n            mask &= ~(1 << root)\n            while q.qsize():\n                cur = q.get()\n                last = cur\n                for nextNode in nodes[cur]:\n                    if mask & (1 << nextNode):\n                        mask &= ~(1 << nextNode)\n                        q.put(nextNode)\n            if mask == 0:\n                d = dfs(last, i & ~(1 << last))\n                if d >= 1:\n                    res[d-1] += 1\n        return res\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9898\u89e3-3---rust",children:"\u9898\u89e3 3 - rust"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-12"}),"\n",(0,t.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a16ms"}),"\n",(0,t.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2.2MB"}),"\n",(0,t.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,t.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rust",children:"impl Solution {\n    pub fn count_subgraphs_for_each_diameter(n: i32, edges: Vec<Vec<i32>>) -> Vec<i32> {\n        let n = n as usize;\n        let mut nodes: Vec<Vec<usize>> = vec![vec![]; n];\n        for edge in edges {\n            let (n1, n2) = (edge[0] as usize, edge[1] as usize);\n            nodes[n1 - 1].push(n2 - 1);\n            nodes[n2 - 1].push(n1 - 1);\n        }\n        let mut res = vec![0; n - 1];\n        for i in 1..(1 << n) {\n            let i = i as usize;\n            let (mut root, mut mask, mut last) = (0, i, 0);\n            while ((1 << root) & i) == 0 {\n                root += 1;\n            }\n            let mut q = std::collections::VecDeque::<usize>::new();\n            q.push_back(root);\n            mask &= !(1 << root);\n            while !q.is_empty() {\n                let cur = q.pop_front().unwrap();\n                last = cur;\n                for next in nodes[cur].iter() {\n                    if (mask & (1 << next)) != 0 {\n                        mask &= !(1 << next);\n                        q.push_back(*next);\n                    }\n                }\n            }\n            if mask == 0 {\n                let d = Solution::dfs(&nodes, last, i & !(1 << last));\n                if d >= 1 {\n                    res[d - 1] += 1;\n                }\n            }\n        }\n        res\n    }\n    fn dfs(nodes: &Vec<Vec<usize>>, root: usize, mask: usize) -> usize {\n        if mask == 0 {\n            0\n        } else {\n            let mut res = 0;\n            for next in nodes[root].iter() {\n                if (mask & (1 << next)) != 0 {\n                    res = res.max(Solution::dfs(nodes, *next, mask & !(1 << *next)) + 1)\n                }\n            }\n            res\n        }\n    }\n}\n"})})]})}function a(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}},25710:(n,e,s)=>{s.d(e,{R:()=>o,x:()=>d});var t=s(30758);const r={},i=t.createContext(r);function o(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);