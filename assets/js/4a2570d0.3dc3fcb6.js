"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[6040],{35274:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>a,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=s(86070),i=s(25710);const o={},d="2508.\u6dfb\u52a0\u8fb9\u4f7f\u6240\u6709\u8282\u70b9\u5ea6\u6570\u90fd\u4e3a\u5076\u6570",r={id:"leetcode/2501-2600/\u6dfb\u52a0\u8fb9\u4f7f\u6240\u6709\u8282\u70b9\u5ea6\u6570\u90fd\u4e3a\u5076\u6570",title:"2508.\u6dfb\u52a0\u8fb9\u4f7f\u6240\u6709\u8282\u70b9\u5ea6\u6570\u90fd\u4e3a\u5076\u6570",description:"\u94fe\u63a5\uff1a2508.\u6dfb\u52a0\u8fb9\u4f7f\u6240\u6709\u8282\u70b9\u5ea6\u6570\u90fd\u4e3a\u5076\u6570",source:"@site/docs/leetcode/2501-2600/2508.\u6dfb\u52a0\u8fb9\u4f7f\u6240\u6709\u8282\u70b9\u5ea6\u6570\u90fd\u4e3a\u5076\u6570.md",sourceDirName:"leetcode/2501-2600",slug:"/leetcode/2501-2600/\u6dfb\u52a0\u8fb9\u4f7f\u6240\u6709\u8282\u70b9\u5ea6\u6570\u90fd\u4e3a\u5076\u6570",permalink:"/docs/leetcode/2501-2600/\u6dfb\u52a0\u8fb9\u4f7f\u6240\u6709\u8282\u70b9\u5ea6\u6570\u90fd\u4e3a\u5076\u6570",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2508,frontMatter:{},sidebar:"journal",previous:{title:"2507.\u4f7f\u7528\u8d28\u56e0\u6570\u4e4b\u548c\u66ff\u6362\u540e\u53ef\u4ee5\u53d6\u5230\u7684\u6700\u5c0f\u503c",permalink:"/docs/leetcode/2501-2600/\u4f7f\u7528\u8d28\u56e0\u6570\u4e4b\u548c\u66ff\u6362\u540e\u53ef\u4ee5\u53d6\u5230\u7684\u6700\u5c0f\u503c"},next:{title:"2509.\u67e5\u8be2\u6811\u4e2d\u73af\u7684\u957f\u5ea6",permalink:"/docs/leetcode/2501-2600/\u67e5\u8be2\u6811\u4e2d\u73af\u7684\u957f\u5ea6"}},l={},c=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"2508\u6dfb\u52a0\u8fb9\u4f7f\u6240\u6709\u8282\u70b9\u5ea6\u6570\u90fd\u4e3a\u5076\u6570",children:"2508.\u6dfb\u52a0\u8fb9\u4f7f\u6240\u6709\u8282\u70b9\u5ea6\u6570\u90fd\u4e3a\u5076\u6570"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/add-edges-to-make-degrees-of-all-nodes-even",children:"2508.\u6dfb\u52a0\u8fb9\u4f7f\u6240\u6709\u8282\u70b9\u5ea6\u6570\u90fd\u4e3a\u5076\u6570"}),(0,t.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aHard",(0,t.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u56fe\u3001\u54c8\u5e0c\u8868",(0,t.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u6709 n\xa0 \u4e2a\u8282\u70b9\u7684 \u65e0\u5411 \xa0 \u56fe\uff0c\u8282\u70b9\u7f16\u53f7\u4e3a \xa01\xa0 \u5230 \xa0n\xa0\u3002\u518d\u7ed9\u4f60\u6574\u6570 \xa0n\xa0 \u548c\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 \xa0edges\xa0\uff0c\u5176\u4e2d \xa0edges[i] = [ai, bi]\xa0 \u8868\u793a\u8282\u70b9 \xa0ai \u548c \xa0bi\xa0 \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002\u56fe\u4e0d\u4e00\u5b9a\u8fde\u901a\u3002\u5982\u679c\u6dfb\u52a0\u989d\u5916\u7684\u8fb9\u540e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u56fe\u4e2d\u6240\u6709\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5076\u6570\uff0c\u8fd4\u56de true \uff0c\u5426\u5219\u8fd4\u56de false \u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-12-18"}),"\n",(0,t.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a512ms"}),"\n",(0,t.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a186.9MB"}),"\n",(0,t.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,t.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u7edf\u8ba1\u6240\u6709\u7684\u53ef\u80fd\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'struct Node{\n  int val;\n unordered_set<int> next;\n};\nclass Solution {\npublic:\n    bool isPossible(int n, vector<vector<int>>& edges) {\n        vector<Node> list(n);\n        for (int i = 1; i <= n; i++) list[i - 1].val = i;\n        for (auto &edge : edges) {\n            int v1 = edge[0] - 1, v2 = edge[1] - 1;\n            list[v1].next.insert(v2);\n            list[v2].next.insert(v1);\n        }\n        vector<int> nodes, nodes0;\n        for (auto &node : list) {\n            if (node.next.size() & 1) {\n                // cout << "node.val = " << node.val << ", size = " << node.next.size() << endl;\n                if (node.next.size() == n - 1) return false;\n                if (node.next.size() == 0) {\n                    nodes0.push_back(node.val - 1);\n                } else {\n                    nodes.push_back(node.val - 1);\n                }\n            }\n        }\n        cout << "NODE : " << endl;\n        for (auto &node : nodes) {\n            cout << list[node].val - 1 << ": ";\n            for (auto &next : list[node].next) cout << next << ", ";\n            cout << endl;\n        }\n        if (nodes.size() == 2) return true;\n        if (nodes.size() == 0) return true;\n        if (nodes.size() > 4) return false;\n        if (nodes0.size() > 1) return false;\n        if (nodes0.size() == 1) {\n            if (nodes.size() == 0) return true;\n            if (nodes.size() == 2) return true;\n            return false;\n        }\n        // cout << "===" << endl;\n        int ans = false;\n        unordered_set<int> used;\n        function<void(int,int)> dfs = [&](int i, int line) {\n            cout << "i = " << i << ", line = " << line << ", nodes[i] = " << (i == nodes.size() ? -1 : nodes[i]) << endl;\n            if (i == nodes.size()) {\n                ans = true;\n                return;\n            }\n            if (used.count(nodes[i])) {\n                // cout << "1" << endl;\n                dfs(i + 1, line);\n                return;\n            }\n            if (line == 0 && i != nodes.size()) return;\n                // cout << "2" << endl;\n                // cout << "3" << endl;\n            Node &node = list[nodes[i]];\n            for (int j = i + 1; j < nodes.size(); j++) {\n                if (used.count(nodes[j]) || node.next.count(nodes[j])) continue;\n                node.next.insert(nodes[j]);\n                list[nodes[j]].next.insert(nodes[i]);\n                used.insert(nodes[i]);\n                used.insert(nodes[j]);\n                // cout << "link : " << nodes[i] << ", " << nodes[j] << endl;\n                dfs(i + 1, line - 1);\n                node.next.erase(nodes[j]);\n                list[nodes[j]].next.erase(nodes[i]);\n                used.erase(nodes[i]);\n                used.erase(nodes[j]);\n            }\n        };\n        dfs(0, 2);\n        return ans;\n    }\n};\n'})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},25710:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>r});var t=s(30758);const i={},o=t.createContext(i);function d(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);