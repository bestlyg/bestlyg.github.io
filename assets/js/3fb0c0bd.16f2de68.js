"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[58297],{10773:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var s=t(86070),i=t(25710);const r={},l="1807.\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u5185\u5bb9",c={id:"leetcode/1801-1900/\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u5185\u5bb9",title:"1807.\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u5185\u5bb9",description:"\u94fe\u63a5\uff1a1807.\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u5185\u5bb9",source:"@site/docs/leetcode/1801-1900/1807.\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u5185\u5bb9.md",sourceDirName:"leetcode/1801-1900",slug:"/leetcode/1801-1900/\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u5185\u5bb9",permalink:"/web/site/docs/leetcode/1801-1900/\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u5185\u5bb9",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1807,frontMatter:{},sidebar:"journal",previous:{title:"1806.\u8fd8\u539f\u6392\u5217\u7684\u6700\u5c11\u64cd\u4f5c\u6b65\u6570",permalink:"/web/site/docs/leetcode/1801-1900/\u8fd8\u539f\u6392\u5217\u7684\u6700\u5c11\u64cd\u4f5c\u6b65\u6570"},next:{title:"1812.\u5224\u65ad\u56fd\u9645\u8c61\u68cb\u68cb\u76d8\u4e2d\u4e00\u4e2a\u683c\u5b50\u7684\u989c\u8272",permalink:"/web/site/docs/leetcode/1801-1900/\u5224\u65ad\u56fd\u9645\u8c61\u68cb\u68cb\u76d8\u4e2d\u4e00\u4e2a\u683c\u5b50\u7684\u989c\u8272"}},o={},a=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - rust",id:"\u9898\u89e3-2---rust",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"1807\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u5185\u5bb9",children:"1807.\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u5185\u5bb9"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,s.jsx)(n.a,{href:"https://leetcode.cn/problems/evaluate-the-bracket-pairs-of-a-string",children:"1807.\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u5185\u5bb9"}),(0,s.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1a\u4e2d\u7b49",(0,s.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u54c8\u5e0c\u8868\u3001\u5b57\u7b26\u4e32",(0,s.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u5b83\u5305\u542b\u4e00\u4e9b\u62ec\u53f7\u5bf9\uff0c\u6bcf\u4e2a\u62ec\u53f7\u4e2d\u5305\u542b\u4e00\u4e2a \u975e\u7a7a \u7684\u952e\u3002\u8bf7\u4f60\u8fd4\u56de\u66ff\u6362 \u6240\u6709 \u62ec\u53f7\u5bf9\u540e\u7684\u7ed3\u679c\u5b57\u7b26\u4e32\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-12"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a368ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a114.3MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u904d\u5386\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'class Solution {\npublic:\n    string evaluate(string s, vector<vector<string>>& knowledge) {\n        unordered_map<string, string> m;\n        for (auto &item : knowledge) m[item[0]] = item[1];\n        string ans = "";\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] != \'(\') ans += s[i];\n            else {\n                cout << "i = " << i << endl;\n                int start = i + 1;\n                while (s[i] != \')\') i++;\n                string key = s.substr(start, i - start);\n                if (!m.count(key)) ans += "?";\n                else ans += m[key];\n            }\n        }\n        return ans;\n    }\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u89e3-2---rust",children:"\u9898\u89e3 2 - rust"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-12"}),"\n",(0,s.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a76ms"}),"\n",(0,s.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a33.9MB"}),"\n",(0,s.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,s.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use std::collections::HashMap;\nimpl Solution {\n    pub fn evaluate(s: String, knowledge: Vec<Vec<String>>) -> String {\n        let s = s.chars().collect::<Vec<char>>();\n        let mut ans = String::new();\n        let mut m = HashMap::<String, String>::new();\n        for item in knowledge {\n            m.insert(item[0].clone(), item[1].clone());\n        }\n        let default_value = \"?\".to_string();\n        let mut i = 0;\n        while i < s.len() {\n            if s[i] != '(' {\n                ans.push(s[i]);\n            } else {\n                let start = i + 1;\n                while s[i] != ')' {\n                    i += 1;\n                }\n                let key = s[start..i].iter().collect::<String>();\n                let s: &String = m.get(&key).unwrap_or_else(||&default_value);\n                ans.push_str(s);\n            }\n            i += 1;\n        }\n        ans\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},25710:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var s=t(30758);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);