"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[77123],{31195:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>x,frontMatter:()=>o,metadata:()=>i,toc:()=>a});var s=t(86070),d=t(25710);const o={},l="2487.\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",i={id:"leetcode/2401-2500/\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",title:"2487.\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",description:"\u94fe\u63a5\uff1a2487.\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",source:"@site/docs/leetcode/2401-2500/2487.\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9.md",sourceDirName:"leetcode/2401-2500",slug:"/leetcode/2401-2500/\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",permalink:"/docs/leetcode/2401-2500/\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2487,frontMatter:{},sidebar:"journal",previous:{title:"2486.\u8ffd\u52a0\u5b57\u7b26\u4ee5\u83b7\u5f97\u5b50\u5e8f\u5217",permalink:"/docs/leetcode/2401-2500/\u8ffd\u52a0\u5b57\u7b26\u4ee5\u83b7\u5f97\u5b50\u5e8f\u5217"},next:{title:"2488.\u7edf\u8ba1\u4e2d\u4f4d\u6570\u4e3aK\u7684\u5b50\u6570\u7ec4",permalink:"/docs/leetcode/2401-2500/\u7edf\u8ba1\u4e2d\u4f4d\u6570\u4e3aK\u7684\u5b50\u6570\u7ec4"}},r={},a=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - python",id:"\u9898\u89e3-3---python",level:2},{value:"\u9898\u89e3 4 - rust",id:"\u9898\u89e3-4---rust",level:2}];function c(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"2487\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",children:"2487.\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,s.jsx)(e.a,{href:"https://leetcode.cn/problems/remove-nodes-from-linked-list",children:"2487.\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9"}),(0,s.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1a\u4e2d\u7b49",(0,s.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u6808\u3001\u9012\u5f52\u3001\u94fe\u8868\u3001\u5355\u8c03\u6808",(0,s.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 head \u3002\u5bf9\u4e8e\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9 node \uff0c\u5982\u679c\u5176\u53f3\u4fa7\u5b58\u5728\u4e00\u4e2a\u5177\u6709 \u4e25\u683c\u66f4\u5927 \u503c\u7684\u8282\u70b9\uff0c\u5219\u79fb\u9664 node \u3002\u8fd4\u56de\u4fee\u6539\u540e\u94fe\u8868\u7684\u5934\u8282\u70b9 head \u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-11-27"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a356ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a157.1MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\uff0c\u8bb0\u5f55\u540e\u9762\u7684\u6700\u5927\u503c\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'# define X first\n# define Y second\n# define lb(x) ((x) & (-x))\n# define mem(a,b) memset(a,b,sizeof(a))\n# define debug freopen("r.txt","r",stdin)\n# define pi pair<int,int>\nusing namespace std;\ntypedef long long ll;\n\nclass Solution {\npublic:\n    ListNode* removeNodes(ListNode* head) {\n      int maxnum = 0;\n      return _removeNodes(head, maxnum);\n    }\n    ListNode* _removeNodes(ListNode *head, int &maxnum) {\n      if (head == nullptr) return nullptr;\n      ListNode *next = _removeNodes(head->next, maxnum);\n      if (head->val >= maxnum) {\n        head->next = next;\n        next = head;\n      }\n      maxnum = max(maxnum, head->val);\n      return next;\n    }\n};\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2024-01-03"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a644ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a55.98MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5355\u8c03\u6808\u8bb0\u5f55\u6700\u5927\u5e8f\u5217\uff0c\u904d\u5386\u65f6\u8bb0\u5f55\u7236\u8282\u70b9\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        p = tempHead = ListNode(0, head)\n        s = []\n        map = {}\n        while p.next:\n            map[p.next] = p \n            while s and s[-1].val < p.next.val:\n                node = s.pop()\n                parent = map[node]\n                parent.next = node.next\n                map[node.next] = parent\n            s.append(p.next)\n            p = p.next\n        return tempHead.next\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-3---python",children:"\u9898\u89e3 3 - python"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2024-01-03"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a360ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a59.6MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","dfs\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        self.max = 0\n        def dfs(node: Optional[ListNode]) -> Optional[ListNode]:\n            if not node: return node\n            node.next = dfs(node.next)\n            if self.max > node.val: return node.next\n            self.max = node.val\n            return node\n        return dfs(head)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-4---rust",children:"\u9898\u89e3 4 - rust"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2024-01-03"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a72ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a11.33MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:"impl Solution {\n    pub fn remove_nodes(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        let mut max = 0;\n        fn dfs(node: Option<Box<ListNode>>, max: &mut i32) -> Option<Box<ListNode>> {\n            match node {\n                None => None,\n                Some(mut node) => {\n                    node.next = dfs(node.next.take(), max);\n                    if *max > node.val {\n                        node.next.take()\n                    } else {\n                        *max = node.val;\n                        Some(node)\n                    }\n                }\n            }\n        }\n        dfs(head, &mut max)\n    }\n}\n"})})]})}function x(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},25710:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>i});var s=t(30758);const d={},o=s.createContext(d);function l(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(d):n.components||d:l(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);