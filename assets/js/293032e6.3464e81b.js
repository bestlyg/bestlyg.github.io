"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[82331],{81672:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var s=i(86070),t=i(25710);const r={},l="736.Lisp\u8bed\u6cd5\u89e3\u6790",a={id:"leetcode/701-800/Lisp\u8bed\u6cd5\u89e3\u6790",title:"736.Lisp\u8bed\u6cd5\u89e3\u6790",description:"\u94fe\u63a5\uff1a736.Lisp\u8bed\u6cd5\u89e3\u6790",source:"@site/docs/leetcode/701-800/736.Lisp\u8bed\u6cd5\u89e3\u6790.md",sourceDirName:"leetcode/701-800",slug:"/leetcode/701-800/Lisp\u8bed\u6cd5\u89e3\u6790",permalink:"/web/site/docs/leetcode/701-800/Lisp\u8bed\u6cd5\u89e3\u6790",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:736,frontMatter:{},sidebar:"journal",previous:{title:"735.\u5c0f\u884c\u661f\u78b0\u649e",permalink:"/web/site/docs/leetcode/701-800/\u5c0f\u884c\u661f\u78b0\u649e"},next:{title:"738.\u5355\u8c03\u9012\u589e\u7684\u6570\u5b57",permalink:"/web/site/docs/leetcode/701-800/\u5355\u8c03\u9012\u589e\u7684\u6570\u5b57"}},o={},p=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - cpp",id:"\u9898\u89e3-2---cpp",level:2},{value:"\u9898\u89e3 3 - cpp",id:"\u9898\u89e3-3---cpp",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"736lisp\u8bed\u6cd5\u89e3\u6790",children:"736.Lisp\u8bed\u6cd5\u89e3\u6790"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,s.jsx)(e.a,{href:"https://leetcode.cn/problems/parse-lisp-expression",children:"736.Lisp\u8bed\u6cd5\u89e3\u6790"}),(0,s.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1a\u56f0\u96be",(0,s.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u6808\u3001\u9012\u5f52\u3001\u54c8\u5e0c\u8868\u3001\u5b57\u7b26\u4e32",(0,s.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u7c7b\u4f3c Lisp \u8bed\u53e5\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f expression\uff0c\u6c42\u51fa\u5176\u8ba1\u7b97\u7ed3\u679c\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-07-06"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a32ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a26MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\u6bd4\u8f83\uff0c\u6bcf\u6b21\u5b58\u50a8\u5f53\u524d\u53d8\u91cf\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"class Solution {\n   public:\n    vector<unordered_map<string, int>> varStark;\n    int evaluate(string expression) {\n        if (expression[0] == '(')\n            expression = expression.substr(1, expression.size() - 2);\n        vector<string> list = toToken(expression);\n        return comp(list);\n    }\n    vector<string> toToken(string &expression) {\n        vector<string> list;\n        int i;\n        if (expression[0] == 'l') list.push_back(\"let\"), i = 4;\n        if (expression[0] == 'm') list.push_back(\"mult\"), i = 5;\n        if (expression[0] == 'a') list.push_back(\"add\"), i = 4;\n        while (i < expression.size()) {\n            int end = expression[i] == '(' ? findEndIdx1(expression, i)\n                                           : findEndIdx2(expression, i);\n            list.push_back(expression.substr(i, end - i));\n            i = end;\n            while (i < expression.size() && expression[i] == ' ' ||\n                   expression[i] == ')')\n                i++;\n        }\n        return list;\n    }\n    int comp(vector<string> &list) {\n        int ans;\n        if (list[0] == \"let\") ans = comp_let(list);\n        if (list[0] == \"add\") ans = comp_var(list[1]) + comp_var(list[2]);\n        if (list[0] == \"mult\") ans = comp_var(list[1]) * comp_var(list[2]);\n        return ans;\n    }\n    int comp_let(vector<string> &list) {\n        int n = list.size();\n        unordered_map<string, int> m;\n        for (int i = 1; i < n - 1; i += 2) {\n            int val;\n            varStark.push_back(m);\n            if (list[i + 1][0] == '(')\n                val = evaluate(list[i + 1]);\n            else\n                val = get_var(list[i + 1]);\n            varStark.pop_back();\n            m[list[i]] = val;\n        }\n        int val;\n        varStark.push_back(m);\n        if (list[n - 1][0] == '(') {\n            val = evaluate(list[n - 1]);\n        } else\n            val = get_var(list[n - 1]);\n        varStark.pop_back();\n        return val;\n    }\n    int comp_var(string &str) {\n        int val;\n        if (str[0] == '(')\n            val = evaluate(str);\n        else\n            val = get_var(str);\n        return val;\n    }\n    int get_var(string &str) {\n        for (int i = varStark.size() - 1; i >= 0; i--)\n            if (varStark[i].count(str)) return varStark[i][str];\n        return stoi(str);\n    }\n    int findEndIdx1(string &expression, int start) {\n        int end = start, deep = 0;\n        do {\n            if (expression[end] == '(')\n                deep++;\n            else if (expression[end] == ')')\n                deep--;\n            end++;\n        } while (deep > 0);\n        return end;\n    }\n    int findEndIdx2(string &expression, int start) {\n        int end = start;\n        while (end < expression.size() && expression[end] != ' ') end++;\n        return end;\n    }\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-2---cpp",children:"\u9898\u89e3 2 - cpp"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-07-06"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a32ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a26MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\u6bd4\u8f83\uff0c\u6bcf\u6b21\u5b58\u50a8\u5f53\u524d\u53d8\u91cf\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"class Solution {\n   public:\n    vector<unordered_map<string, int>> varStark;\n    int evaluate(string expression) {\n        if (expression[0] == '(')\n            expression = expression.substr(1, expression.size() - 2);\n        vector<string> list = toToken(expression);\n        return comp(list);\n    }\n    vector<string> toToken(string &expression) {\n        vector<string> list;\n        int i;\n        if (expression[0] == 'l') list.push_back(\"let\"), i = 4;\n        if (expression[0] == 'm') list.push_back(\"mult\"), i = 5;\n        if (expression[0] == 'a') list.push_back(\"add\"), i = 4;\n        while (i < expression.size()) {\n            int end = expression[i] == '(' ? findEndIdx1(expression, i)\n                                           : findEndIdx2(expression, i);\n            list.push_back(expression.substr(i, end - i));\n            i = end;\n            while (i < expression.size() && expression[i] == ' ' ||\n                   expression[i] == ')')\n                i++;\n        }\n        return list;\n    }\n    int comp(vector<string> &list) {\n        int ans;\n        if (list[0] == \"let\") ans = comp_let(list);\n        if (list[0] == \"add\") ans = comp_var(list[1]) + comp_var(list[2]);\n        if (list[0] == \"mult\") ans = comp_var(list[1]) * comp_var(list[2]);\n        return ans;\n    }\n    int comp_let(vector<string> &list) {\n        int n = list.size();\n        unordered_map<string, int> m;\n        for (int i = 1; i < n - 1; i += 2) {\n            int val;\n            varStark.push_back(m);\n            if (list[i + 1][0] == '(')\n                val = evaluate(list[i + 1]);\n            else\n                val = get_var(list[i + 1]);\n            varStark.pop_back();\n            m[list[i]] = val;\n        }\n        int val;\n        varStark.push_back(m);\n        if (list[n - 1][0] == '(') {\n            val = evaluate(list[n - 1]);\n        } else\n            val = get_var(list[n - 1]);\n        varStark.pop_back();\n        return val;\n    }\n    int comp_var(string &str) {\n        int val;\n        if (str[0] == '(')\n            val = evaluate(str);\n        else\n            val = get_var(str);\n        return val;\n    }\n    int get_var(string &str) {\n        for (int i = varStark.size() - 1; i >= 0; i--)\n            if (varStark[i].count(str)) return varStark[i][str];\n        return stoi(str);\n    }\n    int findEndIdx1(string &expression, int start) {\n        int end = start, deep = 0;\n        do {\n            if (expression[end] == '(')\n                deep++;\n            else if (expression[end] == ')')\n                deep--;\n            end++;\n        } while (deep > 0);\n        return end;\n    }\n    int findEndIdx2(string &expression, int start) {\n        int end = start;\n        while (end < expression.size() && expression[end] != ' ') end++;\n        return end;\n    }\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-3---cpp",children:"\u9898\u89e3 3 - cpp"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2022-07-06"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a32ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a26MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u9012\u5f52\u6bd4\u8f83\uff0c\u6bcf\u6b21\u5b58\u50a8\u5f53\u524d\u53d8\u91cf\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"class Solution {\n   public:\n    vector<unordered_map<string, int>> varStark;\n    int evaluate(string expression) {\n        if (expression[0] == '(')\n            expression = expression.substr(1, expression.size() - 2);\n        vector<string> list = toToken(expression);\n        return comp(list);\n    }\n    vector<string> toToken(string &expression) {\n        vector<string> list;\n        int i;\n        if (expression[0] == 'l') list.push_back(\"let\"), i = 4;\n        if (expression[0] == 'm') list.push_back(\"mult\"), i = 5;\n        if (expression[0] == 'a') list.push_back(\"add\"), i = 4;\n        while (i < expression.size()) {\n            int end = expression[i] == '(' ? findEndIdx1(expression, i)\n                                           : findEndIdx2(expression, i);\n            list.push_back(expression.substr(i, end - i));\n            i = end;\n            while (i < expression.size() && expression[i] == ' ' ||\n                   expression[i] == ')')\n                i++;\n        }\n        return list;\n    }\n    int comp(vector<string> &list) {\n        int ans;\n        if (list[0] == \"let\") ans = comp_let(list);\n        if (list[0] == \"add\") ans = comp_var(list[1]) + comp_var(list[2]);\n        if (list[0] == \"mult\") ans = comp_var(list[1]) * comp_var(list[2]);\n        return ans;\n    }\n    int comp_let(vector<string> &list) {\n        int n = list.size();\n        unordered_map<string, int> m;\n        for (int i = 1; i < n - 1; i += 2) {\n            int val;\n            varStark.push_back(m);\n            if (list[i + 1][0] == '(')\n                val = evaluate(list[i + 1]);\n            else\n                val = get_var(list[i + 1]);\n            varStark.pop_back();\n            m[list[i]] = val;\n        }\n        int val;\n        varStark.push_back(m);\n        if (list[n - 1][0] == '(') {\n            val = evaluate(list[n - 1]);\n        } else\n            val = get_var(list[n - 1]);\n        varStark.pop_back();\n        return val;\n    }\n    int comp_var(string &str) {\n        int val;\n        if (str[0] == '(')\n            val = evaluate(str);\n        else\n            val = get_var(str);\n        return val;\n    }\n    int get_var(string &str) {\n        for (int i = varStark.size() - 1; i >= 0; i--)\n            if (varStark[i].count(str)) return varStark[i][str];\n        return stoi(str);\n    }\n    int findEndIdx1(string &expression, int start) {\n        int end = start, deep = 0;\n        do {\n            if (expression[end] == '(')\n                deep++;\n            else if (expression[end] == ')')\n                deep--;\n            end++;\n        } while (deep > 0);\n        return end;\n    }\n    int findEndIdx2(string &expression, int start) {\n        int end = start;\n        while (end < expression.size() && expression[end] != ' ') end++;\n        return end;\n    }\n};\n"})})]})}function c(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},25710:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>a});var s=i(30758);const t={},r=s.createContext(t);function l(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);