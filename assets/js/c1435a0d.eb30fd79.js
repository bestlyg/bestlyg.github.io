"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[34846],{49983:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>r,default:()=>a,frontMatter:()=>i,metadata:()=>f,toc:()=>m});var l=s(86070),t=s(31503);const i={},r="1825.\u6c42\u51faMK\u5e73\u5747\u503c",f={id:"leetcode/1801-1900/\u6c42\u51faMK\u5e73\u5747\u503c",title:"1825.\u6c42\u51faMK\u5e73\u5747\u503c",description:"\u94fe\u63a5\uff1a1825.\u6c42\u51faMK\u5e73\u5747\u503c",source:"@site/docs/leetcode/1801-1900/1825.\u6c42\u51faMK\u5e73\u5747\u503c.md",sourceDirName:"leetcode/1801-1900",slug:"/leetcode/1801-1900/\u6c42\u51faMK\u5e73\u5747\u503c",permalink:"/docs/leetcode/1801-1900/\u6c42\u51faMK\u5e73\u5747\u503c",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1825,frontMatter:{},sidebar:"journal",previous:{title:"1824.\u6700\u5c11\u4fa7\u8df3\u6b21\u6570",permalink:"/docs/leetcode/1801-1900/\u6700\u5c11\u4fa7\u8df3\u6b21\u6570"},next:{title:"1827.\u6700\u5c11\u64cd\u4f5c\u4f7f\u6570\u7ec4\u9012\u589e",permalink:"/docs/leetcode/1801-1900/\u6700\u5c11\u64cd\u4f5c\u4f7f\u6570\u7ec4\u9012\u589e"}},u={},m=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - rust",id:"\u9898\u89e3-2---rust",level:2},{value:"\u9898\u89e3 3 - python",id:"\u9898\u89e3-3---python",level:2}];function o(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"1825\u6c42\u51famk\u5e73\u5747\u503c",children:"1825.\u6c42\u51faMK\u5e73\u5747\u503c"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,l.jsx)(n.a,{href:"https://leetcode.cn/problems/finding-mk-average",children:"1825.\u6c42\u51faMK\u5e73\u5747\u503c"}),(0,l.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aHard",(0,l.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u961f\u5217\u3001\u6570\u636e\u6d41\u3001\u6709\u5e8f\u96c6\u5408\u3001\u5806\uff08\u4f18\u5148\u961f\u5217\uff09",(0,l.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u8bf7\u4f60\u5b9e\u73b0 MKAverage \u7c7b\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-18"}),"\n",(0,l.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a796ms"}),"\n",(0,l.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a144.8MB"}),"\n",(0,l.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,l.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u6709\u5e8f\u96c6\u5408\uff0c\u7ef4\u62a4\u6709\u5e8f\u6027,s1\u8868\u793a\u524dk\u4e2a\uff0cs3\u8868\u793a\u540ek\u4e2a\uff0cs2\u8868\u793a\u4e2d\u95f4m-2k\u4e2a\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'class MKAverage {\npublic:\n    multiset<int> s1, s2, s3;\n    queue<int> q;\n    long long sum = 0, m, k;\n    MKAverage(int m, int k) {\n        this->m = m;\n        this->k = k;\n    }\n \n    int calculateMKAverage() {\n        if (q.size() < m) return -1;\n        return sum / (m - 2 * k);\n    }\n \n    void addElement(int num) {\n        q.push(num);\n        if (q.size() <= m) {\n            s2.insert(num);\n            sum += num;\n            if (q.size() == m) {\n                while (s2.size() > m - 2 * k && s3.size() < k) {\n                    s3.insert(*s2.rbegin());\n                    sum -= *s2.rbegin();\n                    s2.erase(prev(s2.end()));\n                }\n                while (s2.size() > m - 2 * k && s1.size() < k) {\n                    s1.insert(*s2.begin());\n                    sum -= *s2.begin();\n                    s2.erase(s2.begin());\n                }\n            }\n        } else {\n            if (num < *s2.begin()) {\n                s2.insert(*s1.rbegin());\n                sum += *s1.rbegin();\n                s1.insert(num);\n                s1.erase(prev(s1.end()));\n            } else if (num >= *s3.begin()) {\n                s2.insert(*s3.begin());\n                sum += *s3.begin();\n                s3.insert(num);\n                s3.erase(s3.begin());\n            } else {\n                s2.insert(num);\n                sum += num;\n            }\n            int eraseVal = q.front();\n            q.pop();\n            if (s1.count(eraseVal)) {\n                s1.erase(s1.find(eraseVal));\n                s1.insert(*s2.begin());\n                sum -= *s2.begin();\n                s2.erase(s2.begin());\n            } else if (s3.count(eraseVal)) {\n                s3.erase(s3.find(eraseVal));\n                s3.insert(*s2.rbegin());\n                sum -= *s2.rbegin();\n                s2.erase(prev(s2.end()));\n            } else {\n                s2.erase(s2.find(eraseVal));\n                sum -= eraseVal;\n            }\n        }\n    }\n    void print(string title) {\n        cout << "===" << title << "===" << endl;\n        cout << "sum = " << sum << endl;\n        cout << "s1 : ";\n        for (auto &num : s1) cout << num << ", ";\n        cout << endl;\n        cout << "s2 : ";\n        for (auto &num : s2) cout << num << ", ";\n        cout << endl;\n        cout << "s3 : ";\n        for (auto &num : s3) cout << num << ", ";\n        cout << endl;\n    }\n};\n'})}),"\n",(0,l.jsx)(n.h2,{id:"\u9898\u89e3-2---rust",children:"\u9898\u89e3 2 - rust"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-18"}),"\n",(0,l.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a64ms"}),"\n",(0,l.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a35.1MB"}),"\n",(0,l.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,l.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:"use std::collections::BTreeMap;\nuse std::collections::VecDeque;\nstruct MulitSet<T: Ord + Copy + Clone> {\n    length: usize,\n    tree: BTreeMap<T, usize>,\n}\nimpl<T: Ord + Copy + Clone> MulitSet<T> {\n    fn new() -> Self {\n        MulitSet {\n            length: 0,\n            tree: BTreeMap::new(),\n        }\n    }\n    fn contains(&self, k: &T) -> bool {\n        self.tree.contains_key(k)\n    }\n    fn len(&self) -> usize {\n        self.length\n    }\n    fn insert(&mut self, key: T) {\n        *self.tree.entry(key).or_insert(0) += 1;\n        self.length += 1;\n    }\n    fn remove(&mut self, key: &T) {\n        let item = self.tree.get_mut(&key).unwrap();\n        if *item > 1 {\n            *item -= 1;\n        } else {\n            self.tree.remove(key);\n        }\n        self.length -= 1;\n    }\n    fn peek_first(&mut self) -> T {\n        *self.tree.iter().next().unwrap().0\n    }\n    fn peek_last(&mut self) -> T {\n        *self.tree.iter().rev().next().unwrap().0\n    }\n    fn pop_first(&mut self) -> T {\n        let key = self.peek_first();\n        self.remove(&key);\n        key\n    }\n    fn pop_last(&mut self) -> T {\n        let key = self.peek_last();\n        self.remove(&key);\n        key\n    }\n}\nstruct MKAverage {\n    m: i32,\n    k: i32,\n    sum: i64,\n    q: VecDeque<i32>,\n    s1: MulitSet<i32>,\n    s2: MulitSet<i32>,\n    s3: MulitSet<i32>,\n}\nimpl MKAverage {\n    fn new(m: i32, k: i32) -> Self {\n        Self {\n            m,\n            k,\n            sum: 0,\n            q: VecDeque::new(),\n            s1: MulitSet::<i32>::new(),\n            s2: MulitSet::<i32>::new(),\n            s3: MulitSet::<i32>::new(),\n        }\n    }\n    fn calculate_mk_average(&self) -> i32 {\n        if (self.q.len() as i32) < self.m {\n            -1\n        } else {\n            (self.sum / (self.m - 2 * self.k) as i64) as i32\n        }\n    }\n    fn add_element(&mut self, num: i32) {\n        let m = self.m as usize;\n        let k = self.k as usize;\n        self.q.push_back(num);\n        if self.q.len() <= m {\n            self.s2.insert(num);\n            self.sum += num as i64;\n            if self.q.len() == m {\n                for _ in 0..k {\n                    let num = self.s2.pop_last();\n                    self.sum -= num as i64;\n                    self.s3.insert(num);\n                    let num = self.s2.pop_first();\n                    self.sum -= num as i64;\n                    self.s1.insert(num);\n                }\n            }\n        } else {\n            if num < self.s2.peek_first() {\n                self.s1.insert(num);\n                self.sum += self.s1.peek_last() as i64;\n                self.s2.insert(self.s1.pop_last());\n            } else if num >= self.s3.peek_first() {\n                self.s3.insert(num);\n                self.sum += self.s3.peek_first() as i64;\n                self.s2.insert(self.s3.pop_first());\n            } else {\n                self.sum += num as i64;\n                self.s2.insert(num);\n            }\n            let pop_value = self.q.pop_front().unwrap();\n            if self.s1.contains(&pop_value) {\n                self.s1.remove(&pop_value);\n                self.sum -= self.s2.peek_first() as i64;\n                self.s1.insert(self.s2.pop_first());\n            } else if self.s3.contains(&pop_value) {\n                self.s3.remove(&pop_value);\n                self.sum -= self.s2.peek_last() as i64;\n                self.s3.insert(self.s2.pop_last());\n            } else {\n                self.sum -= pop_value as i64;\n                self.s2.remove(&pop_value);\n            }\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"\u9898\u89e3-3---python",children:"\u9898\u89e3 3 - python"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-18"}),"\n",(0,l.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a1748ms"}),"\n",(0,l.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a45.4MB"}),"\n",(0,l.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,l.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from queue import Queue\nfrom sortedcontainers import SortedList\nclass MKAverage:\n    def __init__(self, m: int, k: int):\n        self.m = m\n        self.k = k\n        self.sum = 0\n        self.q = Queue()\n        self.s1 = SortedList()\n        self.s2 = SortedList()\n        self.s3 = SortedList()\n    def calculateMKAverage(self) -> int:\n        if self.q.qsize() < self.m:\n            return -1\n        else:\n            return self.sum // (self.m - self.k * 2)\n    def addElement(self, num: int) -> None:\n        self.q.put(num)\n        if self.q.qsize() <= self.m:\n            self.s2.add(num)\n            self.sum += num\n            if self.q.qsize() == self.m:\n                for _ in range(self.k):\n                    self.sum -= self.s2[-1]\n                    self.s3.add(self.s2.pop())\n                    self.sum -= self.s2[0]\n                    self.s1.add(self.s2.pop(0))\n        else:\n            if num < self.s2[0]:\n                self.s1.add(num)\n                self.sum += self.s1[-1]\n                self.s2.add(self.s1.pop())\n            elif num >= self.s3[0]:\n                self.s3.add(num)\n                self.sum += self.s3[0]\n                self.s2.add(self.s3.pop(0))\n            else:\n                self.sum += num\n                self.s2.add(num)\n            removeVal = self.q.get()\n            if self.s1.count(removeVal):\n                self.s1.discard(removeVal)\n                self.sum -= self.s2[0]\n                self.s1.add(self.s2.pop(0))\n            elif self.s3.count(removeVal):\n                self.s3.discard(removeVal)\n                self.sum -= self.s2[-1]\n                self.s3.add(self.s2.pop())\n            else:\n                self.sum -= removeVal\n                self.s2.discard(removeVal)\n"})})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},31503:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>f});var l=s(30758);const t={},i=l.createContext(t);function r(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function f(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);