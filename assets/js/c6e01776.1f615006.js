"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[22480],{28488:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>l,toc:()=>u});var t=s(86070),r=s(25710);const c={},o="1349.\u53c2\u52a0\u8003\u8bd5\u7684\u6700\u5927\u5b66\u751f\u6570",l={id:"leetcode/1301-1400/\u53c2\u52a0\u8003\u8bd5\u7684\u6700\u5927\u5b66\u751f\u6570",title:"1349.\u53c2\u52a0\u8003\u8bd5\u7684\u6700\u5927\u5b66\u751f\u6570",description:"\u94fe\u63a5\uff1a1349.\u53c2\u52a0\u8003\u8bd5\u7684\u6700\u5927\u5b66\u751f\u6570",source:"@site/docs/leetcode/1301-1400/1349.\u53c2\u52a0\u8003\u8bd5\u7684\u6700\u5927\u5b66\u751f\u6570.md",sourceDirName:"leetcode/1301-1400",slug:"/leetcode/1301-1400/\u53c2\u52a0\u8003\u8bd5\u7684\u6700\u5927\u5b66\u751f\u6570",permalink:"/web/site/docs/leetcode/1301-1400/\u53c2\u52a0\u8003\u8bd5\u7684\u6700\u5927\u5b66\u751f\u6570",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1349,frontMatter:{},sidebar:"journal",previous:{title:"1345.\u8df3\u8dc3\u6e38\u620fIV",permalink:"/web/site/docs/leetcode/1301-1400/\u8df3\u8dc3\u6e38\u620fIV"},next:{title:"1356.\u6839\u636e\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b1\u7684\u6570\u76ee\u6392\u5e8f",permalink:"/web/site/docs/leetcode/1301-1400/\u6839\u636e\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b1\u7684\u6570\u76ee\u6392\u5e8f"}},i={},u=[{value:"\u9898\u89e3 1 - rust",id:"\u9898\u89e3-1---rust",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"1349\u53c2\u52a0\u8003\u8bd5\u7684\u6700\u5927\u5b66\u751f\u6570",children:"1349.\u53c2\u52a0\u8003\u8bd5\u7684\u6700\u5927\u5b66\u751f\u6570"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/maximum-students-taking-exam",children:"1349.\u53c2\u52a0\u8003\u8bd5\u7684\u6700\u5927\u5b66\u751f\u6570"}),(0,t.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1a\u56f0\u96be",(0,t.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u4f4d\u8fd0\u7b97\u3001\u6570\u7ec4\u3001\u52a8\u6001\u89c4\u5212\u3001\u72b6\u6001\u538b\u7f29\u3001\u77e9\u9635",(0,t.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u8bf7\u4f60\u8ba1\u7b97\u5e76\u8fd4\u56de\u8be5\u8003\u573a\u53ef\u4ee5\u5bb9\u7eb3\u7684\u540c\u65f6\u53c2\u52a0\u8003\u8bd5\u4e14\u65e0\u6cd5\u4f5c\u5f0a\u7684 \u6700\u5927 \u5b66\u751f\u4eba\u6570\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\u9898\u89e3-1---rust",children:"\u9898\u89e3 1 - rust"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-12-26"}),"\n",(0,t.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a4ms"}),"\n",(0,t.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2.05MB"}),"\n",(0,t.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,t.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u72b6\u6001\u538b\u7f29\uff0c\u52a8\u6001\u89c4\u5212\u6bcf\u4e00\u5c42\u7684\u6240\u6709\u72b6\u6001\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"use std::collections::HashMap;\nfn is1(num: usize, offset: usize) -> bool {\n    return (num & (1 << offset)) != 0;\n}\nfn check1(seats: &Vec<Vec<char>>, row: usize, used: usize) -> bool {\n    let mut prev = false;\n    for col in 0..seats[0].len() {\n        if is1(used, col) {\n            if prev || seats[row][col] == '#' {\n                return false;\n            }\n            prev = true;\n        } else {\n            prev = false;\n        }\n    }\n    true\n}\nfn check2(seats: &Vec<Vec<char>>, used: usize, pre_used: usize) -> bool {\n    for col in 0..seats[0].len() {\n        if is1(used, col)\n            && (col - 1 >= 0 && is1(pre_used, col - 1)\n                || col + 1 < seats[0].len() && is1(pre_used, col + 1))\n        {\n            return false;\n        }\n    }\n    true\n}\nfn dfs(\n    seats: &Vec<Vec<char>>,\n    cache: &mut HashMap<usize, HashMap<usize, i32>>,\n    pre_used: usize,\n    row: usize,\n) -> i32 {\n    if row < seats.len() {\n        if let Some(Some(res)) = cache.get(&row).map(|item| item.get(&pre_used)) {\n            *res\n        } else {\n            let res = (0..(1 << seats[0].len()))\n                .map(|used| {\n                    if check1(seats, row, used) && check2(seats, used, pre_used) {\n                        used.count_ones() as i32 + dfs(seats, cache, used, row + 1)\n                    } else {\n                        0\n                    }\n                })\n                .max()\n                .unwrap();\n            cache.entry(row).or_default().entry(pre_used).or_insert(res);\n            res\n        }\n    } else {\n        0\n    }\n}\nimpl Solution {\n    pub fn max_students(seats: Vec<Vec<char>>) -> i32 {\n        let mut cache = HashMap::new();\n        (0..(1 << seats[0].len()))\n            .map(|used| {\n                if check1(&seats, 0, used) {\n                    used.count_ones() as i32 + dfs(&seats, &mut cache, used, 1)\n                } else {\n                    0\n                }\n            })\n            .max()\n            .unwrap()\n    }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},25710:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(30758);const r={},c=t.createContext(r);function o(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);