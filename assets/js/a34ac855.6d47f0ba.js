"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[78981],{60501:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>r,default:()=>o,frontMatter:()=>c,metadata:()=>a,toc:()=>l});var i=t(86070),s=t(25710);const c={},r="1815.\u5f97\u5230\u65b0\u9c9c\u751c\u751c\u5708\u7684\u6700\u591a\u7ec4\u6570",a={id:"leetcode/1801-1900/\u5f97\u5230\u65b0\u9c9c\u751c\u751c\u5708\u7684\u6700\u591a\u7ec4\u6570",title:"1815.\u5f97\u5230\u65b0\u9c9c\u751c\u751c\u5708\u7684\u6700\u591a\u7ec4\u6570",description:"\u94fe\u63a5\uff1a1815.\u5f97\u5230\u65b0\u9c9c\u751c\u751c\u5708\u7684\u6700\u591a\u7ec4\u6570",source:"@site/docs/leetcode/1801-1900/1815.\u5f97\u5230\u65b0\u9c9c\u751c\u751c\u5708\u7684\u6700\u591a\u7ec4\u6570.md",sourceDirName:"leetcode/1801-1900",slug:"/leetcode/1801-1900/\u5f97\u5230\u65b0\u9c9c\u751c\u751c\u5708\u7684\u6700\u591a\u7ec4\u6570",permalink:"/docs/leetcode/1801-1900/\u5f97\u5230\u65b0\u9c9c\u751c\u751c\u5708\u7684\u6700\u591a\u7ec4\u6570",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1815,frontMatter:{},sidebar:"journal",previous:{title:"1814.\u7edf\u8ba1\u4e00\u4e2a\u6570\u7ec4\u4e2d\u597d\u5bf9\u5b50\u7684\u6570\u76ee",permalink:"/docs/leetcode/1801-1900/\u7edf\u8ba1\u4e00\u4e2a\u6570\u7ec4\u4e2d\u597d\u5bf9\u5b50\u7684\u6570\u76ee"},next:{title:"1816.\u622a\u65ad\u53e5\u5b50",permalink:"/docs/leetcode/1801-1900/\u622a\u65ad\u53e5\u5b50"}},u={},l=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - rust",id:"\u9898\u89e3-3---rust",level:2}];function m(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"1815\u5f97\u5230\u65b0\u9c9c\u751c\u751c\u5708\u7684\u6700\u591a\u7ec4\u6570",children:"1815.\u5f97\u5230\u65b0\u9c9c\u751c\u751c\u5708\u7684\u6700\u591a\u7ec4\u6570"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/maximum-number-of-groups-getting-fresh-donuts",children:"1815.\u5f97\u5230\u65b0\u9c9c\u751c\u751c\u5708\u7684\u6700\u591a\u7ec4\u6570"}),(0,i.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1aHard",(0,i.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u4f4d\u8fd0\u7b97\u3001\u8bb0\u5fc6\u5316\u641c\u7d22\u3001\u6570\u7ec4\u3001\u52a8\u6001\u89c4\u5212\u3001\u72b6\u6001\u538b\u7f29",(0,i.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u4f60\u53ef\u4ee5\u968f\u610f\u5b89\u6392\u6bcf\u6279\u987e\u5ba2\u5230\u6765\u7684\u987a\u5e8f\u3002\u8bf7\u4f60\u8fd4\u56de\u5728\u6b64\u524d\u63d0\u4e0b\uff0c\u6700\u591a \u6709\u591a\u5c11\u7ec4\u4eba\u4f1a\u611f\u5230\u5f00\u5fc3\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-22"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a4ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a8.1MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u5148\u7edf\u8ba11\u4e2a\u7ec4\u65e0\u4f59\u6570\uff0c2\u4e2a\u7ec4\u7ec4\u5408\u65e0\u4f59\u6570\uff0c\u5269\u4e0b\u7684\u8bb0\u5fc6\u5316\u641c\u7d22\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    unordered_map<int, int> cache;\n    int maxHappyGroups(int batchSize, vector<int>& groups) {\n        map<int, int> m;\n        int sum = 0;\n        for (int i = 0; i < groups.size(); i++) {\n            int num = groups[i] % batchSize;\n            if (num == 0) sum++;\n            else if (m[batchSize - num]) m[batchSize - num]--, sum++;\n            else m[num]++;\n        }\n        return sum + dfs(m, batchSize, 0);\n    }\n    int dfs(map<int, int> &m, int batchSize, int surplus) {\n        int cachek = trans(m);\n        if (cache[cachek]) return cache[cachek];\n        int res = 0;\n        for (auto &item : m) {\n            if (item.second == 0) continue;\n            item.second--;\n            res = max(res, (surplus == 0) + dfs(m, batchSize, (batchSize - item.first + surplus) % batchSize));\n            item.second++;\n        }\n        return cache[cachek] = res;\n    }\n    int trans(map<int, int> &m) {\n        int ans = 0, i = 0;\n        for (auto &item : m) ans |= item.second << (4 * i++);\n        return ans;\n    }\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-22"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a64ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a15.8MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from sortedcontainers import SortedDict\nclass Solution:\n    def maxHappyGroups(self, batchSize: int, groups: List[int]) -> int:\n        cache = defaultdict()\n        m = SortedDict()\n        nsum = 0\n        for group in groups:\n            num = group % batchSize\n            if num == 0:\n                nsum += 1\n            elif (batchSize - num) in m and m[batchSize - num] > 0:\n                m[batchSize - num] -= 1\n                nsum += 1\n            else:\n                item = m.setdefault(num, 0)\n                m[num] = item + 1\n        def trans(m: SortedDict):\n            ans = 0\n            i = 0\n            for item in m.values():\n                ans |= item << (4 * i)\n                i += 1\n            return ans\n        def dfs(m: SortedDict, surplus: int):\n            cachek = trans(m)\n            if cachek in cache:\n                return cache[cachek]\n            res = 0\n            for k in m.keys():\n                if m[k] == 0:\n                    continue\n                m[k] -= 1\n                res = max(res, (surplus == 0) +\n                          dfs(m, (batchSize - k + surplus) % batchSize))\n                m[k] += 1\n            cache[cachek] = res\n            return res\n        return nsum + dfs(m, 0)\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u9898\u89e3-3---rust",children:"\u9898\u89e3 3 - rust"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-22"}),"\n",(0,i.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a0ms"}),"\n",(0,i.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2.1MB"}),"\n",(0,i.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,i.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:"use std::collections::{BTreeMap, HashMap};\nimpl Solution {\n    pub fn max_happy_groups(batch_size: i32, groups: Vec<i32>) -> i32 {\n        let mut m = BTreeMap::<i32, i32>::new();\n        let mut sum = 0;\n        for group in groups {\n            let num = group % batch_size;\n            if num == 0 {\n                sum += 1;\n            } else if m.contains_key(&(batch_size - num)) && m[&(batch_size - num)] > 0 {\n                let item = m.get_mut(&(batch_size - num)).unwrap();\n                *item -= 1;\n                sum += 1;\n            } else {\n                let item = m.entry(num).or_insert(0);\n                *item += 1;\n            }\n        }\n        let mut cache = HashMap::<i32, i32>::new();\n        sum + Solution::dfs(m, &mut cache, batch_size, 0)\n    }\n    fn trans(m: &BTreeMap<i32, i32>) -> i32 {\n        let mut ans = 0;\n        let mut i = 0;\n        for (_, v) in m.iter() {\n            ans |= v << (4 * i);\n            i += 1;\n        }\n        ans\n    }\n    fn dfs(\n        m: BTreeMap<i32, i32>,\n        cache: &mut HashMap<i32, i32>,\n        batch_size: i32,\n        surplus: i32,\n    ) -> i32 {\n        let cachek = Solution::trans(&m);\n        if cache.contains_key(&cachek) {\n            *cache.get(&cachek).unwrap()\n        } else {\n            let mut res = 0;\n            for (k, v) in m.iter() {\n                if *v != 0 {\n                    let mut next_m = m.clone();\n                    *next_m.get_mut(k).unwrap() -= 1;\n                    res = res.max(\n                        i32::from(surplus == 0)\n                            + Solution::dfs(\n                                next_m,\n                                cache,\n                                batch_size,\n                                (batch_size - *k + surplus) % batch_size,\n                            ),\n                    );\n                }\n            }\n            cache.insert(cachek, res);\n            res\n        }\n    }\n}\n"})})]})}function o(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(m,{...n})}):m(n)}},25710:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>a});var i=t(30758);const s={},c=i.createContext(s);function r(n){const e=i.useContext(c);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(c.Provider,{value:e},n.children)}}}]);