"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[76756],{2695:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var t=r(86070),o=r(31503);const s={},l="889.\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811",i={id:"leetcode/801-900/\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811",title:"889.\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811",description:"\u94fe\u63a5\uff1a889.\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811",source:"@site/docs/leetcode/801-900/889.\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811.md",sourceDirName:"leetcode/801-900",slug:"/leetcode/801-900/\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/docs/leetcode/801-900/\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:889,frontMatter:{},sidebar:"journal",previous:{title:"888.\u516c\u5e73\u7684\u7cd6\u679c\u4ea4\u6362",permalink:"/docs/leetcode/801-900/\u516c\u5e73\u7684\u7cd6\u679c\u4ea4\u6362"},next:{title:"890.\u67e5\u627e\u548c\u66ff\u6362\u6a21\u5f0f",permalink:"/docs/leetcode/801-900/\u67e5\u627e\u548c\u66ff\u6362\u6a21\u5f0f"}},c={},d=[{value:"\u9898\u89e3 1 - java",id:"\u9898\u89e3-1---java",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"889\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811",children:"889.\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal",children:"889.\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811"}),(0,t.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,t.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u6811\u3001\u6570\u7ec4\u3001\u54c8\u5e0c\u8868\u3001\u5206\u6cbb\u3001\u4e8c\u53c9\u6811",(0,t.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u8fd4\u56de\u4e0e\u7ed9\u5b9a\u7684\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u5339\u914d\u7684\u4efb\u4f55\u4e8c\u53c9\u6811\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\u9898\u89e3-1---java",children:"\u9898\u89e3 1 - java"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2020-02-22"}),"\n",(0,t.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a3ms"}),"\n",(0,t.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a39.4MB"}),"\n",(0,t.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"}),"\n",(0,t.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u901a\u8fc7\u524d\u5e8f\u7684\u5de6\u8282\u70b9\u5934\u90e8\u548c\u540e\u5e8f\u7684\u5de6\u8282\u70b9\u5934\u90e8\u8fdb\u884c\u5339\u914d\u83b7\u53d6\u5de6\u8282\u70b9\u7684\u6700\u5927\u4e0b\u6807\uff0c\u518d\u901a\u8fc7\u5206\u5272\u6570\u7ec4\u8fdb\u884c\u9012\u5f52\u904d\u5386\u65b0\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode constructFromPrePost(int[] pre, int[] post) {\n    \tint len = pre.length;\n    \tif(len==0)return null;\n    \tTreeNode node = new TreeNode(pre[0]);\n    \tif(len==1)return node;\n    \tint L=0;\n    \tfor(int i=0;i<len;i++)\n    \t\tif(post[i]==pre[1])\n    \t\t\tL=i+1;\n    \tnode.left=constructFromPrePost(Arrays.copyOfRange(pre, 1, L+1), Arrays.copyOfRange(post, 0, L));\n    \tnode.right=constructFromPrePost(Arrays.copyOfRange(pre, L+1, len), Arrays.copyOfRange(post, L,len-1));\n    \treturn node;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2024-02-23"}),"\n",(0,t.jsx)(n.li,{children:"\u6267\u884c\u7528\u65f6\uff1a42ms"}),"\n",(0,t.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a16.39MB"}),"\n",(0,t.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,t.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","dfs\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def constructFromPrePost(self, preorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        if not preorder: return None\n        l = set()\n        r = set()\n        for i in range(len(preorder) - 1):\n            l.add(preorder[i + 1])\n            r.add(postorder[i])\n            if l == r: break\n        cnt = len(l)\n        return TreeNode(\n            preorder[0],\n            self.constructFromPrePost(preorder[1:cnt + 1], postorder[:cnt]),\n            self.constructFromPrePost(preorder[cnt + 1:], postorder[cnt:-1])\n        )\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},31503:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var t=r(30758);const o={},s=t.createContext(o);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);