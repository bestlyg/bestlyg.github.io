"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[73021],{68419:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>a,frontMatter:()=>l,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"leetcode/2001-2100/\u68c0\u67e5\u53e5\u5b50\u4e2d\u7684\u6570\u5b57\u662f\u5426\u9012\u589e","title":"2042.\u68c0\u67e5\u53e5\u5b50\u4e2d\u7684\u6570\u5b57\u662f\u5426\u9012\u589e","description":"\u94fe\u63a5\uff1a2042.\u68c0\u67e5\u53e5\u5b50\u4e2d\u7684\u6570\u5b57\u662f\u5426\u9012\u589e","source":"@site/docs/leetcode/2001-2100/2042.\u68c0\u67e5\u53e5\u5b50\u4e2d\u7684\u6570\u5b57\u662f\u5426\u9012\u589e.md","sourceDirName":"leetcode/2001-2100","slug":"/leetcode/2001-2100/\u68c0\u67e5\u53e5\u5b50\u4e2d\u7684\u6570\u5b57\u662f\u5426\u9012\u589e","permalink":"/docs/leetcode/2001-2100/\u68c0\u67e5\u53e5\u5b50\u4e2d\u7684\u6570\u5b57\u662f\u5426\u9012\u589e","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2042,"frontMatter":{},"sidebar":"journal","previous":{"title":"2039.\u7f51\u7edc\u7a7a\u95f2\u7684\u65f6\u523b","permalink":"/docs/leetcode/2001-2100/\u7f51\u7edc\u7a7a\u95f2\u7684\u65f6\u523b"},"next":{"title":"2043.\u7b80\u6613\u94f6\u884c\u7cfb\u7edf","permalink":"/docs/leetcode/2001-2100/\u7b80\u6613\u94f6\u884c\u7cfb\u7edf"}}');var t=s(86070),r=s(31503);const l={},c="2042.\u68c0\u67e5\u53e5\u5b50\u4e2d\u7684\u6570\u5b57\u662f\u5426\u9012\u589e",o={},u=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - rust",id:"\u9898\u89e3-2---rust",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"2042\u68c0\u67e5\u53e5\u5b50\u4e2d\u7684\u6570\u5b57\u662f\u5426\u9012\u589e",children:"2042.\u68c0\u67e5\u53e5\u5b50\u4e2d\u7684\u6570\u5b57\u662f\u5426\u9012\u589e"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u94fe\u63a5\uff1a",(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/check-if-numbers-are-ascending-in-a-sentence",children:"2042.\u68c0\u67e5\u53e5\u5b50\u4e2d\u7684\u6570\u5b57\u662f\u5426\u9012\u589e"}),(0,t.jsx)(n.br,{}),"\n","\u96be\u5ea6\uff1aEasy",(0,t.jsx)(n.br,{}),"\n","\u6807\u7b7e\uff1a\u5b57\u7b26\u4e32",(0,t.jsx)(n.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u8868\u793a\u53e5\u5b50\u7684\u5b57\u7b26\u4e32 s \uff0c\u4f60\u9700\u8981\u68c0\u67e5 s \u4e2d\u7684 \u5168\u90e8 \u6570\u5b57\u662f\u5426\u4ece\u5de6\u5230\u53f3\u4e25\u683c\u9012\u589e\uff08\u5373\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0cs \u4e2d\u7684 \u6bcf\u4e2a \u6570\u5b57\u90fd\u4e25\u683c\u5c0f\u4e8e\u5b83 \u53f3\u4fa7 \u7684\u6570\u5b57\uff09\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-03"}),"\n",(0,t.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a6.1MB"}),"\n",(0,t.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,t.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u904d\u5386\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    bool areNumbersAscending(string s) {\n        int prev = 0;\n        for (int i = 0; i < s.size(); i++) {\n            if (!isdigit(s[i])) continue;\n            int num = 0;\n            while (i < s.size() && isdigit(s[i])) num = num * 10 + s[i++] - '0';\n            if (prev >= num) return false;\n            prev = num;\n        }\n        return true;\n    }\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u9898\u89e3-2---rust",children:"\u9898\u89e3 2 - rust"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-01-03"}),"\n",(0,t.jsx)(n.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2.2MB"}),"\n",(0,t.jsx)(n.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,t.jsxs)(n.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"impl Solution {\n    pub fn are_numbers_ascending(s: String) -> bool {\n        let s: Vec<char> = s.chars().collect();\n        let mut i = 0;\n        let mut prev = 0;\n        while i < s.len() {\n            if s[i].is_digit(10) {\n                let mut num = 0;\n                while i < s.len() && s[i].is_digit(10) {\n                    num = num * 10 + (s[i] as i32 - '0' as i32);\n                    i += 1;\n                }\n                if prev >= num {\n                    return false;\n                }\n                prev = num\n            }\n            i += 1;\n        }\n        true\n    }\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},31503:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(30758);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);