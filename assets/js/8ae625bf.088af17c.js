"use strict";(self.webpackChunk_bestlyg_site=self.webpackChunk_bestlyg_site||[]).push([[32892],{65123:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>u,default:()=>p,frontMatter:()=>m,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"leetcode/2601-2700/\u8d28\u6570\u51cf\u6cd5\u8fd0\u7b97","title":"2601.\u8d28\u6570\u51cf\u6cd5\u8fd0\u7b97","description":"\u94fe\u63a5\uff1a2601.\u8d28\u6570\u51cf\u6cd5\u8fd0\u7b97","source":"@site/docs/leetcode/2601-2700/2601.\u8d28\u6570\u51cf\u6cd5\u8fd0\u7b97.md","sourceDirName":"leetcode/2601-2700","slug":"/leetcode/2601-2700/\u8d28\u6570\u51cf\u6cd5\u8fd0\u7b97","permalink":"/docs/leetcode/2601-2700/\u8d28\u6570\u51cf\u6cd5\u8fd0\u7b97","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2601,"frontMatter":{},"sidebar":"journal","previous":{"title":"2600.K\u4ef6\u7269\u54c1\u7684\u6700\u5927\u548c","permalink":"/docs/leetcode/2501-2600/K\u4ef6\u7269\u54c1\u7684\u6700\u5927\u548c"},"next":{"title":"2602.\u4f7f\u6570\u7ec4\u5143\u7d20\u5168\u90e8\u76f8\u7b49\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570","permalink":"/docs/leetcode/2601-2700/\u4f7f\u6570\u7ec4\u5143\u7d20\u5168\u90e8\u76f8\u7b49\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570"}}');var s=i(86070),t=i(31503);const m={},u="2601.\u8d28\u6570\u51cf\u6cd5\u8fd0\u7b97",l={},o=[{value:"\u9898\u89e3 1 - cpp",id:"\u9898\u89e3-1---cpp",level:2},{value:"\u9898\u89e3 2 - python",id:"\u9898\u89e3-2---python",level:2},{value:"\u9898\u89e3 3 - rust",id:"\u9898\u89e3-3---rust",level:2}];function c(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"2601\u8d28\u6570\u51cf\u6cd5\u8fd0\u7b97",children:"2601.\u8d28\u6570\u51cf\u6cd5\u8fd0\u7b97"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["\u94fe\u63a5\uff1a",(0,s.jsx)(e.a,{href:"https://leetcode.cn/problems/prime-subtraction-operation",children:"2601.\u8d28\u6570\u51cf\u6cd5\u8fd0\u7b97"}),(0,s.jsx)(e.br,{}),"\n","\u96be\u5ea6\uff1aMedium",(0,s.jsx)(e.br,{}),"\n","\u6807\u7b7e\uff1a\u8d2a\u5fc3\u3001\u6570\u7ec4\u3001\u6570\u5b66\u3001\u4e8c\u5206\u67e5\u627e\u3001\u6570\u8bba",(0,s.jsx)(e.br,{}),"\n","\u7b80\u4ecb\uff1a","\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u957f\u5ea6\u4e3a n \u3002\u5982\u679c\u4f60\u80fd\u901a\u8fc7\u4e0a\u8ff0\u8fd0\u7b97\u4f7f\u5f97 nums \u6210\u4e3a\u4e25\u683c\u9012\u589e\u6570\u7ec4\uff0c\u5219\u8fd4\u56de true \uff1b\u5426\u5219\u8fd4\u56de false \u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-1---cpp",children:"\u9898\u89e3 1 - cpp"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-26"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a16ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a23MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u7ebf\u6027\u7b5b\u540e\u5bf9\u6bcf\u4e2a\u6570\u5c1d\u8bd5\u5c3d\u53ef\u80fd\u53d6\u6700\u5c0f\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int primes[1005] = {0};\n    bool primeSubOperation(vector<int>& nums) {\n        getPrimes();\n        nums[0] = formatNum(nums[0], 0);\n        for (int i = 1; i < nums.size(); i++) {\n            nums[i] = formatNum(nums[i], nums[i - 1]);\n            if (nums[i] <= nums[i - 1]) return false;\n        }\n        return true;\n    }\n    int formatNum(int num, int prev) {\n        int cur = num;\n        for (int i = 1; i < primes[0] + 1 && primes[i] < num && num - primes[i] > prev; i++) {\n            cur = min(cur, num - primes[i]);\n        }\n        return cur;\n    }\n    \n    void getPrimes() {\n        for (int i = 2; i < 1005; i++) {\n            if (primes[i] == 0) primes[++primes[0]] = i;\n            for (int j = 1; j <= primes[0] && i * primes[j] < 1005; j++) {\n                primes[i * primes[j]] = 1;\n                if (i % primes[j] == 0) break;\n            }\n        }\n    }\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-2---python",children:"\u9898\u89e3 2 - python"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-26"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a364ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a15MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1apython"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"def getPrimes(nmax: int):\n    primes = [0] * nmax\n    for i in range(2, nmax):\n        if primes[i] == 0:\n            primes[0] += 1\n            primes[primes[0]] = i\n        for j in range(1, nmax):\n            if i * primes[j] >= nmax:\n                break\n            primes[i * primes[j]] = 1\n            if i % primes[j] == 0:\n                break\n    return primes\nclass Solution:\n    def primeSubOperation(self, nums: List[int]) -> bool:\n        primes = getPrimes(1005)\n        def formatNum(num: int, prev: int):\n            cur = num\n            for i in range(1, primes[0] + 1):\n                if primes[i] >= num or num - primes[i] <= prev:\n                    break\n                cur = min(cur, num - primes[i])\n            return cur\n        nums[0] = formatNum(nums[0], 0)\n        for i in range(1, len(nums)):\n            nums[i] = formatNum(nums[i], nums[i-1])\n            if nums[i] <= nums[i-1]:\n                return False\n        return True\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u9898\u89e3-3---rust",children:"\u9898\u89e3 3 - rust"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7f16\u8f91\u65f6\u95f4\uff1a2023-03-26"}),"\n",(0,s.jsx)(e.li,{children:"\u6267\u884c\u7528\u65f6\uff1a8ms"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5b58\u6d88\u8017\uff1a2.1MB"}),"\n",(0,s.jsx)(e.li,{children:"\u7f16\u7a0b\u8bed\u8a00\uff1arust"}),"\n",(0,s.jsxs)(e.li,{children:["\u89e3\u6cd5\u4ecb\u7ecd\uff1a","\u540c\u4e0a\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:"fn get_primes(max: usize) -> Vec<usize> {\n    let mut primes = vec![0; max];\n    for i in 2..max {\n        if primes[i] == 0 {\n            primes[0] += 1;\n            let idx = primes[0];\n            primes[idx] = i;\n        }\n        for j in 1..=primes[0] {\n            let idx = i * primes[j];\n            if idx >= max {\n                break;\n            }\n            primes[idx] = 1;\n            if i % primes[j] == 0 {\n                break;\n            }\n        }\n    }\n    primes\n}\nimpl Solution {\n    pub fn prime_sub_operation(mut nums: Vec<i32>) -> bool {\n        let primes = get_primes(1005);\n        let format_num = |num: i32, prev: i32| {\n            let mut cur = num;\n            for i in 1..=primes[0] {\n                if primes[i] as i32 >= num || num - primes[i] as i32 <= prev {\n                    break;\n                }\n                cur = cur.min(num - primes[i] as i32);\n            }\n            cur\n        };\n        nums[0] = format_num(nums[0], 0);\n        for i in 1..nums.len() {\n            nums[i] = format_num(nums[i], nums[i - 1]);\n            if nums[i] <= nums[i - 1] {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"})})]})}function p(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},31503:(n,e,i)=>{i.d(e,{R:()=>m,x:()=>u});var r=i(30758);const s={},t=r.createContext(s);function m(n){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function u(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:m(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);